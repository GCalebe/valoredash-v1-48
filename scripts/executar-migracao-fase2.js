#!/usr/bin/env node

/**
 * Script para executar a migra√ß√£o da Fase 2 do Plano de Implementa√ß√£o Otimizado
 * Implementa as tabelas importantes: usu√°rios, m√©tricas, kanban e campos customizados
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

config();

// Configura√ß√£o do Supabase com service role key para permiss√µes administrativas
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  console.error('Verifique o arquivo .env na raiz do projeto');
  process.exit(1);
}

// Cliente Supabase com service role (bypassa RLS)
const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function executarMigracaoFase2() {
  console.log('üöÄ Iniciando migra√ß√£o da Fase 2: Sistema de Usu√°rios, M√©tricas e Kanban');
  console.log('üìã Implementando 11 tabelas importantes conforme Plano de Implementa√ß√£o Otimizado\n');

  try {
    // Ler o arquivo de migra√ß√£o SQL
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '20250103000002_fase_2_sistema_usuarios_metricas.sql');
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Arquivo de migra√ß√£o n√£o encontrado: ${migrationPath}`);
    }

    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    console.log('üìÑ Arquivo de migra√ß√£o carregado com sucesso');
    console.log(`üìç Caminho: ${migrationPath}\n`);

    // Dividir o SQL em comandos individuais para execu√ß√£o
    const commands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--') && !cmd.startsWith('/*'));

    console.log(`üìä Executando ${commands.length} comandos SQL...\n`);

    let sucessos = 0;
    let falhas = 0;

    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      
      // Pular comandos de verifica√ß√£o SELECT no final
      if (command.toLowerCase().includes('select') && command.toLowerCase().includes('information_schema')) {
        console.log(`‚è≠Ô∏è  Comando ${i + 1}: Verifica√ß√£o pulada`);
        continue;
      }

      try {
        // Tentar executar o comando
        const { error } = await supabase.rpc('exec', {
          sql: command + ';'
        });
        
        if (error) {
          console.log(`‚ö†Ô∏è  Comando ${i + 1}: ${error.message}`);
          falhas++;
        } else {
          console.log(`‚úÖ Comando ${i + 1}: Executado com sucesso`);
          sucessos++;
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è  Comando ${i + 1}: ${err.message}`);
        falhas++;
      }

      // Pequena pausa para evitar rate limiting
      if (i % 10 === 0 && i > 0) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    console.log(`\nüìä Resumo da execu√ß√£o:`);
    console.log(`‚úÖ Sucessos: ${sucessos}`);
    console.log(`‚ö†Ô∏è  Falhas: ${falhas}`);

    // Verificar se as tabelas foram criadas
    console.log('\nüîç Verificando tabelas criadas...');
    
    const tabelasEsperadas = [
      'profiles',
      'user_settings',
      'user_sessions', 
      'user_activity_log',
      'conversation_daily_data',
      'performance_metrics',
      'system_reports',
      'metrics_cache',
      'kanban_stages',
      'custom_field_definitions',
      'client_custom_values'
    ];

    let tabelasCriadas = 0;

    for (const tabela of tabelasEsperadas) {
      try {
        const { data: tableData, error: tableError } = await supabase
          .from(tabela)
          .select('*')
          .limit(1);

        if (tableError) {
          console.log(`‚ùå Tabela '${tabela}': ${tableError.message}`);
        } else {
          console.log(`‚úÖ Tabela '${tabela}': Criada e acess√≠vel`);
          tabelasCriadas++;
        }
      } catch (err) {
        console.log(`‚ùå Tabela '${tabela}': ${err.message}`);
      }
    }

    console.log(`\nüìà Progresso da Fase 2: ${tabelasCriadas}/${tabelasEsperadas.length} tabelas criadas`);

    if (tabelasCriadas >= tabelasEsperadas.length * 0.8) {
      console.log('üéâ Migra√ß√£o da Fase 2 conclu√≠da com sucesso!');
    } else {
      console.log('‚ö†Ô∏è  Migra√ß√£o da Fase 2 parcialmente conclu√≠da');
    }

    console.log('\nüìã Pr√≥ximos passos:');
    console.log('   1. Verificar se todas as tabelas foram criadas corretamente');
    console.log('   2. Testar inser√ß√£o de dados de exemplo');
    console.log('   3. Executar migra√ß√£o da Fase 3 (tabelas opcionais)');
    console.log('   4. Atualizar hooks do React para usar as novas tabelas');
    console.log('   5. Implementar valida√ß√£o de dados e testes\n');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
    console.error('\nüîß Poss√≠veis solu√ß√µes:');
    console.error('   1. Verificar se as credenciais do Supabase est√£o corretas no .env');
    console.error('   2. Confirmar se o service role key tem permiss√µes administrativas');
    console.error('   3. Verificar se a conex√£o com o Supabase est√° funcionando');
    console.error('   4. Executar a migra√ß√£o manualmente no painel do Supabase\n');
    process.exit(1);
  }
}

// Fun√ß√£o para verificar progresso geral
async function verificarProgressoGeral() {
  console.log('\nüìä VERIFICANDO PROGRESSO GERAL DO PLANO DE IMPLEMENTA√á√ÉO');
  console.log('=' .repeat(60));

  const todasTabelas = {
    'Fase 1 - Chat e Conversas': [
      'conversations', 'n8n_chat_memory', 'n8n_chat_histories', 
      'n8n_chat_messages', 'chat_messages_backup'
    ],
    'Fase 2 - Usu√°rios e M√©tricas': [
      'profiles', 'user_settings', 'user_sessions', 'user_activity_log',
      'conversation_daily_data', 'performance_metrics', 'system_reports', 
      'metrics_cache', 'kanban_stages', 'custom_field_definitions', 'client_custom_values'
    ]
  };

  let totalTabelas = 0;
  let tabelasImplementadas = 0;

  for (const [fase, tabelas] of Object.entries(todasTabelas)) {
    console.log(`\nüîç ${fase}:`);
    let implementadasFase = 0;
    
    for (const tabela of tabelas) {
      totalTabelas++;
      try {
        const { error } = await supabase
          .from(tabela)
          .select('*')
          .limit(1);

        if (!error) {
          console.log(`  ‚úÖ ${tabela}`);
          implementadasFase++;
          tabelasImplementadas++;
        } else {
          console.log(`  ‚ùå ${tabela}`);
        }
      } catch (err) {
        console.log(`  ‚ùå ${tabela}`);
      }
    }
    
    const percentual = Math.round((implementadasFase / tabelas.length) * 100);
    console.log(`  üìà Progresso: ${implementadasFase}/${tabelas.length} (${percentual}%)`);
  }

  const progressoTotal = Math.round((tabelasImplementadas / totalTabelas) * 100);
  console.log(`\nüéØ PROGRESSO TOTAL: ${tabelasImplementadas}/${totalTabelas} tabelas (${progressoTotal}%)`);
  
  if (progressoTotal >= 80) {
    console.log('üéâ Implementa√ß√£o est√° em excelente progresso!');
  } else if (progressoTotal >= 50) {
    console.log('üëç Implementa√ß√£o est√° em bom progresso!');
  } else {
    console.log('‚ö†Ô∏è  Implementa√ß√£o precisa de mais aten√ß√£o.');
  }
}

// Fun√ß√£o para testar conex√£o
async function testarConexao() {
  console.log('üîó Testando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase
      .from('contacts')
      .select('id')
      .limit(1);

    if (error) {
      console.log(`‚ö†Ô∏è  Aviso na conex√£o: ${error.message}`);
    } else {
      console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso\n');
    }
  } catch (err) {
    console.error('‚ùå Erro na conex√£o:', err.message);
    throw err;
  }
}

// Executar o script
async function main() {
  console.log('=' .repeat(60));
  console.log('üéØ MIGRA√á√ÉO FASE 2 - PLANO DE IMPLEMENTA√á√ÉO OTIMIZADO');
  console.log('=' .repeat(60));
  
  try {
    await testarConexao();
    await executarMigracaoFase2();
    await verificarProgressoGeral();
  } catch (error) {
    console.error('üí• Falha na execu√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar a migra√ß√£o
main().catch(console.error);

export { executarMigracaoFase2, verificarProgressoGeral, testarConexao };