[{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\chat-optimized\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadChats' function makes the dependencies of useEffect Hook (at line 129) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'loadChats' in its own useCallback() Hook.","line":98,"column":9,"nodeType":"VariableDeclarator","endLine":114,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { ChatAreaOptimized } from '@/components/chat/ChatAreaOptimized';\r\nimport { ChatList } from '@/components/chat/ChatList';\r\nimport { Chat, Conversation } from '@/types/chat';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Loader2 } from 'lucide-react';\r\nimport { logger } from '@/utils/logger';\r\n\r\n// Interface para dados brutos do Supabase\r\ninterface SupabaseConversationData {\r\n  id: string;\r\n  name?: string;\r\n  phone?: string;\r\n  email?: string;\r\n  session_id?: string;\r\n  created_at: string;\r\n}\r\n\r\n/**\r\n * Página otimizada de chat que demonstra as melhorias de performance\r\n */\r\nexport default function ChatOptimizedPage() {\r\n  const [chats, setChats] = useState<Chat[]>([]);\r\n  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\r\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Função para formatar os dados de conversa recebidos do Supabase\r\n  const formatChatData = (data: SupabaseConversationData[]): Chat[] => {\r\n    // Agrupar conversas por cliente/contato\r\n    const groupedConversations = data.reduce((acc, conv) => {\r\n      const clientId = conv.session_id || conv.id;\r\n      const clientName = conv.name || `Cliente ${clientId}`;\r\n      \r\n      if (!acc[clientId]) {\r\n        acc[clientId] = {\r\n          id: clientId,\r\n          client: {\r\n            id: clientId,\r\n            name: clientName,\r\n            email: conv.email,\r\n          },\r\n          conversations: [],\r\n        };\r\n      }\r\n      \r\n      acc[clientId].conversations.push({\r\n        id: conv.id,\r\n        name: conv.name,\r\n        lastMessage: '',\r\n        time: conv.created_at,\r\n        unread: 0,\r\n        phone: conv.phone,\r\n        email: conv.email,\r\n        sessionId: conv.session_id,\r\n      });\r\n      \r\n      return acc;\r\n    }, {} as Record<string, Chat>);\r\n    \r\n    return Object.values(groupedConversations);\r\n  };\r\n\r\n  // Função para selecionar o chat e conversa iniciais\r\n  const selectInitialChatAndConversation = (chats: Chat[]) => {\r\n    if (chats.length > 0) {\r\n      const firstChat = chats[0];\r\n      setSelectedChat(firstChat);\r\n      \r\n      if (firstChat.conversations.length > 0) {\r\n        setSelectedConversation(firstChat.conversations[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Função para buscar chats do Supabase (usando tabelas disponíveis)\r\n  const fetchChatsFromSupabase = async () => {\r\n    const { data, error } = await supabase\r\n      .from('conversations')\r\n      .select(`\r\n        id,\r\n        name,\r\n        phone,\r\n        email,\r\n        session_id,\r\n        created_at\r\n      `)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  };\r\n\r\n  // Função principal para carregar chats\r\n  const loadChats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const data = await fetchChatsFromSupabase();\r\n      const formattedChats = formatChatData(data);\r\n      \r\n      setChats(formattedChats);\r\n      selectInitialChatAndConversation(formattedChats);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar chats:', err);\r\n      setError('Falha ao carregar chats. Por favor, tente novamente.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar chats ao montar o componente\r\n  useEffect(() => {\r\n    loadChats();\r\n    \r\n    // Configurar subscription para atualizações em tempo real\r\n    const subscription = supabase\r\n      .channel('conversations_changes')\r\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'conversations' }, loadChats)\r\n      .subscribe();\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [loadChats]);\r\n\r\n  // Manipular seleção de chat\r\n  const handleSelectChat = (chat: Chat) => {\r\n    setSelectedChat(chat);\r\n    \r\n    // Selecionar primeira conversa por padrão\r\n    if (chat.conversations.length > 0) {\r\n      setSelectedConversation(chat.conversations[0]);\r\n    } else {\r\n      setSelectedConversation(null);\r\n    }\r\n  };\r\n\r\n  // Manipular seleção de conversa\r\n  const handleSelectConversation = (conversation: Conversation) => {\r\n    setSelectedConversation(conversation);\r\n  };\r\n\r\n  // Renderizar estado de carregamento\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex h-screen items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n        <span className=\"ml-2\">Carregando chats...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Renderizar mensagem de erro\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex h-screen items-center justify-center\">\r\n        <div className=\"p-4 bg-red-50 text-red-500 rounded-md\">\r\n          <p>{error}</p>\r\n          <button\r\n            className=\"mt-2 px-4 py-2 bg-primary text-white rounded-md\"\r\n            onClick={() => window.location.reload()}\r\n          >\r\n            Tentar novamente\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-screen overflow-hidden\">\r\n      {/* Barra lateral com lista de chats */}\r\n      <div className=\"w-80 border-r\">\r\n        <ChatList\r\n          chats={chats}\r\n          selectedChat={selectedChat}\r\n          onSelectChat={handleSelectChat}\r\n          selectedConversation={selectedConversation}\r\n          onSelectConversation={handleSelectConversation}\r\n        />\r\n      </div>\r\n      \r\n      {/* Área principal de chat otimizada */}\r\n      <div className=\"flex-1\">\r\n        <ChatAreaOptimized\r\n          selectedChat={selectedChat}\r\n          selectedConversation={selectedConversation}\r\n        />\r\n      </div>\r\n      \r\n      {/* Indicador de versão otimizada */}\r\n      <div className=\"absolute bottom-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full\">\r\n        Versão Otimizada\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\contextual-memory-viewer\\page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":58,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { ContextualMemoryViewer } from '@/components/ContextualMemoryViewer';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function ContextualMemoryViewerPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sessões\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sessões\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sessão por padrão\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: unknown) {\r\n      console.error('Erro ao carregar sessões:', err);\r\n      setError(err.message || 'Erro ao carregar sessões');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sessões ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, [\u0001, loadSessions]);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Visualizador de Memória Contextual</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Explore o contexto atual e memórias contextuais das conversas\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas memórias contextuais\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <ContextualMemoryViewer \r\n            sessionId={selectedSessionId} \r\n            autoRefresh={false} \r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\episodic-memory-viewer\\page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":58,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { EpisodicMemoryViewer } from '@/components/EpisodicMemoryViewer';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function EpisodicMemoryViewerPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sessões\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sessões\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sessão por padrão\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: unknown) {\r\n      console.error('Erro ao carregar sessões:', err);\r\n      setError(err.message || 'Erro ao carregar sessões');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sessões ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, [\u0001, loadSessions]);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Visualizador de Memória Episódica</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Explore a linha do tempo e memórias episódicas das conversas\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas memórias episódicas\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <EpisodicMemoryViewer \r\n            sessionId={selectedSessionId} \r\n            autoRefresh={false} \r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\memory-dashboard\\page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":61,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw, Brain, Clock, BookOpen } from 'lucide-react';\r\nimport { SemanticMemoryViewer } from '@/components/SemanticMemoryViewer';\r\nimport { EpisodicMemoryViewer } from '@/components/EpisodicMemoryViewer';\r\nimport { ContextualMemoryViewer } from '@/components/ContextualMemoryViewer';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function MemoryDashboardPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sessões\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sessões\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sessão por padrão\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: unknown) {\r\n      console.error('Erro ao carregar sessões:', err);\r\n      setError(err.message || 'Erro ao carregar sessões');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sessões ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, [\u0001, loadSessions]);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Dashboard de Memória IA</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Visualize e gerencie todos os tipos de memória da IA em um só lugar\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas memórias\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <Tabs defaultValue=\"contextual\" className=\"w-full\">\r\n            <TabsList className=\"grid grid-cols-3 mb-8\">\r\n              <TabsTrigger value=\"contextual\" className=\"flex items-center\">\r\n                <Brain className=\"h-4 w-4 mr-2\" />\r\n                Contextual\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"semantic\" className=\"flex items-center\">\r\n                <BookOpen className=\"h-4 w-4 mr-2\" />\r\n                Semântica\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"episodic\" className=\"flex items-center\">\r\n                <Clock className=\"h-4 w-4 mr-2\" />\r\n                Episódica\r\n              </TabsTrigger>\r\n            </TabsList>\r\n            \r\n            <TabsContent value=\"contextual\">\r\n              <ContextualMemoryViewer \r\n                sessionId={selectedSessionId} \r\n                autoRefresh={false} \r\n              />\r\n            </TabsContent>\r\n            \r\n            <TabsContent value=\"semantic\">\r\n              <SemanticMemoryViewer \r\n                sessionId={selectedSessionId} \r\n              />\r\n            </TabsContent>\r\n            \r\n            <TabsContent value=\"episodic\">\r\n              <EpisodicMemoryViewer \r\n                sessionId={selectedSessionId} \r\n                autoRefresh={false} \r\n              />\r\n            </TabsContent>\r\n          </Tabs>\r\n        )}\r\n\r\n        <div className=\"text-center text-sm text-muted-foreground mt-8\">\r\n          <p>Sistema de Memória IA Otimizado</p>\r\n          <p>Versão 2.0</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\memory-viewer\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\AIProductPriceTag.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1434,1437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1434,1437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSubscription } from \"@/hooks/useSubscription\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\n\r\n// Define AIProduct interface locally to avoid mock dependency\r\ninterface AIProduct {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: string;\r\n  price: number;\r\n  currency: string;\r\n  features: string[];\r\n  image: string;\r\n  icon: string;\r\n  popular: boolean;\r\n  new: boolean;\r\n  rating: number;\r\n  reviews: number;\r\n}\r\n\r\ninterface AIProductPriceTagProps {\r\n  product: AIProduct;\r\n  showButton?: boolean;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n}\r\n\r\nconst AIProductPriceTag: React.FC<AIProductPriceTagProps> = ({\r\n  product,\r\n  showButton = true,\r\n  size = \"md\",\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const { subscription, getCurrentPlan } = useSubscription();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n  \r\n  const currentPlan = getCurrentPlan();\r\n  const hasAccess = currentPlan?.ai_products?.includes(product.id) || false;\r\n  \r\n  // Use Supabase plans if available\r\n  const availablePlans = supabasePlans || [];\r\n  \r\n  // Find the cheapest plan that includes this AI product\r\n  const cheapestPlan = availablePlans\r\n    .filter(plan => plan.billing_period === \"monthly\" && (plan as any).ai_products?.includes(product.id))\r\n    .sort((a, b) => a.price - b.price)[0];\r\n    \r\n  // Plans are automatically loaded by React Query\r\n  \r\n  const handleClick = () => {\r\n    if (hasAccess) {\r\n      navigate(`/knowledge?aiProduct=${product.id}`);\r\n    } else {\r\n      navigate(\"/pricing\");\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className={`flex ${size === \"sm\" ? \"flex-col items-start gap-1\" : \"items-center justify-between\"}`}>\r\n      <div className=\"flex items-center gap-2\">\r\n        {hasAccess ? (\r\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\">\r\n            Incluída no seu plano\r\n          </Badge>\r\n        ) : (\r\n          <div className=\"flex items-center gap-1\">\r\n            <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\">\r\n              A partir de R$ {cheapestPlan?.price.toFixed(2) || \"99.90\"}/mês\r\n            </Badge>\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              Plano {cheapestPlan?.name || \"Básico\"}\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {showButton && (\r\n        <Button \r\n          onClick={handleClick}\r\n          className={size === \"sm\" ? \"mt-2\" : \"\"}\r\n          variant={hasAccess ? \"default\" : \"outline\"}\r\n          size={size === \"sm\" ? \"sm\" : \"default\"}\r\n        >\r\n          {hasAccess ? \"Acessar\" : \"Ver Planos\"}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIProductPriceTag;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\AppLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ContextualMemoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\DeleteEventDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\DiagnosticPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":168,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useThemeSettings } from \"@/context/ThemeSettingsContext\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle, \r\n  Info, \r\n  RefreshCw,\r\n  Bug,\r\n  Database,\r\n  User,\r\n  Settings,\r\n  Navigation\r\n} from \"lucide-react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\n\r\ninterface DiagnosticResult {\r\n  category: string;\r\n  test: string;\r\n  status: 'success' | 'error' | 'warning' | 'info';\r\n  message: string;\r\n  details?: unknown;\r\n}\r\n\r\nconst DiagnosticPanel: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { user, session, userProfile, isLoading: authLoading, isAdmin } = useAuth();\r\n  const { settings } = useThemeSettings();\r\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [supabaseStatus, setSupabaseStatus] = useState<unknown>(null);\r\n\r\n  const runDiagnostics = async () => {\r\n    setIsRunning(true);\r\n    const results: DiagnosticResult[] = [];\r\n\r\n    // Test 1: Authentication Status\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'User Authentication',\r\n      status: user ? 'success' : 'error',\r\n      message: user ? 'Usuário autenticado' : 'Usuário não autenticado',\r\n      details: { user: user?.email, isAdmin, authLoading }\r\n    });\r\n\r\n    // Test 2: Session Status\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'Session Status',\r\n      status: session ? 'success' : 'warning',\r\n      message: session ? 'Sessão ativa' : 'Sem sessão ativa',\r\n      details: { sessionExists: !!session }\r\n    });\r\n\r\n    // Test 3: User Profile\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'User Profile',\r\n      status: userProfile ? 'success' : 'warning',\r\n      message: userProfile ? 'Perfil carregado' : 'Perfil não carregado',\r\n      details: userProfile\r\n    });\r\n\r\n    // Test 4: Theme Settings\r\n    results.push({\r\n      category: 'Theme',\r\n      test: 'Theme Configuration',\r\n      status: settings ? 'success' : 'error',\r\n      message: settings ? 'Configurações de tema carregadas' : 'Erro nas configurações de tema',\r\n      details: settings\r\n    });\r\n\r\n    // Test 5: Current Route\r\n    results.push({\r\n      category: 'Navigation',\r\n      test: 'Current Route',\r\n      status: 'info',\r\n      message: `Rota atual: ${location.pathname}`,\r\n      details: { pathname: location.pathname, search: location.search, hash: location.hash }\r\n    });\r\n\r\n    // Test 6: Supabase Connection - Fixed to use correct table name\r\n    try {\r\n      const { data, error } = await supabase.from('contacts').select('count', { count: 'exact', head: true });\r\n      results.push({\r\n        category: 'Database',\r\n        test: 'Supabase Connection',\r\n        status: error ? 'error' : 'success',\r\n        message: error ? `Erro de conexão: ${error.message}` : 'Conexão com Supabase OK',\r\n        details: { error, count: data }\r\n      });\r\n      setSupabaseStatus({ connected: !error, error });\r\n    } catch (err) {\r\n      results.push({\r\n        category: 'Database',\r\n        test: 'Supabase Connection',\r\n        status: 'error',\r\n        message: `Erro de conexão: ${err}`,\r\n        details: { error: err }\r\n      });\r\n      setSupabaseStatus({ connected: false, error: err });\r\n    }\r\n\r\n    // Test 7: Environment Variables\r\n    const envVars = {\r\n      VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,\r\n      VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '***HIDDEN***' : undefined,\r\n      VITE_ENV: import.meta.env.VITE_ENV\r\n    };\r\n    \r\n    results.push({\r\n      category: 'Environment',\r\n      test: 'Environment Variables',\r\n      status: envVars.VITE_SUPABASE_URL && envVars.VITE_SUPABASE_ANON_KEY ? 'success' : 'error',\r\n      message: envVars.VITE_SUPABASE_URL && envVars.VITE_SUPABASE_ANON_KEY ? 'Variáveis de ambiente OK' : 'Variáveis de ambiente faltando',\r\n      details: envVars\r\n    });\r\n\r\n    // Test 8: Local Storage\r\n    const mockAuthData = localStorage.getItem('mockAuthData');\r\n    results.push({\r\n      category: 'Storage',\r\n      test: 'Local Storage',\r\n      status: mockAuthData ? 'info' : 'warning',\r\n      message: mockAuthData ? 'Dados de auth mock encontrados' : 'Sem dados de auth mock',\r\n      details: { hasMockAuth: !!mockAuthData }\r\n    });\r\n\r\n    setDiagnostics(results);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const testNavigation = (path: string) => {\r\n    try {\r\n      navigate(path);\r\n    } catch (error) {\r\n      console.error('Erro na navegação:', error);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'success': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'error': return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'warning': return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      default: return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'success': return 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800';\r\n      case 'error': return 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800';\r\n      case 'warning': return 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800';\r\n      default: return 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    runDiagnostics();\r\n  }, [\u0001, runDiagnostics]);\r\n\r\n  const groupedDiagnostics = diagnostics.reduce((acc, diagnostic) => {\r\n    if (!acc[diagnostic.category]) {\r\n      acc[diagnostic.category] = [];\r\n    }\r\n    acc[diagnostic.category].push(diagnostic);\r\n    return acc;\r\n  }, {} as Record<string, DiagnosticResult[]>);\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Bug className=\"h-5 w-5\" />\r\n          Painel de Diagnóstico - Comunicação entre Páginas\r\n        </CardTitle>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge variant=\"outline\">Rota: {location.pathname}</Badge>\r\n          <Badge variant={user ? 'default' : 'destructive'}>\r\n            {user ? 'Autenticado' : 'Não autenticado'}\r\n          </Badge>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"diagnostics\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"diagnostics\">Diagnósticos</TabsTrigger>\r\n            <TabsTrigger value=\"navigation\">Navegação</TabsTrigger>\r\n            <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"diagnostics\" className=\"space-y-4\">\r\n            <div className=\"flex gap-2 mb-4\">\r\n              <Button \r\n                onClick={runDiagnostics} \r\n                disabled={isRunning}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                {isRunning ? (\r\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n                ) : (\r\n                  <RefreshCw className=\"h-4 w-4\" />\r\n                )}\r\n                {isRunning ? 'Executando...' : 'Executar Diagnósticos'}\r\n              </Button>\r\n            </div>\r\n\r\n            {Object.entries(groupedDiagnostics).map(([category, tests]) => (\r\n              <div key={category} className=\"space-y-2\">\r\n                <h3 className=\"font-semibold flex items-center gap-2\">\r\n                  {category === 'Auth' && <User className=\"h-4 w-4\" />}\r\n                  {category === 'Database' && <Database className=\"h-4 w-4\" />}\r\n                  {category === 'Navigation' && <Navigation className=\"h-4 w-4\" />}\r\n                  {category === 'Theme' && <Settings className=\"h-4 w-4\" />}\r\n                  {category}\r\n                </h3>\r\n                {tests.map((test, index) => (\r\n                  <div \r\n                    key={index}\r\n                    className={`p-3 rounded border ${getStatusColor(test.status)}`}\r\n                  >\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      {getStatusIcon(test.status)}\r\n                      <span className=\"font-medium\">{test.test}</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{test.message}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"navigation\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\r\n              {[\r\n                { path: '/dashboard', name: 'Dashboard' },\r\n                { path: '/metrics', name: 'Métricas' },\r\n                { path: '/chats', name: 'Chats' },\r\n                { path: '/knowledge', name: 'Conhecimento' },\r\n                { path: '/clients', name: 'Clientes' },\r\n                { path: '/evolution', name: 'Evolução' },\r\n                { path: '/schedule', name: 'Agenda' },\r\n                { path: '/admin', name: 'Admin' },\r\n                { path: '/subscription', name: 'Assinatura' },\r\n              ].map((route) => (\r\n                <Button\r\n                  key={route.path}\r\n                  variant={location.pathname === route.path ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => testNavigation(route.path)}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {route.name}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"details\" className=\"space-y-4\">\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Estado da Autenticação</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify({ user: user?.email, isAdmin, authLoading, hasSession: !!session }, null, 2)}\r\n                </pre>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Configurações de Tema</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify(settings, null, 2)}\r\n                </pre>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Status do Supabase</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify(supabaseStatus, null, 2)}\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DiagnosticPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\EpisodicMemoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\EventFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ForgotPasswordForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\MemoryNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\NavigationTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\PageTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\PauseDurationDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\SemanticMemoryViewer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":52,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Brain, Search, RefreshCw } from 'lucide-react';\r\n\r\ninterface SemanticEntity {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  confidence: number;\r\n  relationships: string[];\r\n}\r\n\r\ninterface SemanticMemoryViewerProps {\r\n  sessionId?: string;\r\n}\r\n\r\nexport function SemanticMemoryViewer({ sessionId }: SemanticMemoryViewerProps) {\r\n  const [entities, setEntities] = useState<SemanticEntity[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const mockEntities: SemanticEntity[] = [\r\n    {\r\n      id: '1',\r\n      name: 'Cliente João Silva',\r\n      type: 'PERSON',\r\n      confidence: 0.95,\r\n      relationships: ['empresa_abc', 'projeto_x'],\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Empresa ABC',\r\n      type: 'ORGANIZATION',\r\n      confidence: 0.88,\r\n      relationships: ['cliente_joao', 'contrato_123'],\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Projeto X',\r\n      type: 'PROJECT',\r\n      confidence: 0.92,\r\n      relationships: ['cliente_joao', 'deadline_31'],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadEntities();\r\n  }, [\u0001, loadEntities]);\r\n\r\n  const loadEntities = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simular carregamento\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setEntities(mockEntities);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar entidades:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredEntities = entities.filter(entity =>\r\n    entity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    entity.type.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const getTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'PERSON':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'ORGANIZATION':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'PROJECT':\r\n        return 'bg-purple-100 text-purple-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Brain className=\"h-5 w-5 text-primary\" />\r\n              Memória Semântica\r\n            </CardTitle>\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={loadEntities}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center gap-2 mb-4\">\r\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder=\"Buscar entidades...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"flex-1\"\r\n            />\r\n          </div>\r\n\r\n          <ScrollArea className=\"h-96\">\r\n            <div className=\"space-y-4\">\r\n              {filteredEntities.map((entity) => (\r\n                <Card key={entity.id} className=\"p-4\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <h3 className=\"font-medium\">{entity.name}</h3>\r\n                        <Badge className={getTypeColor(entity.type)}>\r\n                          {entity.type}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        Confiança: {(entity.confidence * 100).toFixed(1)}%\r\n                      </div>\r\n                      {entity.relationships.length > 0 && (\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"text-xs font-medium text-muted-foreground\">\r\n                            Relacionamentos:\r\n                          </div>\r\n                          <div className=\"flex flex-wrap gap-1\">\r\n                            {entity.relationships.map((rel, index) => (\r\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\r\n                                {rel}\r\n                              </Badge>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n\r\n              {filteredEntities.length === 0 && !loading && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  {searchTerm \r\n                    ? 'Nenhuma entidade encontrada para a busca.'\r\n                    : 'Nenhuma entidade semântica disponível.'\r\n                  }\r\n                </div>\r\n              )}\r\n\r\n              {loading && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  Carregando entidades...\r\n                </div>\r\n              )}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\SignupForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AIAccessTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AdminHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AdminStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\PermissionsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\UserDialogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\UserManagementTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AgendaBookingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AgendaTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AvailabilityCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\TimeSlotSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarDay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarLegend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\EventSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatAreaOptimized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatConversationHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatHeader.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":46,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { ShipWheel, LogOut, ArrowLeft, Filter, Search } from \"lucide-react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useThemeSettings } from \"@/context/ThemeSettingsContext\";\r\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\r\nimport { useAdvancedSearch, SearchResult } from \"@/hooks/useAdvancedSearch\";\r\nimport SearchModeSelector from \"./SearchModeSelector\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { useDebouncedCallback } from \"@/hooks/useDebouncedCallback\";\r\n\r\ninterface ChatHeaderProps {\r\n  signOut: () => void;\r\n  searchTerm: string;\r\n  onSearchChange: (value: string) => void;\r\n  onOpenFilters: () => void;\r\n  hasActiveFilters: boolean;\r\n  onSearchResultClick?: (result: SearchResult) => void;\r\n}\r\n\r\nconst ChatHeader = ({ \r\n  signOut, \r\n  searchTerm, \r\n  onSearchChange, \r\n  onOpenFilters, \r\n  hasActiveFilters,\r\n  onSearchResultClick\r\n}: ChatHeaderProps) => {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { settings } = useThemeSettings();\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n  \r\n  const advancedSearch = useAdvancedSearch();\r\n\r\n  const handleBackToDashboard = () => {\r\n    navigate(\"/dashboard\");\r\n  };\r\n\r\n  // Sincronizar com o search term do header\r\n  useEffect(() => {\r\n    advancedSearch.setSearchTerm(searchTerm);\r\n  }, [\u0001, advancedSearch]);\r\n\r\n  // Realizar busca com debounce\r\n  const debouncedSearch = useDebouncedCallback(() => {\r\n    if (searchTerm.trim()) {\r\n      advancedSearch.performSearch();\r\n      setShowSearchResults(true);\r\n    } else {\r\n      setShowSearchResults(false);\r\n    }\r\n  }, 300);\r\n\r\n  useEffect(() => {\r\n    debouncedSearch();\r\n  }, [searchTerm, advancedSearch.searchMode, debouncedSearch]);\r\n\r\n  const handleSearchChange = (value: string) => {\r\n    onSearchChange(value);\r\n    if (!value.trim()) {\r\n      setShowSearchResults(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchResultClick = (result: SearchResult) => {\r\n    setShowSearchResults(false);\r\n    if (onSearchResultClick) {\r\n      onSearchResultClick(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"text-white shadow-md transition-colors duration-300 rounded-b-xl\"\r\n      style={{ backgroundColor: settings.primaryColor }}\r\n    >\r\n      <div className=\"flex flex-row items-center justify-between min-h-[64px] w-full px-6 py-0\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={handleBackToDashboard}\r\n            className=\"text-white hover:bg-white/20 focus-visible:ring-white\"\r\n          >\r\n            <ArrowLeft className=\"h-5 w-5\" />\r\n          </Button>\r\n          {settings.logo ? (\r\n            <img\r\n              src={settings.logo}\r\n              alt=\"Logo\"\r\n              className=\"h-8 w-8 object-contain\"\r\n            />\r\n          ) : (\r\n            <ShipWheel\r\n              className=\"h-8 w-8\"\r\n              style={{ color: settings.secondaryColor }}\r\n            />\r\n          )}\r\n          <h1 className=\"text-2xl font-bold\">{settings.brandName}</h1>\r\n          <span className=\"text-lg ml-2\">Conversas</span>\r\n        </div>\r\n        \r\n        {/* Search and Filter Controls */}\r\n        <div className=\"flex items-center gap-3 flex-1 max-w-md mx-6\">\r\n          <SearchModeSelector \r\n            searchMode={advancedSearch.searchMode}\r\n            onSearchModeChange={advancedSearch.setSearchMode}\r\n          />\r\n          <div className=\"relative flex-1\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white/60\" />\r\n            <Input\r\n              placeholder={`Buscar ${\r\n                advancedSearch.searchMode === \"conversations\" ? \"conversas\" :\r\n                advancedSearch.searchMode === \"notes\" ? \"anotações\" : \"conversas e anotações\"\r\n              }...`}\r\n              value={searchTerm}\r\n              onChange={(e) => handleSearchChange(e.target.value)}\r\n              className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-white/40\"\r\n            />\r\n            {showSearchResults && (\r\n              <SearchResults\r\n                results={advancedSearch.searchResults}\r\n                isSearching={advancedSearch.isSearching}\r\n                onResultClick={handleSearchResultClick}\r\n              />\r\n            )}\r\n          </div>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={onOpenFilters}\r\n            className={`border-white/20 text-white bg-transparent hover:bg-white/20 ${\r\n              hasActiveFilters ? 'bg-white/20 border-white' : ''\r\n            }`}\r\n          >\r\n            <Filter className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-3\">\r\n          <Badge\r\n            variant=\"outline\"\r\n            className=\"bg-white/10 text-white border-0 px-3 py-1\"\r\n          >\r\n            {user?.user_metadata?.name || user?.email}\r\n          </Badge>\r\n          <ThemeToggle />\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={signOut}\r\n            className=\"border-white text-white bg-transparent hover:bg-white/20\"\r\n            style={{ height: 40, borderRadius: 8, borderWidth: 1.4 }}\r\n          >\r\n            <LogOut className=\"mr-2 h-4 w-4\" />\r\n            Sair\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default ChatHeader;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ClientHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ClientInfoPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Conversation } from \"@/types/chat\";\r\nimport { useDynamicFields } from \"@/hooks/useDynamicFields\";\r\nimport { useContactsQuery } from \"@/hooks/useContactsQuery\";\r\nimport { useClientDataFetch } from \"@/hooks/useClientDataFetch\";\r\nimport TagsField from \"./TagsField\";\r\nimport NotesField from \"./NotesField\";\r\nimport ClientInfo from \"@/components/clients/ClientInfo\";\r\nimport ClientHeader from \"./ClientHeader\";\r\nimport EmptyClientState from \"./EmptyClientState\";\r\nimport LoadingClientState from \"./LoadingClientState\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\ninterface ClientInfoPanelProps {\r\n  selectedChat: string | null;\r\n  selectedConversation: Conversation | undefined;\r\n}\r\n\r\nconst ClientInfoPanel = ({\r\n  selectedChat,\r\n  selectedConversation,\r\n}: ClientInfoPanelProps) => {\r\n  const { data: contacts = [] } = useContactsQuery();\r\n  \r\n  // Custom hook for client data fetching\r\n  const { clientData, loading } = useClientDataFetch(selectedConversation, contacts);\r\n\r\n  // Use the enhanced dynamic fields hook with validation\r\n  const {\r\n    dynamicFields,\r\n    loading: dynamicFieldsLoading,\r\n    updateField,\r\n    validationErrors,\r\n  } = useDynamicFields(selectedConversation?.sessionId || null);\r\n\r\n\r\n\r\n  const handleFieldUpdate = (fieldId: string, newValue: any) => {\r\n    updateField(fieldId, newValue);\r\n    console.log(`Field ${fieldId} updated with value:`, newValue);\r\n\r\n    // Show validation error if exists\r\n    if (validationErrors[fieldId]) {\r\n      console.warn(\r\n        `Validation error for field ${fieldId}:`,\r\n        validationErrors[fieldId],\r\n      );\r\n    }\r\n  };\r\n\r\n  if (!selectedChat) {\r\n    return (\r\n      <EmptyClientState\r\n        message=\"Informações do Cliente\"\r\n        subtitle=\"Selecione uma conversa para ver as informações do cliente\"\r\n      />\r\n    );\r\n  }\r\n\r\n  if (loading || dynamicFieldsLoading) {\r\n    return <LoadingClientState />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      <ClientHeader clientData={clientData} selectedConversation={selectedConversation} />\r\n\r\n      <ScrollArea className=\"flex-1\">\r\n        <div className=\"p-4 space-y-6\">\r\n          {/* Tags Field */}\r\n          <TagsField selectedChat={selectedChat} />\r\n\r\n          {/* Painel de Informações */}\r\n          <ClientInfo\r\n            clientData={clientData}\r\n            dynamicFields={{\r\n              basic: dynamicFields.basic,\r\n              commercial: dynamicFields.commercial,\r\n              personalized: dynamicFields.personalized,\r\n              documents: dynamicFields.documents,\r\n            }}\r\n            onFieldUpdate={handleFieldUpdate}\r\n            context=\"chat\"\r\n          />\r\n\r\n          {/* Notes Field */}\r\n          <div className=\"mt-2\">\r\n            <NotesField selectedChat={selectedChat} />\r\n          </div>\r\n\r\n          {/* Display validation errors if any */}\r\n          <ValidationErrors validationErrors={validationErrors} />\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientInfoPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationFilterDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationQuickFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\EmptyClientState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\LoadingClientState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageItemOptimized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\NoSelectedChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\NotesField.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":32,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Plus, X } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\n\r\ninterface Note {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n}\r\n\r\ninterface NotesFieldProps {\r\n  selectedChat: string | null;\r\n}\r\n\r\nconst NotesField = ({ selectedChat }: NotesFieldProps) => {\r\n  const [notes, setNotes] = useState<Note[]>([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  // Carregar notas do banco de dados\r\n  useEffect(() => {\r\n    if (selectedChat) {\r\n      loadNotes();\r\n    }\r\n  }, [\u0001, loadNotes]);\r\n\r\n  const loadNotes = async () => {\r\n    if (!selectedChat) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // Primeiro buscar o session_id pela conversa\r\n      const { data: conversationData, error: conversationError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"session_id\")\r\n        .eq(\"id\", selectedChat)\r\n        .single();\r\n\r\n      if (conversationError && conversationError.code !== \"PGRST116\") {\r\n        throw conversationError;\r\n      }\r\n\r\n      if (conversationData?.session_id) {\r\n        // Buscar as notas na tabela contacts\r\n        const { data: contactData, error: contactError } = await supabase\r\n          .from(\"contacts\")\r\n          .select(\"notes\")\r\n          .eq(\"session_id\", conversationData.session_id)\r\n          .single();\r\n\r\n        if (contactError && contactError.code !== \"PGRST116\") {\r\n          throw contactError;\r\n        }\r\n\r\n        if (contactData?.notes) {\r\n          try {\r\n            // Se as notas já estão em JSON, parsear\r\n            const parsedNotes = typeof contactData.notes === \"string\" \r\n              ? JSON.parse(contactData.notes) \r\n              : contactData.notes;\r\n            \r\n            setNotes(Array.isArray(parsedNotes) ? parsedNotes : []);\r\n          } catch (parseError) {\r\n            console.error(\"Error parsing notes:\", parseError);\r\n            // Se não conseguir parsear, tratar como string simples\r\n            setNotes([{\r\n              id: Date.now().toString(),\r\n              content: contactData.notes,\r\n              timestamp: new Date().toLocaleString(\"pt-BR\"),\r\n            }]);\r\n          }\r\n        } else {\r\n          setNotes([]);\r\n        }\r\n      } else {\r\n        setNotes([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading notes:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar anotações\",\r\n        description: \"Não foi possível carregar as anotações.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveNotes = async (updatedNotes: Note[]) => {\r\n    if (!selectedChat) return;\r\n    \r\n    setSaving(true);\r\n    try {\r\n      // Primeiro buscar o session_id pela conversa\r\n      const { data: conversationData, error: conversationError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"session_id\")\r\n        .eq(\"id\", selectedChat)\r\n        .single();\r\n\r\n      if (conversationError) {\r\n        throw conversationError;\r\n      }\r\n\r\n      if (conversationData?.session_id) {\r\n        // Salvar na tabela contacts\r\n        const { error } = await supabase\r\n          .from(\"contacts\")\r\n          .update({ notes: JSON.stringify(updatedNotes) })\r\n          .eq(\"session_id\", conversationData.session_id);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving notes:\", error);\r\n      toast({\r\n        title: \"Erro ao salvar anotações\",\r\n        description: \"Não foi possível salvar as anotações.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const addNote = async () => {\r\n    if (!newNote.trim()) return;\r\n\r\n    const note: Note = {\r\n      id: Date.now().toString(),\r\n      content: newNote.trim(),\r\n      timestamp: new Date().toLocaleString(\"pt-BR\"),\r\n    };\r\n\r\n    const updatedNotes = [note, ...notes];\r\n    setNotes(updatedNotes);\r\n    setNewNote(\"\");\r\n    \r\n    await saveNotes(updatedNotes);\r\n  };\r\n\r\n  const removeNote = async (noteId: string) => {\r\n    const updatedNotes = notes.filter((note) => note.id !== noteId);\r\n    setNotes(updatedNotes);\r\n    \r\n    await saveNotes(updatedNotes);\r\n  };\r\n\r\n  if (!selectedChat) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 mb-3\">\r\n        Anotações\r\n      </h3>\r\n\r\n      {/* Add new note */}\r\n      <div className=\"mb-4\">\r\n        <Textarea\r\n          placeholder=\"Adicionar nova anotação...\"\r\n          value={newNote}\r\n          onChange={(e) => setNewNote(e.target.value)}\r\n          className=\"min-h-[80px] mb-2\"\r\n        />\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={addNote}\r\n          className=\"w-full\"\r\n          disabled={saving || !newNote.trim()}\r\n        >\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          {saving ? \"Salvando...\" : \"Adicionar Anotação\"}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Notes list */}\r\n      <ScrollArea className=\"h-64\">\r\n        <div className=\"space-y-3\">\r\n          {notes.map((note) => (\r\n            <div\r\n              key={note.id}\r\n              className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-gray-50 dark:bg-gray-800\"\r\n            >\r\n              <div className=\"flex justify-between items-start mb-2\">\r\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                  {note.timestamp}\r\n                </span>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"xs\"\r\n                  onClick={() => removeNote(note.id)}\r\n                  className=\"h-6 w-6 p-0 text-gray-400 hover:text-red-500\"\r\n                >\r\n                  <X className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n              <p className=\"text-sm whitespace-pre-wrap break-words\">\r\n                {note.content}\r\n              </p>\r\n            </div>\r\n          ))}\r\n\r\n          {notes.length === 0 && (\r\n            <p className=\"text-center text-sm text-gray-500 dark:text-gray-400 py-8\">\r\n              Nenhuma anotação ainda\r\n            </p>\r\n          )}\r\n        </div>\r\n      </ScrollArea>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NotesField;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\SearchModeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\SearchResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\TagsField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ValidationErrors.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\AddClientDialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":72,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogTrigger,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n} from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { UserPlus } from \"lucide-react\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { useCustomFields } from \"@/hooks/useCustomFields\";\r\nimport { useAddClientFormLogic } from \"@/hooks/useAddClientFormLogic\";\r\nimport { DynamicCategory } from \"./DynamicCategoryManager\";\r\nimport TagsManager from \"./TagsManager\";\r\nimport ConsultationStageSelector from \"./ConsultationStageSelector\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport ValidationErrorAlert from \"./ValidationErrorAlert\";\r\nimport BasicInfoFields from \"./BasicInfoFields\";\r\nimport CompanyInfoFields from \"./CompanyInfoFields\";\r\nimport DialogTabsContent from \"./DialogTabsContent\";\r\n\r\ninterface AddClientDialogProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  newContact: Partial<Contact>;\r\n  setNewContact: (contact: Partial<Contact>) => void;\r\n  handleAddContact: () => Promise<string | undefined>;\r\n}\r\n\r\nconst AddClientDialog = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  newContact,\r\n  setNewContact,\r\n  handleAddContact,\r\n}: AddClientDialogProps) => {\r\n  const { customFields, fetchCustomFields, saveClientCustomValues } = useCustomFields();\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  // Use custom hook for form logic\r\n  const {\r\n    validationErrors,\r\n    activeTab,\r\n    setActiveTab,\r\n    customValues,\r\n    handleInputChange: baseHandleInputChange,\r\n    validateForm,\r\n    resetForm,\r\n    handleCustomFieldChange,\r\n  } = useAddClientFormLogic();\r\n\r\n  // State for dynamic categories per tab\r\n  const [basicCategories, setBasicCategories] = useState<DynamicCategory[]>([]);\r\n  const [commercialCategories, setCommercialCategories] = useState<DynamicCategory[]>([]);\r\n  const [documentsCategories, setDocumentsCategories] = useState<DynamicCategory[]>([]);\r\n\r\n  // Wrapper for input change to pass required parameters\r\n  const handleInputChange = (field: keyof Contact, value: any) => {\r\n    baseHandleInputChange(field, value, newContact, setNewContact);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      loadCustomFields();\r\n      console.log(\"AddClientDialog opened, loading custom fields\");\r\n    }\r\n  }, [\u0001, loadCustomFields]);\r\n\r\n  const loadCustomFields = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await fetchCustomFields();\r\n      console.log(\"Custom fields loaded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error loading custom fields:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!validateForm(newContact)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get newly created contact ID\r\n      const newContactId = await handleAddContact();\r\n\r\n      // Save custom field values if we have them and a contact ID\r\n      if (newContactId && Object.keys(customValues).length > 0) {\r\n        try {\r\n          const customValuesArray = Object.entries(customValues).map(\r\n            ([fieldId, value]) => ({ fieldId, value })\r\n          );\r\n          await saveClientCustomValues(newContactId, customValuesArray);\r\n        } catch (customFieldError) {\r\n          console.error(\"Error saving custom fields:\", customFieldError);\r\n        }\r\n      }\r\n\r\n      // Reset form and categories\r\n      resetForm();\r\n      setBasicCategories([]);\r\n      setCommercialCategories([]);\r\n      setDocumentsCategories([]);\r\n\r\n      toast({\r\n        title: \"Cliente adicionado\",\r\n        description: \"Cliente foi adicionado com sucesso ao sistema.\",\r\n      });\r\n\r\n      onOpenChange(false);\r\n    } catch (error) {\r\n      console.error(\"Error saving client:\", error);\r\n      toast({\r\n        title: \"Erro ao salvar\",\r\n        description: \"Não foi possível salvar o cliente. Tente novamente.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  console.log(\r\n    \"AddClientDialog render - isOpen:\",\r\n    isOpen,\r\n    \"activeTab:\",\r\n    activeTab,\r\n  );\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\r\n      <DialogTrigger asChild>\r\n        <Button className=\"h-9 bg-green-500 hover:bg-green-600 text-white\">\r\n          <UserPlus className=\"mr-2 h-4 w-4\" />\r\n          Novo Cliente\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"text-lg flex items-center gap-2\">\r\n            <UserPlus className=\"h-5 w-5 text-green-500\" />\r\n            Adicionar Novo Cliente Náutico\r\n          </DialogTitle>\r\n          <DialogDescription className=\"text-gray-600 dark:text-gray-300\">\r\n            Preencha as informações para adicionar um novo cliente náutico ao\r\n            seu CRM.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <ValidationErrorAlert errors={validationErrors} />\r\n\r\n        {/* Tags Section */}\r\n        <div className=\"mb-4\">\r\n          <Label className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">\r\n            ADICIONAR TAGS\r\n          </Label>\r\n          <TagsManager\r\n            tags={newContact.tags || []}\r\n            onChange={(tags) => handleInputChange(\"tags\", tags)}\r\n          />\r\n        </div>\r\n\r\n        {/* Consultation Stage Section */}\r\n        <div className=\"mb-6\">\r\n          <ConsultationStageSelector\r\n            value={newContact.consultationStage || \"Nova consulta\"}\r\n            onChange={(stage) => handleInputChange(\"consultationStage\", stage)}\r\n          />\r\n        </div>\r\n\r\n        <Tabs defaultValue=\"principal\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger\r\n              value=\"principal\"\r\n              onClick={() => setActiveTab(\"basico\")}\r\n            >\r\n              Principal\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"utm\">UTM</TabsTrigger>\r\n            <TabsTrigger value=\"midia\">Mídia</TabsTrigger>\r\n            <TabsTrigger value=\"produtos\">Produtos</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"principal\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-6\">\r\n              <BasicInfoFields \r\n                newContact={newContact}\r\n                validationErrors={validationErrors}\r\n                onInputChange={handleInputChange}\r\n              />\r\n              <CompanyInfoFields \r\n                newContact={newContact}\r\n                validationErrors={validationErrors}\r\n                onInputChange={handleInputChange}\r\n              />\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <DialogTabsContent newContact={newContact} />\r\n        </Tabs>\r\n\r\n        <DialogFooter className=\"mt-6\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mr-auto\">\r\n            * Campos obrigatórios\r\n          </div>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            onClick={() => onOpenChange(false)}\r\n          >\r\n            Cancelar\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={handleSave}\r\n            className=\"bg-green-500 hover:bg-green-600 text-white\"\r\n          >\r\n            Adicionar Cliente\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddClientDialog;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\BasicInfoFields.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[385,388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[385,388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface BasicInfoFieldsProps {\r\n  newContact: Partial<Contact>;\r\n  validationErrors: { [key: string]: string };\r\n  onInputChange: (field: keyof Contact, value: any) => void;\r\n}\r\n\r\nconst BasicInfoFields = React.memo(({ newContact, validationErrors, onInputChange }: BasicInfoFieldsProps) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <Label htmlFor=\"name\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Nome Completo *\r\n        </Label>\r\n        <Input\r\n          id=\"name\"\r\n          value={newContact.name || \"\"}\r\n          onChange={(e) => onInputChange(\"name\", e.target.value)}\r\n          placeholder=\"Digite o nome completo\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.name ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.name && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.name}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"email\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Email\r\n        </Label>\r\n        <Input\r\n          id=\"email\"\r\n          type=\"email\"\r\n          value={newContact.email || \"\"}\r\n          onChange={(e) => onInputChange(\"email\", e.target.value)}\r\n          placeholder=\"email@exemplo.com\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.email ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.email && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.email}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"phone\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Telefone *\r\n        </Label>\r\n        <Input\r\n          id=\"phone\"\r\n          value={newContact.phone || \"\"}\r\n          onChange={(e) => onInputChange(\"phone\", e.target.value)}\r\n          placeholder=\"(00) 00000-0000\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.phone ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.phone && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.phone}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"address\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Endereço\r\n        </Label>\r\n        <Input\r\n          id=\"address\"\r\n          value={newContact.address || \"\"}\r\n          onChange={(e) => onInputChange(\"address\", e.target.value)}\r\n          placeholder=\"Rua, número, bairro, cidade, estado\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"responsible-user\">Usuário responsável</Label>\r\n        <Input\r\n          id=\"responsible-user\"\r\n          value={newContact.responsibleUser || \"\"}\r\n          onChange={(e) => onInputChange(\"responsibleUser\", e.target.value)}\r\n          placeholder=\"Gabriel Calebe\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"notes\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Observações\r\n        </Label>\r\n        <Textarea\r\n          id=\"notes\"\r\n          value={newContact.notes || \"\"}\r\n          onChange={(e) => onInputChange(\"notes\", e.target.value)}\r\n          placeholder=\"Observações sobre o cliente\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 min-h-[80px]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nBasicInfoFields.displayName = 'BasicInfoFields';\r\n\r\nexport default BasicInfoFields;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[366,369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[366,369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport CustomFieldsTab from \"./CustomFieldsTab\";\r\nimport ClientFilesTab from \"./ClientFilesTab\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientActionsProps {\r\n  clientData: Contact | null;\r\n  customFields: unknown[];\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  readOnly: boolean;\r\n  section: \"custom\" | \"docs\";\r\n}\r\n\r\nconst ClientActions: React.FC<ClientActionsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  onFieldUpdate,\r\n  readOnly,\r\n  section,\r\n}) => {\r\n  if (section === \"custom\") {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <CustomFieldsTab\r\n          clientId={clientData?.id}\r\n          onFieldUpdate={onFieldUpdate}\r\n          readOnly={readOnly}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <ClientFilesTab\r\n        clientId={clientData?.id}\r\n        onFileUpdate={(files) => {\r\n          console.log('Arquivos atualizados:', files);\r\n        }}\r\n        readOnly={readOnly}\r\n      />\r\n      {customFields\r\n        .filter((field) => field.visibility_settings?.visible_in_tabs?.docs)\r\n        .map((field) => (\r\n          <div key={field.id}>\r\n            <CustomFieldRenderer\r\n              field={field}\r\n              value={clientData?.customValues?.[field.id]}\r\n              onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n            />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientActions;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientDetailSheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport EditableField from \"./EditableField\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientDetailsProps {\r\n  clientData: Contact | null;\r\n  customFields: unknown[];\r\n  clientTypeOptions: string[];\r\n  clientSizeOptions: string[];\r\n  fieldVisibility: Record<string, boolean>;\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange: (fieldId: string, visible: boolean) => void;\r\n  readOnly: boolean;\r\n}\r\n\r\nconst ClientDetails: React.FC<ClientDetailsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  clientTypeOptions,\r\n  clientSizeOptions,\r\n  fieldVisibility,\r\n  onFieldUpdate,\r\n  onVisibilityChange,\r\n  readOnly,\r\n}) => (\r\n  <div className=\"space-y-4\">\r\n    <EditableField\r\n      label=\"Nome\"\r\n      value={clientData?.name}\r\n      fieldId=\"name\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.name !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Email\"\r\n      value={clientData?.email}\r\n      fieldId=\"email\"\r\n      type=\"email\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.email !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Telefone\"\r\n      value={clientData?.phone}\r\n      fieldId=\"phone\"\r\n      type=\"tel\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.phone !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Nome do Cliente\"\r\n      value={clientData?.clientName}\r\n      fieldId=\"clientName\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientName !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Tipo de Cliente\"\r\n      value={clientData?.clientType}\r\n      fieldId=\"clientType\"\r\n      type=\"select\"\r\n      options={clientTypeOptions}\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientType !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Tamanho do Cliente\"\r\n      value={clientData?.clientSize}\r\n      fieldId=\"clientSize\"\r\n      type=\"select\"\r\n      options={clientSizeOptions}\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientSize !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"CPF/CNPJ\"\r\n      value={clientData?.cpfCnpj}\r\n      fieldId=\"cpfCnpj\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.cpfCnpj !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Endereço\"\r\n      value={clientData?.address}\r\n      fieldId=\"address\"\r\n      type=\"textarea\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.address !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    {customFields\r\n      .filter((field) => field.visibility_settings?.visible_in_tabs?.basic)\r\n      .map((field) => (\r\n        <CustomFieldRenderer\r\n          key={field.id}\r\n          field={field}\r\n          value={clientData?.customValues?.[field.id]}\r\n          onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n        />\r\n      ))}\r\n  </div>\r\n);\r\n\r\nexport default ClientDetails;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFilesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFilesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFormValidation.tsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":40,"column":31,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":32,"suggestions":[{"messageId":"removeEscape","fix":{"range":[957,958],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[957,957],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":40,"column":33,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":34,"suggestions":[{"messageId":"removeEscape","fix":{"range":[959,960],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[959,959],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":40,"column":37,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":38,"suggestions":[{"messageId":"removeEscape","fix":{"range":[963,964],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[963,963],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":68,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":68,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Contact } from \"@/types/client\";\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: { [key: string]: string };\n}\n\n// Funções auxiliares de validação para reduzir complexidade cognitiva\nconst validateRequiredFields = (\n  contact: Partial<Contact>,\n  errors: { [key: string]: string }\n): void => {\n  if (!contact.name?.trim()) {\n    errors.name = \"Nome é obrigatório\";\n  }\n\n  if (!contact.phone?.trim()) {\n    errors.phone = \"Telefone é obrigatório\";\n  }\n};\n\nconst validateEmail = (\n  email: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (email && email.trim()) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      errors.email = \"Email deve ter um formato válido\";\n    }\n  }\n};\n\nconst validatePhone = (\n  phone: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (phone && phone.trim()) {\n    const phoneRegex = /^[\\d\\s\\(\\)\\-\\+]+$/;\n    if (!phoneRegex.test(phone)) {\n      errors.phone = \"Telefone deve conter apenas números e caracteres válidos\";\n    }\n  }\n};\n\nconst validateCpfCnpj = (\n  cpfCnpj: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (cpfCnpj && cpfCnpj.trim()) {\n    const cleanCpfCnpj = cpfCnpj.replace(/\\D/g, \"\");\n    if (cleanCpfCnpj.length !== 11 && cleanCpfCnpj.length !== 14) {\n      errors.cpfCnpj = \"CPF deve ter 11 dígitos ou CNPJ deve ter 14 dígitos\";\n    }\n  }\n};\n\nconst validateBudget = (\n  budget: number | undefined | null,\n  errors: { [key: string]: string }\n): void => {\n  if (budget !== undefined && budget !== null && budget < 0) {\n    errors.budget = \"Orçamento não pode ser negativo\";\n  }\n};\n\nexport const validateClientForm = (\n  contact: Partial<Contact>,\n): ValidationResult => {\n  const errors: { [key: string]: string } = {};\n\n  // Aplicar validações separadas\n  validateRequiredFields(contact, errors);\n  validateEmail(contact.email, errors);\n  validatePhone(contact.phone, errors);\n  validateCpfCnpj(contact.cpfCnpj, errors);\n  validateBudget(contact.budget, errors);\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n};\n\ninterface ClientFormValidationProps {\n  errors: { [key: string]: string };\n  fieldName: string;\n  children: React.ReactNode;\n}\n\nconst ClientFormValidation: React.FC<ClientFormValidationProps> = ({\n  errors,\n  fieldName,\n  children,\n}) => {\n  const hasError = errors[fieldName];\n\n  return (\n    <div className=\"space-y-1\">\n      {children}\n      {hasError && (\n        <p className=\"text-sm text-red-600 font-medium\">{hasError}</p>\n      )}\n    </div>\n  );\n};\n\nexport default ClientFormValidation;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from \"react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Contact } from \"@/types/client\";\r\nimport UnifiedClientInfo from \"./UnifiedClientInfo\";\r\nimport { DynamicCategory } from \"./DynamicCategoryManager\";\r\n\r\ninterface ClientInfoProps {\r\n  clientData: Contact | null;\r\n  dynamicFields?: {\r\n    basic: DynamicCategory[];\r\n    commercial: DynamicCategory[];\r\n    personalized: DynamicCategory[];\r\n    documents: DynamicCategory[];\r\n  };\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  context: \"chat\" | \"table\" | \"details\" | \"edit\";\r\n  compact?: boolean;\r\n}\r\n\r\n/**\r\n * Componente para exibir informações do cliente em diferentes contextos\r\n * Este componente serve como um wrapper para o UnifiedClientInfo, configurando-o\r\n * de acordo com o contexto em que está sendo usado.\r\n */\r\nconst ClientInfo: React.FC<ClientInfoProps> = ({\r\n  clientData,\r\n  dynamicFields = {\r\n    basic: [],\r\n    commercial: [],\r\n    personalized: [],\r\n    documents: [],\r\n  },\r\n  onFieldUpdate,\r\n  context,\r\n  compact = false,\r\n}) => {\r\n  // Configurações específicas para cada contexto\r\n  const contextConfig = {\r\n    chat: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: true,\r\n      compact: true,\r\n      className: \"h-[500px] max-h-[500px]\"\r\n    },\r\n    table: {\r\n      showTabs: [\"basic\", \"commercial\"],\r\n      readOnly: true,\r\n      compact: true,\r\n      className: \"max-h-96\"\r\n    },\r\n    details: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: true,\r\n      compact: false,\r\n      className: \"min-h-[600px]\"\r\n    },\r\n    edit: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: false,\r\n      compact: false,\r\n      className: \"min-h-[600px]\"\r\n    },\r\n  };\r\n\r\n  const config = contextConfig[context];\r\n\r\n  return (\r\n    <Card className={`w-full overflow-hidden bg-background border-border ${config.className}`}>\r\n      <CardContent className=\"p-0 h-full bg-background\">\r\n        <UnifiedClientInfo\r\n          clientData={clientData}\r\n          dynamicFields={dynamicFields}\r\n          onFieldUpdate={onFieldUpdate}\r\n          readOnly={config.readOnly}\r\n          compact={compact || config.compact}\r\n          showTabs={config.showTabs}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ClientInfo;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientProductsTab.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":30,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useProducts } from \"@/hooks/useProducts\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { Product } from \"@/types/product\";\r\n\r\ninterface ClientProductsTabProps {\r\n  client: Contact;\r\n  onUpdate?: () => void;\r\n}\r\n\r\nconst ClientProductsTab: React.FC<ClientProductsTabProps> = ({ client, onUpdate }) => {\r\n  const { toast } = useToast();\r\n  const { fetchClientProducts, addProductToClient, removeProductFromClient } = useProducts();\r\n  const [clientProducts, setClientProducts] = useState<Product[]>([]);\r\n  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);\r\n  const [selectedProduct, setSelectedProduct] = useState<string>(\"\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  // Fetch client products and available products\r\n  useEffect(() => {\r\n    if (client?.id) {\r\n      loadClientProducts();\r\n    }\r\n  }, [\u0001, loadClientProducts]);\r\n\r\n  // Load client products - this function now returns different values based on the client\r\n  const loadClientProducts = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch products associated with this client\r\n      const { clientProducts, availableProducts } = await fetchClientProducts(client.id);\r\n      setClientProducts(clientProducts || []);\r\n      setAvailableProducts(availableProducts || []);\r\n    } catch (error) {\r\n      console.error(\"Error loading client products:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar os produtos do cliente.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add product to client\r\n  const handleAddProduct = async () => {\r\n    if (!selectedProduct) {\r\n      toast({\r\n        title: \"Selecione um produto\",\r\n        description: \"Por favor, selecione um produto para adicionar.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      await addProductToClient(client.id, selectedProduct);\r\n      toast({\r\n        title: \"Produto adicionado\",\r\n        description: \"Produto adicionado com sucesso ao cliente.\",\r\n      });\r\n      setSelectedProduct(\"\");\r\n      loadClientProducts();\r\n      if (onUpdate) onUpdate();\r\n    } catch (error) {\r\n      console.error(\"Error adding product to client:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível adicionar o produto ao cliente.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Remove product from client\r\n  const handleRemoveProduct = async (productId: string) => {\r\n    setIsLoading(true);\r\n    try {\r\n      await removeProductFromClient(client.id, productId);\r\n      toast({\r\n        title: \"Produto removido\",\r\n        description: \"Produto removido com sucesso do cliente.\",\r\n      });\r\n      loadClientProducts();\r\n      if (onUpdate) onUpdate();\r\n    } catch (error) {\r\n      console.error(\"Error removing product from client:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível remover o produto do cliente.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Calculate total value of client products - returns different values based on products\r\n  const calculateTotalValue = () => {\r\n    return clientProducts.reduce((total, product) => total + (product.price || 0), 0);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Produtos do Cliente</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {/* Add product form */}\r\n          <div className=\"flex items-end gap-2\">\r\n            <div className=\"flex-1\">\r\n              <Label htmlFor=\"product-select\">Adicionar Produto</Label>\r\n              <select\r\n                id=\"product-select\"\r\n                className=\"w-full p-2 border rounded-md\"\r\n                value={selectedProduct}\r\n                onChange={(e) => setSelectedProduct(e.target.value)}\r\n                disabled={isLoading}\r\n              >\r\n                <option value=\"\">Selecione um produto</option>\r\n                {availableProducts.map((product) => (\r\n                  <option key={product.id} value={product.id}>\r\n                    {product.name} - R$ {product.price?.toFixed(2)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <Button onClick={handleAddProduct} disabled={isLoading || !selectedProduct}>\r\n              Adicionar\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Client products list */}\r\n          {clientProducts.length === 0 ? (\r\n            <div className=\"text-center py-4 text-gray-500\">\r\n              Este cliente não possui produtos associados.\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-2\">\r\n              {clientProducts.map((product) => (\r\n                <div\r\n                  key={product.id}\r\n                  className=\"flex items-center justify-between p-3 border rounded-md\"\r\n                >\r\n                  <div>\r\n                    <div className=\"font-medium\">{product.name}</div>\r\n                    <div className=\"text-sm text-gray-500\">\r\n                      R$ {product.price?.toFixed(2)}\r\n                    </div>\r\n                  </div>\r\n                  <Button\r\n                    variant=\"destructive\"\r\n                    size=\"sm\"\r\n                    onClick={() => handleRemoveProduct(product.id)}\r\n                    disabled={isLoading}\r\n                  >\r\n                    Remover\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n\r\n              <div className=\"flex justify-between pt-4 font-medium\">\r\n                <span>Total:</span>\r\n                <span>R$ {calculateTotalValue().toFixed(2)}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ClientProductsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport ClientUTMData from \"./ClientUTMData\";\r\nimport EditableField from \"./EditableField\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientStatsProps {\r\n  clientData: Contact | null;\r\n  customFields: unknown[];\r\n  consultationStageOptions: string[];\r\n  fieldVisibility: Record<string, boolean>;\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange: (fieldId: string, visible: boolean) => void;\r\n  readOnly: boolean;\r\n  section: \"commercial\" | \"utm\";\r\n}\r\n\r\nconst ClientStats: React.FC<ClientStatsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  consultationStageOptions,\r\n  fieldVisibility,\r\n  onFieldUpdate,\r\n  onVisibilityChange,\r\n  readOnly,\r\n  section,\r\n}) => {\r\n  if (section === \"utm\") {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {clientData?.id ? (\r\n          <>\r\n            <ClientUTMData\r\n              contactId={clientData.id}\r\n              readOnly={readOnly}\r\n              onFieldUpdate={onFieldUpdate}\r\n              onVisibilityChange={onVisibilityChange}\r\n              showVisibilityControl={!readOnly}\r\n            />\r\n            {customFields\r\n              .filter((field) => field.visibility_settings?.visible_in_tabs?.utm)\r\n              .map((field) => (\r\n                <CustomFieldRenderer\r\n                  key={field.id}\r\n                  field={field}\r\n                  value={clientData?.customValues?.[field.id]}\r\n                  onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n                />\r\n              ))}\r\n          </>\r\n        ) : (\r\n          <p className=\"text-muted-foreground text-center py-8\">\r\n            Dados UTM não disponíveis para este cliente.\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <EditableField\r\n        label=\"Status\"\r\n        value={clientData?.status}\r\n        fieldId=\"status\"\r\n        type={readOnly ? \"badge\" : \"select\"}\r\n        options={[\"Active\", \"Inactive\"]}\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.status !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Etapa da Consulta\"\r\n        value={clientData?.consultationStage}\r\n        fieldId=\"consultationStage\"\r\n        type={readOnly ? \"badge\" : \"select\"}\r\n        options={consultationStageOptions}\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.consultationStage !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Setor do Cliente\"\r\n        value={clientData?.clientSector}\r\n        fieldId=\"clientSector\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.clientSector !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Usuário Responsável\"\r\n        value={clientData?.responsibleUser}\r\n        fieldId=\"responsibleUser\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.responsibleUser !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Vendas\"\r\n        value={clientData?.sales}\r\n        fieldId=\"sales\"\r\n        type=\"money\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.sales !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Orçamento\"\r\n        value={clientData?.budget}\r\n        fieldId=\"budget\"\r\n        type=\"money\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.budget !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Método de Pagamento\"\r\n        value={clientData?.paymentMethod}\r\n        fieldId=\"paymentMethod\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.paymentMethod !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Objetivo do Cliente\"\r\n        value={clientData?.clientObjective}\r\n        fieldId=\"clientObjective\"\r\n        type=\"textarea\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.clientObjective !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Motivo de Perda\"\r\n        value={clientData?.lossReason}\r\n        fieldId=\"lossReason\"\r\n        type=\"textarea\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.lossReason !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Número de Contrato\"\r\n        value={clientData?.contractNumber}\r\n        fieldId=\"contractNumber\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.contractNumber !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Data de Contrato\"\r\n        value={clientData?.contractDate}\r\n        fieldId=\"contractDate\"\r\n        type=\"text\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.contractDate !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Pagamento\"\r\n        value={clientData?.payment}\r\n        fieldId=\"payment\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.payment !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      {customFields\r\n        .filter((field) => field.visibility_settings?.visible_in_tabs?.commercial)\r\n        .map((field) => (\r\n          <CustomFieldRenderer\r\n            key={field.id}\r\n            field={field}\r\n            value={clientData?.customValues?.[field.id]}\r\n            onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientStats;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientTableRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientUTMData.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsCompactToggler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsDashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsModals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsRefreshButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsTableVirtualized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsViewToggler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ColumnConfigDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CompanyInfoFields.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface CompanyInfoFieldsProps {\r\n  newContact: Partial<Contact>;\r\n  validationErrors: { [key: string]: string };\r\n  onInputChange: (field: keyof Contact, value: any) => void;\r\n}\r\n\r\nconst CompanyInfoFields = React.memo(({ newContact, validationErrors, onInputChange }: CompanyInfoFieldsProps) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <Label htmlFor=\"clientName\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Nome da Empresa\r\n        </Label>\r\n        <Input\r\n          id=\"clientName\"\r\n          value={newContact.clientName || \"\"}\r\n          onChange={(e) => onInputChange(\"clientName\", e.target.value)}\r\n          placeholder=\"Nome da empresa\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"client-type\">Tipo de cliente</Label>\r\n        <Select\r\n          value={newContact.clientType || \"\"}\r\n          onValueChange={(value) => onInputChange(\"clientType\", value)}\r\n        >\r\n          <SelectTrigger>\r\n            <SelectValue placeholder=\"Selecione\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"pessoa-fisica\">Pessoa Física</SelectItem>\r\n            <SelectItem value=\"pessoa-juridica\">Pessoa Jurídica</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"clientSize\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Tamanho do Cliente\r\n        </Label>\r\n        <Select\r\n          value={newContact.clientSize || \"\"}\r\n          onValueChange={(value) => onInputChange(\"clientSize\", value)}\r\n        >\r\n          <SelectTrigger>\r\n            <SelectValue placeholder=\"Selecione\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"pequeno\">Pequeno</SelectItem>\r\n            <SelectItem value=\"medio\">Médio</SelectItem>\r\n            <SelectItem value=\"grande\">Grande</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"cpfCnpj\" className=\"text-gray-700 dark:text-gray-300\">\r\n          CPF/CNPJ\r\n        </Label>\r\n        <Input\r\n          id=\"cpfCnpj\"\r\n          value={newContact.cpfCnpj || \"\"}\r\n          onChange={(e) => onInputChange(\"cpfCnpj\", e.target.value)}\r\n          placeholder=\"000.000.000-00 ou 00.000.000/0000-00\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.cpfCnpj ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.cpfCnpj && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.cpfCnpj}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nCompanyInfoFields.displayName = 'CompanyInfoFields';\r\n\r\nexport default CompanyInfoFields;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ConsultationStageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ContactStageHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CreateCustomFieldDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldRenderer.tsx","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":79,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2632,4037],"text":"{ const selectedValues = Array.isArray(value) ? value : [];\r\n        \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            onChange([...selectedValues, option]);\r\n          } else {\r\n            onChange(selectedValues.filter((v: string) => v !== option));\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div\r\n            className={`space-y-2 ${\r\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\r\n            }`}\r\n          >\r\n            {field.field_options &&\r\n              Array.isArray(field.field_options) &&\r\n              field.field_options.map((option) => (\r\n                <label key={option} className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedValues.includes(option)}\r\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\r\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\r\n                  />\r\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                    {option}\r\n                  </span>\r\n                </label>\r\n              ))}\r\n          </div>\r\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":82,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":88,"endColumn":11,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2632,4037],"text":"{ const selectedValues = Array.isArray(value) ? value : [];\r\n        \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            onChange([...selectedValues, option]);\r\n          } else {\r\n            onChange(selectedValues.filter((v: string) => v !== option));\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div\r\n            className={`space-y-2 ${\r\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\r\n            }`}\r\n          >\r\n            {field.field_options &&\r\n              Array.isArray(field.field_options) &&\r\n              field.field_options.map((option) => (\r\n                <label key={option} className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedValues.includes(option)}\r\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\r\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\r\n                  />\r\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                    {option}\r\n                  </span>\r\n                </label>\r\n              ))}\r\n          </div>\r\n        ); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { CustomFieldWithValue } from \"@/types/customFields\";\r\nimport { AlertCircle } from \"lucide-react\";\r\n\r\ninterface CustomFieldRendererProps {\r\n  field: CustomFieldWithValue;\r\n  value: unknown;\r\n  onChange: (value: unknown) => void;\r\n  validationError?: string;\r\n}\r\n\r\nconst CustomFieldRenderer = ({\r\n  field,\r\n  value,\r\n  onChange,\r\n  validationError,\r\n}: CustomFieldRendererProps) => {\r\n  const renderField = () => {\r\n    switch (field.field_type) {\r\n      case \"text\":\r\n        return (\r\n          <Input\r\n            value={value || \"\"}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            placeholder={`Digite ${field.field_name.toLowerCase()}`}\r\n            className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n              validationError ? \"border-red-500 focus:border-red-500\" : \"\"\r\n            }`}\r\n          />\r\n        );\r\n\r\n      case \"single_select\":\r\n        return (\r\n          <Select\r\n            value={value || \"none\"}\r\n            onValueChange={(val) => onChange(val === \"none\" ? null : val)}\r\n          >\r\n            <SelectTrigger\r\n              className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white ${\r\n                validationError ? \"border-red-500 focus:border-red-500\" : \"\"\r\n              }`}\r\n            >\r\n              <SelectValue\r\n                placeholder={`Selecione ${field.field_name.toLowerCase()}`}\r\n              />\r\n            </SelectTrigger>\r\n            <SelectContent className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\">\r\n              <SelectItem\r\n                value=\"none\"\r\n                className=\"text-gray-900 dark:text-white\"\r\n              >\r\n                Nenhum\r\n              </SelectItem>\r\n              {field.field_options &&\r\n                Array.isArray(field.field_options) &&\r\n                field.field_options.map((option) => (\r\n                  <SelectItem\r\n                    key={option}\r\n                    value={option}\r\n                    className=\"text-gray-900 dark:text-white\"\r\n                  >\r\n                    {option}\r\n                  </SelectItem>\r\n                ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n\r\n      case \"multi_select\":\r\n        const selectedValues = Array.isArray(value) ? value : [];\r\n        \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            onChange([...selectedValues, option]);\r\n          } else {\r\n            onChange(selectedValues.filter((v: string) => v !== option));\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div\r\n            className={`space-y-2 ${\r\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\r\n            }`}\r\n          >\r\n            {field.field_options &&\r\n              Array.isArray(field.field_options) &&\r\n              field.field_options.map((option) => (\r\n                <label key={option} className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedValues.includes(option)}\r\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\r\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\r\n                  />\r\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                    {option}\r\n                  </span>\r\n                </label>\r\n              ))}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2\">\r\n        {field.field_name}\r\n        {field.is_required && <span className=\"text-red-500 ml-1\">*</span>}\r\n        {validationError && <AlertCircle className=\"h-4 w-4 text-red-500\" />}\r\n      </Label>\r\n      {renderField()}\r\n      {validationError && (\r\n        <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\">\r\n          <AlertCircle className=\"h-3 w-3\" />\r\n          {validationError}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomFieldRenderer;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1018,1021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1018,1021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1504,1507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1504,1507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Plus, Trash2 } from \"lucide-react\";\r\nimport { useCustomFields } from \"@/hooks/useCustomFields\";\r\nimport { CustomFieldWithValue } from \"@/types/customFields\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport CreateCustomFieldDialog from \"./CreateCustomFieldDialog\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\ninterface CustomFieldsTabProps {\r\n  clientId?: string;\r\n  onFieldUpdate?: (fieldId: string, value: any) => void;\r\n  readOnly?: boolean;\r\n}\r\n\r\nconst CustomFieldsTab: React.FC<CustomFieldsTabProps> = ({\r\n  clientId,\r\n  onFieldUpdate,\r\n  readOnly = false,\r\n}) => {\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [customFieldsWithValues, setCustomFieldsWithValues] = useState<CustomFieldWithValue[]>([]);\r\n  const { customFields, loading, deleteCustomField, updateCustomField } = useCustomFields();\r\n\r\n  const handleFieldChange = (fieldId: string, value: any) => {\r\n    if (onFieldUpdate) {\r\n      onFieldUpdate(`custom_${fieldId}`, value);\r\n    }\r\n  };\r\n\r\n  const handleDeleteField = async (fieldId: string) => {\r\n    try {\r\n      await deleteCustomField(fieldId);\r\n    } catch (error) {\r\n      console.error(\"Erro ao excluir campo:\", error);\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = async (fieldId: string, visible: boolean) => {\r\n    try {\r\n      await updateCustomField(fieldId, { \r\n        visibility_settings: { visible_in_client_info: visible }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar visibilidade:\", error);\r\n    }\r\n  };\r\n\r\n  const handleTabSelectionChange = async (fieldId: string, selectedTab: string) => {\r\n    const field = customFields.find(f => f.id === fieldId);\r\n    if (!field) return;\r\n\r\n    const currentSettings = field.visibility_settings || {};\r\n    \r\n    // Reset all tabs to false, then set the selected one to true\r\n    const newTabSettings = {\r\n      basic: false,\r\n      commercial: false,\r\n      utm: false,\r\n      docs: false,\r\n      [selectedTab]: true\r\n    };\r\n    \r\n    try {\r\n      await updateCustomField(fieldId, {\r\n        visibility_settings: {\r\n          ...currentSettings,\r\n          visible_in_tabs: newTabSettings\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar aba do campo:\", error);\r\n    }\r\n  };\r\n\r\n  // Helper function to get the currently selected tab for a field\r\n  const getSelectedTab = (field: unknown) => {\r\n    const tabSettings = field.visibility_settings?.visible_in_tabs || {};\r\n    if (tabSettings.basic) return 'basic';\r\n    if (tabSettings.commercial) return 'commercial';\r\n    if (tabSettings.utm) return 'utm';\r\n    if (tabSettings.docs) return 'docs';\r\n    return 'basic'; // default\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"text-gray-500\">Carregando campos personalizados...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {!readOnly && (\r\n        <div className=\"flex justify-between items-center\">\r\n          <h3 className=\"text-lg font-semibold\">Campos Personalizados</h3>\r\n          <Button\r\n            onClick={() => setIsCreateDialogOpen(true)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n            Adicionar Campo\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {customFields.length === 0 ? (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500 mb-4\">\r\n            Nenhum campo personalizado configurado ainda.\r\n          </p>\r\n          {!readOnly && (\r\n            <Button\r\n              onClick={() => setIsCreateDialogOpen(true)}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Plus className=\"h-4 w-4\" />\r\n              Criar Primeiro Campo\r\n            </Button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          {customFields.map((field) => (\r\n            <Card key={field.id} className=\"p-4\">\r\n              <div className=\"space-y-4\">\r\n                {/* Campo em si */}\r\n                <div className=\"flex-1\">\r\n                  <CustomFieldRenderer\r\n                    field={field}\r\n                    value={customFieldsWithValues.find(f => f.id === field.id)?.value}\r\n                    onChange={(value) => handleFieldChange(field.id, value)}\r\n                  />\r\n                </div>\r\n\r\n                {/* Controles de visibilidade e exclusão */}\r\n                {!readOnly && (\r\n                  <div className=\"border-t pt-4 space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={`visible-${field.id}`}\r\n                          checked={field.visibility_settings?.visible_in_client_info !== false}\r\n                          onCheckedChange={(checked) => \r\n                            handleVisibilityChange(field.id, checked as boolean)\r\n                          }\r\n                        />\r\n                        <Label htmlFor={`visible-${field.id}`} className=\"text-sm\">\r\n                          Exibir nas informações do cliente\r\n                        </Label>\r\n                      </div>\r\n\r\n                      <AlertDialog>\r\n                        <AlertDialogTrigger asChild>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            className=\"text-red-600 hover:text-red-700\"\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </AlertDialogTrigger>\r\n                        <AlertDialogContent>\r\n                          <AlertDialogHeader>\r\n                            <AlertDialogTitle>Excluir Campo Personalizado</AlertDialogTitle>\r\n                            <AlertDialogDescription>\r\n                              Tem certeza que deseja excluir o campo \"{field.field_name}\"? \r\n                              Esta ação não pode ser desfeita e todos os dados associados serão perdidos.\r\n                            </AlertDialogDescription>\r\n                          </AlertDialogHeader>\r\n                          <AlertDialogFooter>\r\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n                            <AlertDialogAction\r\n                              onClick={() => handleDeleteField(field.id)}\r\n                              className=\"bg-red-600 hover:bg-red-700\"\r\n                            >\r\n                              Excluir\r\n                            </AlertDialogAction>\r\n                          </AlertDialogFooter>\r\n                        </AlertDialogContent>\r\n                      </AlertDialog>\r\n                    </div>\r\n\r\n                    {/* Configuração de aba - agora como dropdown único */}\r\n                    <div className=\"space-y-2\">\r\n                      <Label className=\"text-sm font-medium\">Exibir na aba:</Label>\r\n                      <Select\r\n                        value={getSelectedTab(field)}\r\n                        onValueChange={(value) => handleTabSelectionChange(field.id, value)}\r\n                      >\r\n                        <SelectTrigger className=\"w-full\">\r\n                          <SelectValue placeholder=\"Selecione uma aba\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"basic\">Básico</SelectItem>\r\n                          <SelectItem value=\"commercial\">Comercial</SelectItem>\r\n                          <SelectItem value=\"utm\">UTM</SelectItem>\r\n                          <SelectItem value=\"docs\">Arquivos</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <CreateCustomFieldDialog\r\n        isOpen={isCreateDialogOpen}\r\n        onClose={() => setIsCreateDialogOpen(false)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomFieldsTab;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\DialogTabsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\DynamicCategoryManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3025,3028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3025,3028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":147,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4354,5571],"text":"{ const selectedValues = Array.isArray(category.value)\r\n          ? category.value\r\n          : [];\r\n          \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            updateCategoryValue(category.id, [\r\n              ...selectedValues,\r\n              option,\r\n            ]);\r\n          } else {\r\n            updateCategoryValue(\r\n              category.id,\r\n              selectedValues.filter((v: string) => v !== option),\r\n            );\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\r\n            {category.options?.map((option) => (\r\n              <label key={option} className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedValues.includes(option)}\r\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\r\n                  className=\"rounded border-gray-300\"\r\n                />\r\n                <span className=\"text-sm\">{option}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":11,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4354,5571],"text":"{ const selectedValues = Array.isArray(category.value)\r\n          ? category.value\r\n          : [];\r\n          \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            updateCategoryValue(category.id, [\r\n              ...selectedValues,\r\n              option,\r\n            ]);\r\n          } else {\r\n            updateCategoryValue(\r\n              category.id,\r\n              selectedValues.filter((v: string) => v !== option),\r\n            );\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\r\n            {category.options?.map((option) => (\r\n              <label key={option} className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedValues.includes(option)}\r\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\r\n                  className=\"rounded border-gray-300\"\r\n                />\r\n                <span className=\"text-sm\">{option}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        ); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Plus, Trash2, X } from \"lucide-react\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport interface DynamicCategory {\r\n  id: string;\r\n  name: string;\r\n  type: \"text\" | \"single_select\" | \"multi_select\";\r\n  options?: string[];\r\n  value?: unknown;\r\n}\r\n\r\ninterface DynamicCategoryManagerProps {\r\n  tabName: string;\r\n  categories: DynamicCategory[];\r\n  onCategoriesChange: (categories: DynamicCategory[]) => void;\r\n}\r\n\r\nconst DynamicCategoryManager = ({\r\n  tabName,\r\n  categories,\r\n  onCategoriesChange,\r\n}: DynamicCategoryManagerProps) => {\r\n  const [isAddingCategory, setIsAddingCategory] = useState(false);\r\n  const [newCategory, setNewCategory] = useState({\r\n    name: \"\",\r\n    type: \"text\" as \"text\" | \"single_select\" | \"multi_select\",\r\n    options: [] as string[],\r\n  });\r\n  const [newOption, setNewOption] = useState(\"\");\r\n\r\n  console.log(`DynamicCategoryManager for ${tabName}:`, {\r\n    categories,\r\n    isAddingCategory,\r\n  });\r\n\r\n  const addCategory = () => {\r\n    if (!newCategory.name.trim()) {\r\n      toast({\r\n        title: \"Nome obrigatório\",\r\n        description: \"Por favor, digite um nome para a categoria.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const category: DynamicCategory = {\r\n      id: `${Date.now()}-${Math.random()}`,\r\n      name: newCategory.name,\r\n      type: newCategory.type,\r\n      options: newCategory.type !== \"text\" ? newCategory.options : undefined,\r\n      value: newCategory.type === \"multi_select\" ? [] : \"\",\r\n    };\r\n\r\n    onCategoriesChange([...categories, category]);\r\n    setNewCategory({ name: \"\", type: \"text\", options: [] });\r\n    setNewOption(\"\");\r\n    setIsAddingCategory(false);\r\n\r\n    toast({\r\n      title: \"Categoria adicionada\",\r\n      description: `Categoria \"${category.name}\" foi adicionada à aba ${tabName}.`,\r\n    });\r\n  };\r\n\r\n  const removeCategory = (categoryId: string) => {\r\n    onCategoriesChange(categories.filter((cat) => cat.id !== categoryId));\r\n    toast({\r\n      title: \"Categoria removida\",\r\n      description: \"Categoria foi removida com sucesso.\",\r\n    });\r\n  };\r\n\r\n  const addOption = () => {\r\n    if (newOption.trim() && !newCategory.options.includes(newOption.trim())) {\r\n      setNewCategory({\r\n        ...newCategory,\r\n        options: [...newCategory.options, newOption.trim()],\r\n      });\r\n      setNewOption(\"\");\r\n    }\r\n  };\r\n\r\n  const removeOption = (option: string) => {\r\n    setNewCategory({\r\n      ...newCategory,\r\n      options: newCategory.options.filter((opt) => opt !== option),\r\n    });\r\n  };\r\n\r\n  const updateCategoryValue = (categoryId: string, value: any) => {\r\n    onCategoriesChange(\r\n      categories.map((cat) =>\r\n        cat.id === categoryId ? { ...cat, value } : cat,\r\n      ),\r\n    );\r\n  };\r\n\r\n  const renderCategoryInput = (category: DynamicCategory) => {\r\n    switch (category.type) {\r\n      case \"text\":\r\n        return (\r\n          <Input\r\n            value={category.value || \"\"}\r\n            onChange={(e) => updateCategoryValue(category.id, e.target.value)}\r\n            placeholder={`Digite ${category.name.toLowerCase()}`}\r\n          />\r\n        );\r\n\r\n      case \"single_select\":\r\n        return (\r\n          <Select\r\n            value={category.value || \"none\"}\r\n            onValueChange={(val) =>\r\n              updateCategoryValue(category.id, val === \"none\" ? null : val)\r\n            }\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue\r\n                placeholder={`Selecione ${category.name.toLowerCase()}`}\r\n              />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"none\">Nenhum</SelectItem>\r\n              {category.options?.map((option) => (\r\n                <SelectItem key={option} value={option}>\r\n                  {option}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n\r\n      case \"multi_select\":\r\n        const selectedValues = Array.isArray(category.value)\r\n          ? category.value\r\n          : [];\r\n          \r\n        // Função extraída para reduzir o aninhamento\r\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\r\n          if (isChecked) {\r\n            updateCategoryValue(category.id, [\r\n              ...selectedValues,\r\n              option,\r\n            ]);\r\n          } else {\r\n            updateCategoryValue(\r\n              category.id,\r\n              selectedValues.filter((v: string) => v !== option),\r\n            );\r\n          }\r\n        };\r\n        \r\n        return (\r\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\r\n            {category.options?.map((option) => (\r\n              <label key={option} className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedValues.includes(option)}\r\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\r\n                  className=\"rounded border-gray-300\"\r\n                />\r\n                <span className=\"text-sm\">{option}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4 max-h-96 flex flex-col\">\r\n      {/* Header with add button */}\r\n      <div className=\"flex items-center justify-between flex-shrink-0\">\r\n        <h4 className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">\r\n          Categorias Personalizadas\r\n        </h4>\r\n        {!isAddingCategory && (\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setIsAddingCategory(true)}\r\n            className=\"text-green-600 hover:text-green-700 border-green-200 hover:border-green-300\"\r\n          >\r\n            <Plus className=\"h-3 w-3 mr-1\" />\r\n            Nova Categoria\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Scrollable content area */}\r\n      <div className=\"flex-1 overflow-y-auto space-y-3\">\r\n        {/* Add new category form */}\r\n        {isAddingCategory && (\r\n          <Card className=\"border-green-200\">\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle className=\"text-sm\">Nova Categoria</CardTitle>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setIsAddingCategory(false);\r\n                    setNewCategory({ name: \"\", type: \"text\", options: [] });\r\n                    setNewOption(\"\");\r\n                  }}\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              <div>\r\n                <Label htmlFor=\"category-name\" className=\"text-xs\">\r\n                  Nome da Categoria\r\n                </Label>\r\n                <Input\r\n                  id=\"category-name\"\r\n                  value={newCategory.name}\r\n                  onChange={(e) =>\r\n                    setNewCategory({ ...newCategory, name: e.target.value })\r\n                  }\r\n                  placeholder=\"Ex: Tipo de Empresa\"\r\n                  className=\"text-sm\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"category-type\" className=\"text-xs\">\r\n                  Tipo de Campo\r\n                </Label>\r\n                <Select\r\n                  value={newCategory.type}\r\n                  onValueChange={(\r\n                    value: \"text\" | \"single_select\" | \"multi_select\",\r\n                  ) =>\r\n                    setNewCategory({ ...newCategory, type: value, options: [] })\r\n                  }\r\n                >\r\n                  <SelectTrigger className=\"text-sm\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"text\">Texto</SelectItem>\r\n                    <SelectItem value=\"single_select\">Seleção Única</SelectItem>\r\n                    <SelectItem value=\"multi_select\">\r\n                      Seleção Múltipla\r\n                    </SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {(newCategory.type === \"single_select\" ||\r\n                newCategory.type === \"multi_select\") && (\r\n                <div>\r\n                  <Label className=\"text-xs\">Opções</Label>\r\n                  <div className=\"flex gap-2 mb-2\">\r\n                    <Input\r\n                      value={newOption}\r\n                      onChange={(e) => setNewOption(e.target.value)}\r\n                      placeholder=\"Nova opção\"\r\n                      onKeyPress={(e) => e.key === \"Enter\" && addOption()}\r\n                      className=\"text-sm\"\r\n                    />\r\n                    <Button\r\n                      onClick={addOption}\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                    >\r\n                      <Plus className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"flex flex-wrap gap-1 max-h-16 overflow-y-auto\">\r\n                    {newCategory.options.map((option) => (\r\n                      <Badge\r\n                        key={option}\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs flex items-center gap-1\"\r\n                      >\r\n                        {option}\r\n                        <button\r\n                          onClick={() => removeOption(option)}\r\n                          className=\"ml-1\"\r\n                        >\r\n                          <X className=\"h-2 w-2\" />\r\n                        </button>\r\n                      </Badge>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Button onClick={addCategory} size=\"sm\" className=\"text-xs\">\r\n                  Adicionar\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setIsAddingCategory(false)}\r\n                  className=\"text-xs\"\r\n                >\r\n                  Cancelar\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Existing categories */}\r\n        {categories.map((category) => (\r\n          <Card key={category.id} className=\"border-gray-200\">\r\n            <CardContent className=\"p-3\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Label className=\"text-sm font-medium\">\r\n                      {category.name}\r\n                    </Label>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {category.type === \"text\"\r\n                        ? \"Texto\"\r\n                        : category.type === \"single_select\"\r\n                          ? \"Seleção Única\"\r\n                          : \"Seleção Múltipla\"}\r\n                    </Badge>\r\n                  </div>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => removeCategory(category.id)}\r\n                    className=\"text-red-600 hover:text-red-700 h-6 w-6 p-0\"\r\n                  >\r\n                    <Trash2 className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n                {renderCategoryInput(category)}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n\r\n        {categories.length === 0 && !isAddingCategory && (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <p className=\"text-sm\">Nenhuma categoria personalizada criada.</p>\r\n            <p className=\"text-xs mt-1\">\r\n              Clique em \"Nova Categoria\" para começar.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicCategoryManager;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditClientForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1230,1233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1230,1233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { useDynamicFields } from \"@/hooks/useDynamicFields\";\r\nimport ClientInfo from \"./ClientInfo\";\r\n\r\ninterface EditClientFormProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedContact: Contact | null;\r\n  onSave: (updatedContact: Contact) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Componente para edição de cliente\r\n */\r\nconst EditClientForm: React.FC<EditClientFormProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedContact,\r\n  onSave,\r\n}) => {\r\n  const [contact, setContact] = useState<Contact | null>(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const { dynamicFields, refetch } = useDynamicFields(selectedContact?.sessionId || null);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && selectedContact) {\r\n      console.log(\"Setting contact data for editing:\", selectedContact);\r\n      setContact({ ...selectedContact });\r\n      refetch();\r\n    }\r\n  }, [isOpen, selectedContact, refetch]);\r\n\r\n  const handleFieldUpdate = (fieldId: string, newValue: any) => {\r\n    if (!contact) return;\r\n\r\n    console.log(\"Field updated:\", fieldId, newValue);\r\n\r\n    // Verifica se é um campo personalizado ou um campo padrão\r\n    if (fieldId.startsWith(\"custom_\")) {\r\n      const actualFieldId = fieldId.replace(\"custom_\", \"\");\r\n      setContact({\r\n        ...contact,\r\n        customValues: {\r\n          ...contact.customValues,\r\n          [actualFieldId]: newValue,\r\n        },\r\n      });\r\n    } else {\r\n      setContact({\r\n        ...contact,\r\n        [fieldId]: newValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!contact) return;\r\n\r\n    try {\r\n      setIsSaving(true);\r\n      console.log(\"Saving contact:\", contact);\r\n      await onSave(contact);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Erro ao salvar cliente:\", error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setContact(null);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}>\r\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>Editar Cliente: {selectedContact?.name}</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"py-4\">\r\n          {contact && (\r\n            <ClientInfo\r\n              clientData={contact}\r\n              dynamicFields={dynamicFields}\r\n              onFieldUpdate={handleFieldUpdate}\r\n              context=\"edit\"\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={handleClose}>\r\n            Cancelar\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={isSaving}>\r\n            {isSaving ? \"Salvando...\" : \"Salvar Alterações\"}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditClientForm;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditableField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport FieldVisibilityControl from \"./FieldVisibilityControl\";\r\n\r\ninterface EditableFieldProps {\r\n  label: string;\r\n  value?: string | number | null;\r\n  fieldId: string;\r\n  type?: \"text\" | \"email\" | \"tel\" | \"textarea\" | \"select\" | \"badge\" | \"money\";\r\n  options?: string[];\r\n  readOnly?: boolean;\r\n  onChange?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange?: (fieldId: string, visible: boolean) => void;\r\n  isVisible?: boolean;\r\n  showVisibilityControl?: boolean;\r\n}\r\n\r\nconst EditableField: React.FC<EditableFieldProps> = ({\r\n  label,\r\n  value,\r\n  fieldId,\r\n  type = \"text\",\r\n  options = [],\r\n  readOnly = false,\r\n  onChange,\r\n  onVisibilityChange,\r\n  isVisible = true,\r\n  showVisibilityControl = false,\r\n}) => {\r\n  const [localValue, setLocalValue] = useState(value || \"\");\r\n\r\n  const handleChange = (newValue: unknown) => {\r\n    setLocalValue(newValue);\r\n    if (onChange) {\r\n      onChange(fieldId, newValue);\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = (fieldId: string, visible: boolean) => {\r\n    if (onVisibilityChange) {\r\n      onVisibilityChange(fieldId, visible);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number | string) => {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (isNaN(numValue)) return \"R$ 0,00\";\r\n    \r\n    return new Intl.NumberFormat('pt-BR', {\r\n      style: 'currency',\r\n      currency: 'BRL'\r\n    }).format(numValue);\r\n  };\r\n\r\n  const renderField = () => {\r\n    if (readOnly) {\r\n      switch (type) {\r\n        case \"badge\":\r\n          return value ? (\r\n            <Badge variant=\"secondary\" className=\"text-sm\">\r\n              {value}\r\n            </Badge>\r\n          ) : (\r\n            <span className=\"text-gray-500 text-sm\">-</span>\r\n          );\r\n        case \"money\":\r\n          return (\r\n            <span className=\"text-sm font-medium\">\r\n              {value ? formatCurrency(value) : \"R$ 0,00\"}\r\n            </span>\r\n          );\r\n        case \"textarea\":\r\n          return (\r\n            <div className=\"text-sm whitespace-pre-wrap\">\r\n              {value || <span className=\"text-gray-500\">-</span>}\r\n            </div>\r\n          );\r\n        default:\r\n          return (\r\n            <span className=\"text-sm\">\r\n              {value || <span className=\"text-gray-500\">-</span>}\r\n            </span>\r\n          );\r\n      }\r\n    }\r\n\r\n    switch (type) {\r\n      case \"textarea\":\r\n        return (\r\n          <Textarea\r\n            value={localValue}\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            className=\"min-h-[60px] resize-none\"\r\n            placeholder={`Digite ${label.toLowerCase()}`}\r\n          />\r\n        );\r\n      case \"select\":\r\n        return (\r\n          <Select value={localValue as string} onValueChange={handleChange}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder={`Selecione ${label.toLowerCase()}`} />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {options.map((option) => (\r\n                <SelectItem key={option} value={option}>\r\n                  {option}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n      case \"money\":\r\n        return (\r\n          <Input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={localValue}\r\n            onChange={(e) => handleChange(parseFloat(e.target.value) || 0)}\r\n            placeholder=\"0,00\"\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <Input\r\n            type={type}\r\n            value={localValue}\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            placeholder={`Digite ${label.toLowerCase()}`}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-1\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <Label htmlFor={fieldId} className=\"text-sm font-medium\">\r\n          {label}\r\n        </Label>\r\n        {showVisibilityControl && onVisibilityChange && (\r\n          <FieldVisibilityControl\r\n            fieldId={fieldId}\r\n            fieldLabel={label}\r\n            isVisible={isVisible}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        )}\r\n      </div>\r\n      {renderField()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditableField;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\FieldVisibilityControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\FilterDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanClientCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanStageColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\SendMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\TagsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\UnifiedClientInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { DynamicCategory } from \"@/components/clients/DynamicCategoryManager\";\r\nimport ClientDetails from \"./ClientDetails\";\r\nimport ClientStats from \"./ClientStats\";\r\nimport ClientActions from \"./ClientActions\";\r\nimport { useUnifiedClientInfo } from \"@/hooks/useUnifiedClientInfo\";\r\n\r\ninterface UnifiedClientInfoProps {\r\n  clientData: Contact | null;\r\n  dynamicFields?: {\r\n    basic: DynamicCategory[];\r\n    commercial: DynamicCategory[];\r\n    personalized: DynamicCategory[];\r\n    documents: DynamicCategory[];\r\n  };\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  readOnly?: boolean;\r\n  compact?: boolean;\r\n  showTabs?: string[];\r\n}\r\n\r\nconst UnifiedClientInfo: React.FC<UnifiedClientInfoProps> = ({\r\n  clientData,\r\n  dynamicFields = {\r\n    basic: [],\r\n    commercial: [],\r\n    personalized: [],\r\n    documents: [],\r\n  },\r\n  onFieldUpdate,\r\n  readOnly = true,\r\n  compact = false,\r\n  showTabs = [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n}) => {\r\n  const {\r\n    activeTab,\r\n    setActiveTab,\r\n    fieldVisibility,\r\n    setFieldVisibility,\r\n    tabsScrollRef,\r\n    customFields,\r\n    consultationStageOptions,\r\n    clientTypeOptions,\r\n    clientSizeOptions,\r\n  } = useUnifiedClientInfo(showTabs);\r\n\r\n  const tabConfig = {\r\n    basic: { label: \"Básico\", icon: \"👤\" },\r\n    commercial: { label: \"Comercial\", icon: \"💼\" },\r\n    utm: { label: \"UTM\", icon: \"📊\" },\r\n    custom: { label: \"Personalizado\", icon: \"⚙️\" },\r\n    docs: { label: \"Arquivos\", icon: \"📁\" }\r\n  };\r\n\r\n  const scrollTabs = (direction: 'left' | 'right') => {\r\n    if (tabsScrollRef.current) {\r\n      const scrollAmount = 150;\r\n      const newScrollLeft = tabsScrollRef.current.scrollLeft +\r\n        (direction === 'right' ? scrollAmount : -scrollAmount);\r\n      \r\n      tabsScrollRef.current.scrollTo({\r\n        left: newScrollLeft,\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = (fieldId: string, visible: boolean) => {\r\n    setFieldVisibility(prev => ({\r\n      ...prev,\r\n      [fieldId]: visible,\r\n    }));\r\n  };\r\n\r\n  const renderTabContent = () => {\r\n    switch (activeTab) {\r\n      case \"basic\":\r\n        return (\r\n          <ClientDetails\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            clientTypeOptions={clientTypeOptions}\r\n            clientSizeOptions={clientSizeOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"commercial\":\r\n        return (\r\n          <ClientStats\r\n            section=\"commercial\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            consultationStageOptions={consultationStageOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"utm\":\r\n        return (\r\n          <ClientStats\r\n            section=\"utm\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            consultationStageOptions={consultationStageOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"custom\":\r\n        return (\r\n          <ClientActions\r\n            section=\"custom\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            onFieldUpdate={onFieldUpdate}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"docs\":\r\n        return (\r\n          <ClientActions\r\n            section=\"docs\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            onFieldUpdate={onFieldUpdate}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full bg-background\">\r\n      {/* Carousel Tab Navigation */}\r\n      <div className=\"relative border-b border-border bg-background flex-shrink-0\">\r\n        {/* Left scroll button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"absolute left-0 top-0 z-10 h-full rounded-none shadow-md bg-background/80 backdrop-blur-sm\"\r\n          onClick={() => scrollTabs('left')}\r\n        >\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n\r\n        {/* Scrollable tabs container */}\r\n        <div\r\n          ref={tabsScrollRef}\r\n          className=\"flex overflow-x-auto scrollbar-hide mx-8 py-2\"\r\n          style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\r\n        >\r\n          <div className=\"flex space-x-2 min-w-max\">\r\n            {showTabs.map((tab) => (\r\n              <button\r\n                key={tab}\r\n                onClick={() => setActiveTab(tab)}\r\n                className={`\r\n                  inline-flex items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium \r\n                  transition-all duration-200 min-w-[120px]\r\n                  ${activeTab === tab\r\n                    ? 'bg-primary text-primary-foreground shadow-sm'\r\n                    : 'text-muted-foreground hover:bg-muted hover:text-foreground'\r\n                  }\r\n                `}\r\n              >\r\n                <span className=\"mr-2 text-base\">\r\n                  {tabConfig[tab as keyof typeof tabConfig]?.icon}\r\n                </span>\r\n                {tabConfig[tab as keyof typeof tabConfig]?.label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right scroll button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"absolute right-0 top-0 z-10 h-full rounded-none shadow-md bg-background/80 backdrop-blur-sm\"\r\n          onClick={() => scrollTabs('right')}\r\n        >\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Tab Content with fixed height and scroll */}\r\n      <div className=\"flex-1 overflow-hidden min-h-0 bg-background\">\r\n        <div className=\"h-full overflow-y-auto bg-background\">\r\n          <div className=\"p-4 bg-background\">\r\n            {renderTabContent()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnifiedClientInfo;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ValidationErrorAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\FilterGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\FilterRule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\QuickFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\SavedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\filterConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableBody.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\AIStoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\AccountManagementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ChatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ClientsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\EvolutionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\KnowledgeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\NotificationsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ScheduleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\SubscriptionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\UserAIAccessCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\AttendanceSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\BlockedDateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\ClientSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\DateTimeSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\ServiceSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\AddInstanceDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\QrCodeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\examples\\SupabaseDashboardExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\ai-test\\ChatDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\ai-test\\SuggestedQuestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\faq\\FAQForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\AddMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\EditMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\BasicInfoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\InstructionsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\MessagesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PersonalityPreviewDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PersonalityTemplateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PreviewSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\TraitsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ObjectionsManager.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":38,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Plus, Edit2, Trash2, Save, X, Target } from \"lucide-react\";\r\nimport { ProductObjection } from \"@/types/product\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\ninterface ObjectionsManagerProps {\r\n  productId?: string;\r\n  onObjectionsChange?: (objections: ProductObjection[]) => void;\r\n  initialObjections?: ProductObjection[];\r\n}\r\n\r\nconst ObjectionsManager: React.FC<ObjectionsManagerProps> = ({\r\n  productId,\r\n  onObjectionsChange,\r\n  initialObjections = []\r\n}) => {\r\n  const [objections, setObjections] = useState<ProductObjection[]>(initialObjections);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n  const [editingId, setEditingId] = useState<string | null>(null);\r\n  const [newObjection, setNewObjection] = useState({ question: \"\", answer: \"\" });\r\n  const [editObjection, setEditObjection] = useState({ question: \"\", answer: \"\" });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { user } = useAuth();\r\n\r\n  // Load objections from database when productId is provided\r\n  useEffect(() => {\r\n    if (productId) {\r\n      loadObjections();\r\n    }\r\n  }, [\u0001, loadObjections]);\r\n\r\n  const loadObjections = async () => {\r\n    if (!productId) return;\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      // Tentar carregar da tabela product_objections\r\n      const { data, error } = await supabase\r\n        .from('product_objections')\r\n        .select('*')\r\n        .eq('product_id', productId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) {\r\n        // Se a tabela não existir, usar dados do campo objections do produto\r\n        console.log('Tabela product_objections não encontrada, usando campo objections do produto');\r\n        const { data: productData, error: productError } = await supabase\r\n          .from('ai_products')\r\n          .select('objections')\r\n          .eq('id', productId)\r\n          .single();\r\n        \r\n        if (productError) throw productError;\r\n        \r\n        const legacyObjections = (productData?.objections || []).map((obj: string, index: number) => ({\r\n          id: `legacy-${index}`,\r\n          question: obj,\r\n          answer: 'Resposta não definida'\r\n        }));\r\n        \r\n        setObjections(legacyObjections);\r\n        onObjectionsChange?.(legacyObjections);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const loadedObjections = data?.map(item => ({\r\n        id: item.id,\r\n        question: item.question,\r\n        answer: item.answer\r\n      })) || [];\r\n      \r\n      setObjections(loadedObjections);\r\n      onObjectionsChange?.(loadedObjections);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar objeções:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar as objeções.\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveObjection = async (objection: ProductObjection) => {\r\n    if (!productId || !user) {\r\n      // Se não há productId, retorna com ID temporário\r\n      return {\r\n        ...objection,\r\n        id: `temp-${Date.now()}`\r\n      };\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('product_objections')\r\n        .insert({\r\n          product_id: productId,\r\n          question: objection.question,\r\n          answer: objection.answer,\r\n          created_by: user.id\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.log('Tabela product_objections não disponível, usando apenas estado local');\r\n        return {\r\n          ...objection,\r\n          id: `temp-${Date.now()}`\r\n        };\r\n      }\r\n      \r\n      return {\r\n        id: data.id,\r\n        question: data.question,\r\n        answer: data.answer\r\n      };\r\n    } catch (error) {\r\n      console.error('Erro ao salvar objeção:', error);\r\n      return {\r\n        ...objection,\r\n        id: `temp-${Date.now()}`\r\n      };\r\n    }\r\n  };\r\n\r\n  const updateObjection = async (id: string, objection: Omit<ProductObjection, 'id'>) => {\r\n    if (!productId) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('product_objections')\r\n        .update({\r\n          question: objection.question,\r\n          answer: objection.answer\r\n        })\r\n        .eq('id', id);\r\n\r\n      if (error) {\r\n        console.log('Tabela product_objections não disponível, atualizando apenas estado local');\r\n        return;\r\n      }\r\n      \r\n      toast({\r\n        title: \"Sucesso\",\r\n        description: \"Objeção atualizada com sucesso.\"\r\n      });\r\n    } catch (error) {\r\n      console.log('Erro ao atualizar objeção, usando apenas estado local:', error);\r\n    }\r\n  };\r\n\r\n  const deleteObjection = async (id: string) => {\r\n    if (!productId) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('product_objections')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) {\r\n        console.log('Tabela product_objections não disponível, removendo apenas do estado local');\r\n        return;\r\n      }\r\n      \r\n      toast({\r\n        title: \"Sucesso\",\r\n        description: \"Objeção removida com sucesso.\"\r\n      });\r\n    } catch (error) {\r\n      console.log('Erro ao deletar objeção, removendo apenas do estado local:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddObjection = async () => {\r\n    if (!newObjection.question.trim() || !newObjection.answer.trim()) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Por favor, preencha tanto a objeção quanto a resposta.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    const objectionToAdd = {\r\n      question: newObjection.question.trim(),\r\n      answer: newObjection.answer.trim()\r\n    };\r\n\r\n    let savedObjection = objectionToAdd;\r\n    if (productId) {\r\n      savedObjection = await saveObjection(objectionToAdd);\r\n    }\r\n\r\n    const updatedObjections = [...objections, savedObjection];\r\n    setObjections(updatedObjections);\r\n    onObjectionsChange?.(updatedObjections);\r\n    \r\n    setNewObjection({ question: \"\", answer: \"\" });\r\n    setIsAdding(false);\r\n  };\r\n\r\n  const handleEditObjection = async (id: string) => {\r\n    if (!editObjection.question.trim() || !editObjection.answer.trim()) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Por favor, preencha tanto a objeção quanto a resposta.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    const objectionData = {\r\n      question: editObjection.question.trim(),\r\n      answer: editObjection.answer.trim()\r\n    };\r\n\r\n    if (productId) {\r\n      await updateObjection(id, objectionData);\r\n    }\r\n\r\n    const updatedObjections = objections.map(obj => \r\n      obj.id === id ? { ...obj, ...objectionData } : obj\r\n    );\r\n    \r\n    setObjections(updatedObjections);\r\n    onObjectionsChange?.(updatedObjections);\r\n    \r\n    setEditingId(null);\r\n    setEditObjection({ question: \"\", answer: \"\" });\r\n  };\r\n\r\n  const handleDeleteObjection = async (id: string) => {\r\n    if (productId) {\r\n      await deleteObjection(id);\r\n    }\r\n\r\n    const updatedObjections = objections.filter(obj => obj.id !== id);\r\n    setObjections(updatedObjections);\r\n    onObjectionsChange?.(updatedObjections);\r\n  };\r\n\r\n  const startEdit = (objection: ProductObjection) => {\r\n    setEditingId(objection.id || '');\r\n    setEditObjection({\r\n      question: objection.question,\r\n      answer: objection.answer\r\n    });\r\n  };\r\n\r\n  const cancelEdit = () => {\r\n    setEditingId(null);\r\n    setEditObjection({ question: \"\", answer: \"\" });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-3\">\r\n        <Label className=\"text-sm font-medium flex items-center gap-2\">\r\n          <Target className=\"h-4 w-4\" />\r\n          Objeções Comuns\r\n        </Label>\r\n        <div className=\"text-sm text-muted-foreground\">Carregando objeções...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Label className=\"text-sm font-medium flex items-center gap-2\">\r\n        <Target className=\"h-4 w-4\" />\r\n        Objeções Comuns\r\n      </Label>\r\n      \r\n      {/* Lista de objeções existentes */}\r\n      <div className=\"space-y-3\">\r\n        {objections.map((objection, index) => (\r\n          <Card key={objection.id || index} className=\"border-l-4 border-l-orange-500\">\r\n            <CardContent className=\"pt-4\">\r\n              {editingId === objection.id ? (\r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">Objeção</Label>\r\n                    <Input\r\n                      value={editObjection.question}\r\n                      onChange={(e) => setEditObjection(prev => ({ ...prev, question: e.target.value }))}\r\n                      placeholder=\"Digite a objeção...\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">Resposta</Label>\r\n                    <Textarea\r\n                      value={editObjection.answer}\r\n                      onChange={(e) => setEditObjection(prev => ({ ...prev, answer: e.target.value }))}\r\n                      placeholder=\"Digite a resposta para esta objeção...\"\r\n                      rows={3}\r\n                    />\r\n                  </div>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      size=\"sm\"\r\n                      onClick={() => handleEditObjection(objection.id!)}\r\n                    >\r\n                      <Save className=\"h-3 w-3 mr-1\" />\r\n                      Salvar\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={cancelEdit}\r\n                    >\r\n                      <X className=\"h-3 w-3 mr-1\" />\r\n                      Cancelar\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <div>\r\n                    <Badge variant=\"outline\" className=\"text-xs mb-1\">Objeção</Badge>\r\n                    <p className=\"text-sm font-medium\">{objection.question}</p>\r\n                  </div>\r\n                  <div>\r\n                    <Badge variant=\"outline\" className=\"text-xs mb-1\">Resposta</Badge>\r\n                    <p className=\"text-sm text-muted-foreground\">{objection.answer}</p>\r\n                  </div>\r\n                  <div className=\"flex gap-2 pt-2\">\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => startEdit(objection)}\r\n                    >\r\n                      <Edit2 className=\"h-3 w-3 mr-1\" />\r\n                      Editar\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => handleDeleteObjection(objection.id!)}\r\n                    >\r\n                      <Trash2 className=\"h-3 w-3 mr-1\" />\r\n                      Remover\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Formulário para adicionar nova objeção */}\r\n      {isAdding ? (\r\n        <Card className=\"border-dashed\">\r\n          <CardContent className=\"pt-4\">\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <Label className=\"text-xs text-muted-foreground\">Objeção</Label>\r\n                <Input\r\n                  value={newObjection.question}\r\n                  onChange={(e) => setNewObjection(prev => ({ ...prev, question: e.target.value }))}\r\n                  placeholder=\"Digite a objeção...\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label className=\"text-xs text-muted-foreground\">Resposta</Label>\r\n                <Textarea\r\n                  value={newObjection.answer}\r\n                  onChange={(e) => setNewObjection(prev => ({ ...prev, answer: e.target.value }))}\r\n                  placeholder=\"Digite a resposta para esta objeção...\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <Button size=\"sm\" onClick={handleAddObjection}>\r\n                  <Save className=\"h-3 w-3 mr-1\" />\r\n                  Salvar\r\n                </Button>\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  onClick={() => {\r\n                    setIsAdding(false);\r\n                    setNewObjection({ question: \"\", answer: \"\" });\r\n                  }}\r\n                >\r\n                  <X className=\"h-3 w-3 mr-1\" />\r\n                  Cancelar\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <Button\r\n          variant=\"outline\"\r\n          onClick={() => setIsAdding(true)}\r\n          className=\"w-full border-dashed\"\r\n        >\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          Adicionar Nova Objeção\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObjectionsManager;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\AddStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\EditStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\StageFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIMessagesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIPersonalityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIStagesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AITestTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AgendaTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\DaySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\FAQTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\HostsTab.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":53,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Plus, User, Edit, Trash2, Calendar, X } from \"lucide-react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { Database } from \"@/integrations/supabase/types\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\r\nimport { useAgendas } from '@/hooks/useAgendas';\r\n\r\ntype Host = Database['public']['Tables']['employees']['Row'];\r\ntype Agenda = {\r\n  id: string | number;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  host: string;\r\n  duration: number;\r\n  breakTime: number;\r\n};\r\n\r\nconst HostsTab = () => {\r\n  const { user } = useAuth();\r\n  const { agendas: supabaseAgendas } = useAgendas();\r\n  const [hosts, setHosts] = useState<Host[]>([]);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [editingHost, setEditingHost] = useState<Host | null>(null);\r\n  const [selectedAgendas, setSelectedAgendas] = useState<Agenda[]>([]);\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    role: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchHosts();\r\n    }\r\n  }, [\u0001, fetchHosts]);\r\n\r\n  const fetchHosts = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user?.id)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setHosts(data as Host[] || []);\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar anfitriões:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar os anfitriões.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.name || !formData.role) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Nome e função são obrigatórios.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Here you would also handle saving the `selectedAgendas` association\r\n      console.log(\"Salvando anfitrião com as agendas:\", selectedAgendas.map(a => a.id));\r\n\r\n      if (editingHost) {\r\n        const { error } = await supabase\r\n          .from(\"employees\")\r\n          .update({ name: formData.name, role: formData.role, description: formData.description })\r\n          .eq(\"id\", editingHost.id);\r\n        if (error) throw error;\r\n        toast({ title: \"Sucesso\", description: \"Anfitrião atualizado com sucesso!\" });\r\n      } else {\r\n        const { error } = await supabase\r\n          .from(\"employees\")\r\n          .insert({ name: formData.name, role: formData.role, description: formData.description, user_id: user?.id })\r\n          .select()\r\n          .single();\r\n        if (error) throw error;\r\n        toast({ title: \"Sucesso\", description: \"Anfitrião adicionado com sucesso!\" });\r\n      }\r\n\r\n      resetForm();\r\n      setIsDialogOpen(false);\r\n      fetchHosts();\r\n    } catch (error) {\r\n      console.error(\"Erro ao salvar anfitrião:\", error);\r\n      toast({ title: \"Erro\", description: \"Não foi possível salvar o anfitrião.\", variant: \"destructive\" });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (host: Host) => {\r\n    setEditingHost(host);\r\n    setFormData({ name: host.name, role: host.role, description: host.description || \"\" });\r\n    // In a real scenario, you would fetch and set the agendas associated with this host\r\n    setSelectedAgendas([]); \r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (!confirm(\"Tem certeza que deseja excluir este anfitrião?\")) return;\r\n    try {\r\n      const { error } = await supabase.from(\"employees\").delete().eq(\"id\", id);\r\n      if (error) throw error;\r\n      toast({ title: \"Sucesso\", description: \"Anfitrião excluído com sucesso!\" });\r\n      fetchHosts();\r\n    } catch (error) {\r\n      console.error(\"Erro ao excluir anfitrião:\", error);\r\n      toast({ title: \"Erro\", description: \"Não foi possível excluir o anfitrião.\", variant: \"destructive\" });\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({ name: \"\", role: \"\", description: \"\" });\r\n    setSelectedAgendas([]);\r\n    setEditingHost(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-foreground\">Anfitriões</h3>\r\n          <p className=\"text-sm text-muted-foreground\">Gerencie os anfitriões e suas agendas associadas.</p>\r\n        </div>\r\n        <Dialog open={isDialogOpen} onOpenChange={(open) => { setIsDialogOpen(open); if (!open) resetForm(); }}>\r\n          <DialogTrigger asChild>\r\n            <Button><Plus className=\"h-4 w-4 mr-2\" />Adicionar Anfitrião</Button>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"max-w-2xl\">\r\n            <DialogHeader>\r\n              <DialogTitle>{editingHost ? \"Editar Anfitrião\" : \"Novo Anfitrião\"}</DialogTitle>\r\n            </DialogHeader>\r\n            <form onSubmit={handleSubmit} className=\"space-y-6 pt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\"><Label htmlFor=\"name\">Nome *</Label><Input id=\"name\" value={formData.name} onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))} required /></div>\r\n                <div className=\"space-y-2\"><Label htmlFor=\"role\">Função *</Label><Input id=\"role\" value={formData.role} onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))} required /></div>\r\n              </div>\r\n              <div className=\"space-y-2\"><Label htmlFor=\"description\">Descrição</Label><Textarea id=\"description\" value={formData.description} onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))} /></div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label>Agendas Associadas</Label>\r\n                <Popover>\r\n                  <PopoverTrigger asChild>\r\n                    <Button variant=\"outline\" className=\"w-full justify-start h-auto min-h-10\">\r\n                      {selectedAgendas.length > 0 ? (\r\n                        <div className=\"flex gap-1 flex-wrap\">\r\n                          {selectedAgendas.map(agenda => (\r\n                            <Badge key={agenda.id} variant=\"secondary\">{agenda.title}</Badge>\r\n                          ))}\r\n                        </div>\r\n                      ) : \"Selecione as agendas\"}\r\n                    </Button>\r\n                  </PopoverTrigger>\r\n                  <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\r\n                    <Command>\r\n                      <CommandInput placeholder=\"Buscar agenda...\" />\r\n                      <CommandList>\r\n                        <CommandEmpty>Nenhuma agenda encontrada.</CommandEmpty>\r\n                        <CommandGroup>\r\n                          {(supabaseAgendas || []).map(agenda => {\r\n                            const mappedAgenda = {\r\n                              id: agenda.id,\r\n                              title: agenda.name,\r\n                              description: agenda.description || '',\r\n                              category: agenda.category || '',\r\n                              host: '',\r\n                              duration: agenda.duration_minutes || 60,\r\n                              breakTime: agenda.buffer_time_minutes || 0\r\n                            };\r\n                            return (\r\n                              <CommandItem\r\n                                key={agenda.id}\r\n                                onSelect={() => {\r\n                                  setSelectedAgendas(current => \r\n                                    current.some(a => a.id === agenda.id)\r\n                                      ? current.filter(a => a.id !== agenda.id)\r\n                                      : [...current, mappedAgenda]\r\n                                  )\r\n                                }}\r\n                              >\r\n                                <div className={`mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary ${selectedAgendas.some(a => a.id === agenda.id) ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"}`}>\r\n                                  <X className=\"h-4 w-4\" />\r\n                                </div>\r\n                                {agenda.name}\r\n                              </CommandItem>\r\n                            );\r\n                           })}\r\n                        </CommandGroup>\r\n                      </CommandList>\r\n                    </Command>\r\n                  </PopoverContent>\r\n                </Popover>\r\n              </div>\r\n\r\n              <DialogFooter><Button type=\"button\" variant=\"outline\" onClick={() => { setIsDialogOpen(false); resetForm(); }}>Cancelar</Button><Button type=\"submit\">{editingHost ? \"Atualizar\" : \"Adicionar\"}</Button></DialogFooter>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {hosts.map((host) => (\r\n          <Card key={host.id} className=\"hover:shadow-md transition-shadow\">\r\n            <CardHeader>\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <User className=\"h-6 w-6 text-primary\" />\r\n                  <div>\r\n                    <CardTitle className=\"text-base\">{host.name}</CardTitle>\r\n                    <Badge variant=\"secondary\" className=\"text-xs mt-1\">{host.role}</Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex gap-1\">\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(host)}><Edit className=\"h-4 w-4\" /></Button>\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete(host.id)}><Trash2 className=\"h-4 w-4\" /></Button>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              {host.description && <p className=\"text-sm text-muted-foreground\">{host.description}</p>}\r\n              <div>\r\n                <div className=\"flex items-center gap-2 mb-2\"><Calendar className=\"h-4 w-4 text-muted-foreground\" /><span className=\"text-sm font-medium\">Agendas:</span></div>\r\n                <div className=\"flex flex-wrap gap-1\">\r\n                  <Badge variant=\"outline\">Consulta de Terapia</Badge>\r\n                  <Badge variant=\"outline\">Aula de Yoga</Badge>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {hosts.length === 0 && (\r\n        <div className=\"text-center py-12\"><User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" /><h3 className=\"text-lg font-medium\">Nenhum anfitrião cadastrado</h3><p className=\"text-sm text-muted-foreground\">Comece adicionando anfitriões à sua equipe.</p></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HostsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\MessagesHybridDesign.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\ProductSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\ProductsTab.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":47,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":47,"endColumn":17,"fix":{"range":[1912,2111],"text":"const filtered = products.filter(product =>\r\n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\r\nimport { Package } from \"lucide-react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useProducts, useCreateProductMutation, useUpdateProductMutation, useDeleteProductMutation } from \"@/hooks/useProducts\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Product } from \"@/types/product\";\r\n\r\n// Import new components\r\nimport ProductForm from \"@/components/knowledge/products/ProductForm\";\r\nimport ProductCard from \"@/components/knowledge/products/ProductCard\";\r\nimport ProductListView from \"@/components/knowledge/products/ProductListView\";\r\nimport ProductsHeader from \"@/components/knowledge/products/ProductsHeader\";\r\n\r\ntype ViewMode = \"grid\" | \"list\";\r\ntype SortBy = \"name\" | \"price\" | \"created_at\";\r\ntype SortOrder = \"asc\" | \"desc\";\r\n\r\nconst ProductsTab = () => {\r\n  const { toast } = useToast();\r\n  \r\n  // Dialog states\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\r\n  \r\n  // View and filtering states\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [viewMode, setViewMode] = useState<ViewMode>(\"grid\");\r\n  const [sortBy, setSortBy] = useState<SortBy>(\"name\");\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>(\"asc\");\r\n\r\n  // Use Supabase hooks\r\n  const { products = [], loading } = useProducts();\r\n  const createProductMutation = useCreateProductMutation();\r\n  const updateProductMutation = useUpdateProductMutation();\r\n  const deleteProductMutation = useDeleteProductMutation();\r\n\r\n  // Filtered and sorted products\r\n  const filteredAndSortedProducts = useMemo(() => {\r\n    let filtered = products.filter(product =>\r\n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    // Sort products\r\n    filtered.sort((a, b) => {\r\n      let aValue: unknown, bValue: unknown;\r\n      \r\n      switch (sortBy) {\r\n        case \"name\":\r\n          aValue = a.name || \"\";\r\n          bValue = b.name || \"\";\r\n          break;\r\n        case \"price\":\r\n          aValue = a.price || 0;\r\n          bValue = b.price || 0;\r\n          break;\r\n        case \"created_at\":\r\n          aValue = new Date(a.created_at || 0);\r\n          bValue = new Date(b.created_at || 0);\r\n          break;\r\n        default:\r\n          return 0;\r\n      }\r\n\r\n      if (sortOrder === \"asc\") {\r\n        return aValue > bValue ? 1 : -1;\r\n      } else {\r\n        return aValue < bValue ? 1 : -1;\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  }, [products, searchTerm, sortBy, sortOrder]);\r\n\r\n  const handleCreateProduct = async (data: unknown) => {\r\n    try {\r\n      await createProductMutation.mutateAsync(data);\r\n      setIsAddDialogOpen(false);\r\n      toast({\r\n        title: \"Produto criado\",\r\n        description: \"O produto foi criado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao criar produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const handleUpdateProduct = async (data: unknown) => {\r\n    try {\r\n      await updateProductMutation.mutateAsync({\r\n        id: editingProduct!.id,\r\n        ...data\r\n      });\r\n      setEditingProduct(null);\r\n      setIsEditDialogOpen(false);\r\n      toast({\r\n        title: \"Produto atualizado\",\r\n        description: \"O produto foi atualizado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao atualizar produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = async (id: string) => {\r\n    try {\r\n      await deleteProductMutation.mutateAsync(id);\r\n      toast({\r\n        title: \"Produto removido\",\r\n        description: \"O produto foi removido com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao remover produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSortChange = (newSortBy: SortBy, newSortOrder: SortOrder) => {\r\n    setSortBy(newSortBy);\r\n    setSortOrder(newSortOrder);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Package className=\"h-5 w-5\" />\r\n            <h2 className=\"text-xl font-semibold\">Produtos/Serviços</h2>\r\n          </div>\r\n          <Skeleton className=\"h-10 w-32\" />\r\n        </div>\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n          {[1, 2, 3].map((i) => (\r\n            <Card key={i}>\r\n              <div className=\"p-4\">\r\n                <Skeleton className=\"h-4 w-3/4 mb-2\" />\r\n                <Skeleton className=\"h-8 w-1/2 mb-2\" />\r\n                <Skeleton className=\"h-4 w-1/3\" />\r\n              </div>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with search and controls */}\r\n      <ProductsHeader\r\n        searchTerm={searchTerm}\r\n        onSearchChange={setSearchTerm}\r\n        onAddProduct={() => setIsAddDialogOpen(true)}\r\n        viewMode={viewMode}\r\n        onViewModeChange={setViewMode}\r\n        sortBy={sortBy}\r\n        sortOrder={sortOrder}\r\n        onSortChange={handleSortChange}\r\n        totalProducts={products.length}\r\n        filteredProducts={filteredAndSortedProducts.length}\r\n      />\r\n\r\n      {/* Products display */}\r\n      {filteredAndSortedProducts.length > 0 ? (\r\n        viewMode === \"grid\" ? (\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n            {filteredAndSortedProducts.map((product) => (\r\n              <ProductCard\r\n                key={product.id}\r\n                product={product}\r\n                onEdit={handleEditProduct}\r\n                onDelete={handleDeleteProduct}\r\n                isDeleting={deleteProductMutation.isPending}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <ProductListView\r\n            products={filteredAndSortedProducts}\r\n            onEdit={handleEditProduct}\r\n            onDelete={handleDeleteProduct}\r\n            isDeleting={deleteProductMutation.isPending}\r\n          />\r\n        )\r\n      ) : (\r\n        <Card>\r\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n            <Package className=\"h-16 w-16 text-muted-foreground mb-4 opacity-20\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {searchTerm ? \"Nenhum produto encontrado\" : \"Nenhum produto cadastrado\"}\r\n            </h3>\r\n            <p className=\"text-muted-foreground text-center mb-4\">\r\n              {searchTerm \r\n                ? \"Tente ajustar sua busca ou limpe os filtros.\"\r\n                : \"Comece criando seu primeiro produto ou serviço.\"\r\n              }\r\n            </p>\r\n            {!searchTerm && (\r\n              <button\r\n                onClick={() => setIsAddDialogOpen(true)}\r\n                className=\"text-primary hover:underline\"\r\n              >\r\n                Criar primeiro produto\r\n              </button>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Add Product Dialog */}\r\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Criar Novo Produto</DialogTitle>\r\n          </DialogHeader>\r\n          <ProductForm\r\n            mode=\"create\"\r\n            onSubmit={handleCreateProduct}\r\n            isLoading={createProductMutation.isPending}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit Product Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Editar Produto</DialogTitle>\r\n          </DialogHeader>\r\n          {editingProduct && (\r\n            <ProductForm\r\n              mode=\"edit\"\r\n              initialData={editingProduct}\r\n              onSubmit={handleUpdateProduct}\r\n              isLoading={updateProductMutation.isPending}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\WebsitesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\AddWebsiteDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\WebsiteCard.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":9,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":9,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Globe, Eye, RefreshCw, Trash2, ExternalLink } from 'lucide-react';\r\nimport { type Website } from '@/hooks/useWebsiteManager';\r\n\r\nexport const getStatusBadge = (status: Website['status']) => {\r\n  switch (status) {\r\n    case 'indexed':\r\n      return (\r\n        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\r\n          Indexado\r\n        </Badge>\r\n      );\r\n    case 'pending':\r\n      return (\r\n        <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\r\n          Pendente\r\n        </Badge>\r\n      );\r\n    case 'indexing':\r\n      return (\r\n        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n          Indexando\r\n        </Badge>\r\n      );\r\n    case 'error':\r\n      return (\r\n        <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800\">\r\n          Erro\r\n        </Badge>\r\n      );\r\n    default:\r\n      return <Badge variant=\"outline\">Desconhecido</Badge>;\r\n  }\r\n};\r\n\r\ninterface WebsiteCardProps {\r\n  website: Website;\r\n  onPreview: (website: Website) => void;\r\n  onRefresh: (id: string) => void;\r\n  onDelete: (id: string) => void;\r\n  isRefreshing?: boolean;\r\n  isDeleting?: boolean;\r\n}\r\n\r\nconst WebsiteCard: React.FC<WebsiteCardProps> = ({\r\n  website,\r\n  onPreview,\r\n  onRefresh,\r\n  onDelete,\r\n  isRefreshing,\r\n  isDeleting,\r\n}) => (\r\n  <Card className=\"hover:shadow-md transition-shadow\">\r\n    <CardHeader className=\"pb-2\">\r\n      <div className=\"flex justify-between items-start\">\r\n        <CardTitle className=\"text-base flex items-center\">\r\n          <Globe className=\"h-4 w-4 mr-2 text-blue-500\" />\r\n          <span className=\"truncate\">{website.title || website.url}</span>\r\n        </CardTitle>\r\n        <div className=\"flex gap-1\">\r\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onPreview(website)}>\r\n            <Eye className=\"h-4 w-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => onRefresh(website.id)}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => onDelete(website.id)}\r\n            className=\"text-red-500 hover:text-red-600\"\r\n            disabled={isDeleting}\r\n          >\r\n            <Trash2 className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </CardHeader>\r\n    <CardContent>\r\n      <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\r\n        {website.description || 'Sem descrição'}\r\n      </p>\r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          {getStatusBadge(website.status)}\r\n          <Badge variant=\"outline\">{website.category || 'Geral'}</Badge>\r\n        </div>\r\n        <div className=\"text-xs text-gray-500\">\r\n          <div>Páginas: {website.pages_indexed || 0}</div>\r\n          <div>\r\n            Última atualização:{' '}\r\n            {website.last_crawled\r\n              ? new Date(website.last_crawled).toLocaleDateString('pt-BR')\r\n              : 'Nunca'}\r\n          </div>\r\n        </div>\r\n        <a\r\n          href={website.url}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"flex items-center text-blue-500 hover:text-blue-600 text-xs\"\r\n        >\r\n          <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n          Visitar site\r\n        </a>\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport const WebsiteCardSkeleton = () => (\r\n  <Card>\r\n    <CardContent className=\"p-4\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <Skeleton className=\"h-5 w-48\" />\r\n        <div className=\"flex gap-2\">\r\n          <Skeleton className=\"h-8 w-8\" />\r\n          <Skeleton className=\"h-8 w-8\" />\r\n          <Skeleton className=\"h-8 w-8\" />\r\n        </div>\r\n      </div>\r\n      <Skeleton className=\"h-4 w-full mb-2\" />\r\n      <div className=\"flex gap-2 mb-2\">\r\n        <Skeleton className=\"h-6 w-16\" />\r\n        <Skeleton className=\"h-6 w-20\" />\r\n      </div>\r\n      <div className=\"flex justify-between text-sm\">\r\n        <Skeleton className=\"h-4 w-24\" />\r\n        <Skeleton className=\"h-4 w-32\" />\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport default WebsiteCard;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\WebsitePreviewDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\SemanticMemoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\DateSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\MemoriesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\MemoryItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Star, StarOff } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface Memory {\r\n  id: number;\r\n  message: string;\r\n  memory_type: string;\r\n  created_at: string;\r\n  importance?: number;\r\n  entities?: Array<{ name: string }>;\r\n  context?: Record<string, any>;\r\n}\r\n\r\ninterface Props {\r\n  memory: Memory;\r\n  onToggleImportance: (id: number, importance: number) => void;\r\n}\r\n\r\nexport function MemoryItem({ memory, onToggleImportance }: Props) {\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        'mb-4 transition-all duration-200',\r\n        memory.importance >= 4 ? 'border-amber-400 dark:border-amber-500' : ''\r\n      )}\r\n    >\r\n      <CardHeader className=\"pb-2\">\r\n        <div className=\"flex justify-between items-start\">\r\n          <div>\r\n            <CardTitle className=\"text-base\">\r\n              {memory.memory_type === 'episodic' ? 'Memória Episódica' : 'Mensagem'}\r\n            </CardTitle>\r\n            <CardDescription className=\"text-xs\">\r\n              {format(new Date(memory.created_at), 'dd MMM yyyy HH:mm:ss', { locale: ptBR })}\r\n            </CardDescription>\r\n          </div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => onToggleImportance(memory.id, memory.importance || 0)}\r\n            title={memory.importance && memory.importance >= 4 ? 'Remover importância' : 'Marcar como importante'}\r\n          >\r\n            {memory.importance && memory.importance >= 4 ? (\r\n              <Star className=\"h-4 w-4 text-amber-500\" />\r\n            ) : (\r\n              <StarOff className=\"h-4 w-4\" />\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <p className=\"text-sm whitespace-pre-wrap\">{memory.message}</p>\r\n        {memory.entities && memory.entities.length > 0 && (\r\n          <div className=\"mt-2\">\r\n            <p className=\"text-xs text-muted-foreground mb-1\">Entidades:</p>\r\n            <div className=\"flex flex-wrap gap-1\">\r\n              {memory.entities.map((entity, idx) => (\r\n                <Badge key={idx} variant=\"outline\" className=\"text-xs\">\r\n                  {entity.name}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n      {memory.context && Object.keys(memory.context).length > 0 && (\r\n        <CardFooter className=\"pt-0\">\r\n          <div className=\"w-full\">\r\n            <p className=\"text-xs text-muted-foreground mb-1\">Contexto:</p>\r\n            <div className=\"text-xs bg-muted p-2 rounded-md\">\r\n              <pre className=\"whitespace-pre-wrap\">\r\n                {JSON.stringify(memory.context, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </CardFooter>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\PeriodSearchTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\TimelineItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarIcon, Clock } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\n\r\nexport interface TimelineEvent {\r\n  id: number;\r\n  date: string;\r\n  description: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface GroupedTimelineDay {\r\n  date: string;\r\n  formattedDate: string;\r\n  events: TimelineEvent[];\r\n}\r\n\r\nexport function TimelineItem({ day }: { day: GroupedTimelineDay }) {\r\n  return (\r\n    <div className=\"mb-8\">\r\n      <div className=\"sticky top-0 bg-background z-10 py-2\">\r\n        <h3 className=\"text-lg font-medium flex items-center\">\r\n          <CalendarIcon className=\"mr-2 h-5 w-5\" />\r\n          {day.formattedDate}\r\n        </h3>\r\n      </div>\r\n      <div className=\"ml-6 border-l pl-6 pt-2\">\r\n        {day.events.map((event) => (\r\n          <div key={`${event.id}-${event.date}`} className=\"mb-4 relative\">\r\n            <div className=\"absolute -left-9 mt-1 w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\r\n              <Clock className=\"h-3 w-3 text-primary-foreground\" />\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <span className=\"text-sm font-medium\">\r\n                {format(new Date(event.date), 'HH:mm', { locale: ptBR })}\r\n              </span>\r\n              <p className=\"text-sm mt-1\">{event.description}</p>\r\n              {event.details && (\r\n                <div className=\"mt-1 text-xs text-muted-foreground bg-muted p-2 rounded-md\">\r\n                  <pre className=\"whitespace-pre-wrap\">\r\n                    {JSON.stringify(event.details, null, 2)}\r\n                  </pre>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\TimelineTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\AverageClosingTimeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\AverageResponseStartCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ChatMetricsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversationChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversionByTimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversionFunnelChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":63,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { PieChart, AlertCircle } from \"lucide-react\";\r\nimport { FunnelChartSettings } from \"./FunnelChartSettings\";\r\nimport { useKanbanStages } from \"@/hooks/useKanbanStages\";\r\n\r\ninterface FunnelData {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color?: string;\r\n}\r\n\r\ninterface ConversionFunnelChartProps {\r\n  data: FunnelData[];\r\n  loading?: boolean;\r\n  onFilterChange?: (\r\n    date: Date,\r\n    stages: string[],\r\n    showNoShowRate: boolean,\r\n  ) => void;\r\n  noShowRate?: number;\r\n}\r\n\r\ntype DateRange = {\r\n  from: Date;\r\n  to: Date;\r\n};\r\n\r\nconst ConversionFunnelChart: React.FC<ConversionFunnelChartProps> = ({\r\n  data,\r\n  loading = false,\r\n  onFilterChange,\r\n  noShowRate,\r\n}) => {\r\n  const [customDate, setCustomDate] = useState<Date>(new Date());\r\n  const [selectedStages, setSelectedStages] = useState<string[]>([]);\r\n  const [selectedPeriod, setSelectedPeriod] = useState<string>(\"last7days\");\r\n  const [dateRange, setDateRange] = useState<DateRange | null>(null);\r\n  const [showNoShowRate, setShowNoShowRate] = useState<boolean>(false);\r\n  const [filteredData, setFilteredData] = useState<FunnelData[]>(data);\r\n  const { stages } = useKanbanStages();\r\n\r\n  // Cores predefinidas para os estágios do funil\r\n  const stageColors = [\r\n    \"#4f46e5\", // indigo-600\r\n    \"#0891b2\", // cyan-600\r\n    \"#059669\", // emerald-600\r\n    \"#65a30d\", // lime-600\r\n    \"#ca8a04\", // yellow-600\r\n    \"#ea580c\", // orange-600\r\n    \"#dc2626\", // red-600\r\n    \"#9333ea\", // purple-600\r\n    \"#2563eb\", // blue-600\r\n    \"#0d9488\", // teal-600\r\n  ];\r\n\r\n  // Inicializa os estágios selecionados com todos os estágios disponíveis\r\n  useEffect(() => {\r\n    if (stages.length > 0 && selectedStages.length === 0) {\r\n      setSelectedStages(stages.map((stage) => stage.title));\r\n    }\r\n  }, [\u0001, selectedStages.length]);\r\n\r\n  // Filtra os dados com base nos estágios selecionados e aplica cores\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      let filtered = data;\r\n\r\n      // Filtra por estágios selecionados\r\n      if (selectedStages.length > 0) {\r\n        filtered = data.filter((item) => selectedStages.includes(item.name));\r\n      }\r\n\r\n      // Aplica cores aos estágios\r\n      filtered = filtered.map((item, index) => ({\r\n        ...item,\r\n        color: item.color || stageColors[index % stageColors.length],\r\n      }));\r\n\r\n      setFilteredData(filtered);\r\n\r\n      // Notifica sobre mudanças nos filtros\r\n      if (onFilterChange) {\r\n        onFilterChange(customDate, selectedStages, showNoShowRate);\r\n      }\r\n    } else {\r\n      setFilteredData([]);\r\n    }\r\n  }, [\u0001, stageColors]);\r\n\r\n  return (\r\n    <Card className=\"dark:bg-gray-800 transition-all duration-300 hover:shadow-lg\">\r\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n        <CardTitle className=\"flex items-center gap-2 text-gray-800 dark:text-white\">\r\n          <PieChart className=\"h-5 w-5 text-indigo-600 dark:text-indigo-400\" />\r\n          Funil de Conversão de Leads\r\n        </CardTitle>\r\n        <FunnelChartSettings\r\n          selectedStages={selectedStages}\r\n          onStagesChange={setSelectedStages}\r\n          showNoShowRate={showNoShowRate}\r\n          onShowNoShowRateChange={setShowNoShowRate}\r\n          showDateFilters={false}\r\n        />\r\n      </CardHeader>\r\n      <CardContent>\r\n        {loading ? (\r\n          <div className=\"h-80 flex items-center justify-center\">\r\n            <div className=\"w-16 h-16 border-4 border-green-400 border-t-transparent rounded-full animate-spin\"></div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"h-80 flex flex-col justify-center space-y-4\">\r\n              {filteredData.length > 0 ? (\r\n                filteredData.map((stage, index) => (\r\n                  <div key={index} className=\"flex flex-col\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                        {stage.name}\r\n                      </span>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <span className=\"text-sm font-bold text-gray-800 dark:text-white\">\r\n                          {stage.value}\r\n                        </span>\r\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          {stage.percentage}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"relative h-8 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700\">\r\n                      <div\r\n                        className=\"h-full rounded-lg transition-all duration-500 ease-in-out\"\r\n                        style={{\r\n                          width: `${stage.percentage}%`,\r\n                          backgroundColor: stage.color,\r\n                        }}\r\n                      ></div>\r\n                    </div>\r\n                    {index < filteredData.length - 1 && (\r\n                      <div className=\"flex justify-center my-1\">\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"24\"\r\n                          height=\"24\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          fill=\"none\"\r\n                          stroke=\"currentColor\"\r\n                          strokeWidth=\"2\"\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          className=\"text-gray-400 dark:text-gray-600\"\r\n                        >\r\n                          <polyline points=\"6 9 12 15 18 9\"></polyline>\r\n                        </svg>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400\">\r\n                  <AlertCircle className=\"h-8 w-8 mb-2\" />\r\n                  <p>Nenhum estágio selecionado</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Legenda de cores */}\r\n            <div className=\"flex flex-wrap gap-3 pt-2\">\r\n              {filteredData.map((stage, index) => (\r\n                <div\r\n                  key={`legend-${index}`}\r\n                  className=\"flex items-center gap-1\"\r\n                >\r\n                  <div\r\n                    className=\"w-3 h-3 rounded-full\"\r\n                    style={{ backgroundColor: stage.color }}\r\n                  ></div>\r\n                  <span className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                    {stage.name}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Taxa de No-Show */}\r\n            {showNoShowRate && noShowRate !== undefined && (\r\n              <div className=\"flex items-center justify-between pt-2 mt-2 border-t border-gray-200 dark:border-gray-700\">\r\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                  Taxa de No-Show:\r\n                </span>\r\n                <span className=\"text-sm font-bold text-red-600 dark:text-red-400\">\r\n                  {noShowRate}%\r\n                </span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ConversionFunnelChart;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\FunnelChartSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\KPICarousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\KanbanStagesFunnelChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsAverageByTimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsByArrivalFunnelChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":41,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { CalendarClock, AlertCircle } from \"lucide-react\";\r\nimport { FunnelChartSettings } from \"./FunnelChartSettings\";\r\nimport { useKanbanStages } from \"@/hooks/useKanbanStages\";\r\n\r\ninterface FunnelStage {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\ninterface LeadsByArrivalFunnelChartProps {\r\n  data: FunnelStage[];\r\n  loading?: boolean;\r\n  onFilterChange?: (\r\n    date: Date,\r\n    stages: string[],\r\n    showNoShowRate: boolean,\r\n  ) => void;\r\n  noShowRate?: number;\r\n}\r\n\r\nconst LeadsByArrivalFunnelChart: React.FC<LeadsByArrivalFunnelChartProps> = ({\r\n  data,\r\n  loading = false,\r\n  onFilterChange,\r\n  noShowRate,\r\n}) => {\r\n  const [customDate, setCustomDate] = useState<Date>(new Date());\r\n  const [selectedStages, setSelectedStages] = useState<string[]>([]);\r\n  const [showNoShowRate, setShowNoShowRate] = useState<boolean>(false);\r\n  const [filteredData, setFilteredData] = useState<FunnelStage[]>(data);\r\n  const { stages } = useKanbanStages();\r\n\r\n  useEffect(() => {\r\n    if (stages.length > 0 && selectedStages.length === 0) {\r\n      setSelectedStages(stages.map((stage) => stage.title));\r\n    }\r\n  }, [\u0001, selectedStages.length]);\r\n\r\n  useEffect(() => {\r\n    if (selectedStages.length > 0) {\r\n      const filtered = data.filter((item) =>\r\n        selectedStages.includes(item.name),\r\n      );\r\n      setFilteredData(filtered);\r\n\r\n      if (onFilterChange) {\r\n        onFilterChange(customDate, selectedStages, showNoShowRate);\r\n      }\r\n    } else {\r\n      setFilteredData(data);\r\n    }\r\n  }, [data, selectedStages, customDate, showNoShowRate, onFilterChange]);\r\n  return (\r\n    <Card className=\"dark:bg-gray-800 transition-all duration-300 hover:shadow-lg\">\r\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n        <CardTitle className=\"flex items-center gap-2 text-gray-800 dark:text-white\">\r\n          <CalendarClock className=\"h-5 w-5 text-amber-600 dark:text-amber-400\" />\r\n          Funil por Data de Chegada\r\n        </CardTitle>\r\n        <FunnelChartSettings\r\n          selectedStages={selectedStages}\r\n          onStagesChange={setSelectedStages}\r\n          showNoShowRate={showNoShowRate}\r\n          onShowNoShowRateChange={setShowNoShowRate}\r\n          showDateFilters={false}\r\n        />\r\n      </CardHeader>\r\n      <CardContent>\r\n        {loading ? (\r\n          <div className=\"h-80 flex items-center justify-center\">\r\n            <div className=\"w-16 h-16 border-4 border-amber-400 border-t-transparent rounded-full animate-spin\"></div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"h-80 flex flex-col justify-center space-y-4\">\r\n              {filteredData.length > 0 ? (\r\n                filteredData.map((stage, index) => (\r\n                  <div key={index} className=\"flex flex-col\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                        {stage.name}\r\n                      </span>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <span className=\"text-sm font-bold text-gray-800 dark:text-white\">\r\n                          {stage.value}\r\n                        </span>\r\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          {stage.percentage}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"relative h-8 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700\">\r\n                      <div\r\n                        className=\"h-full rounded-lg transition-all duration-500 ease-in-out\"\r\n                        style={{\r\n                          width: `${stage.percentage}%`,\r\n                          backgroundColor: stage.color,\r\n                        }}\r\n                      ></div>\r\n                    </div>\r\n                    {index < filteredData.length - 1 && (\r\n                      <div className=\"flex justify-center my-1\">\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"24\"\r\n                          height=\"24\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          fill=\"none\"\r\n                          stroke=\"currentColor\"\r\n                          strokeWidth=\"2\"\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          className=\"text-gray-400 dark:text-gray-600\"\r\n                        >\r\n                          <polyline points=\"6 9 12 15 18 9\"></polyline>\r\n                        </svg>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400\">\r\n                  <AlertCircle className=\"h-8 w-8 mb-2\" />\r\n                  <p>Nenhum estágio selecionado</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Legenda de cores */}\r\n            <div className=\"flex flex-wrap gap-3 pt-2\">\r\n              {filteredData.map((stage, index) => (\r\n                <div\r\n                  key={`legend-${index}`}\r\n                  className=\"flex items-center gap-1\"\r\n                >\r\n                  <div\r\n                    className=\"w-3 h-3 rounded-full\"\r\n                    style={{ backgroundColor: stage.color }}\r\n                  ></div>\r\n                  <span className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                    {stage.name}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Taxa de No-Show */}\r\n            {showNoShowRate && noShowRate !== undefined && (\r\n              <div className=\"flex items-center justify-between pt-2 mt-2 border-t border-gray-200 dark:border-gray-700\">\r\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                  Taxa de No-Show:\r\n                </span>\r\n                <span className=\"text-sm font-bold text-red-600 dark:text-red-400\">\r\n                  {noShowRate}%\r\n                </span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default LeadsByArrivalFunnelChart;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsBySourceChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsGrowthChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\MetricsFiltersSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\MetricsFiltersSimplified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\NegotiatedValueCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\NegotiatingValueCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\RecentClientsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ResponseTimeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\SecondaryResponseRateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMAdvancedMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignRanking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMConfigPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMDeviceDistributionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMDeviceFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMMetricsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMSourceChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMTimeMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMTrackingTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\AdManagerSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\ConversationsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\MetricsFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\NewLeadsOverTimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\DetailedMetricsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\KPISection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\MetricsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\PerformanceChartsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[976,979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[976,979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport ConversationChart from '../ConversationChart';\r\nimport ConversionFunnelChart from '../ConversionFunnelChart';\r\nimport ConversionByTimeChart from '../ConversionByTimeChart';\r\nimport LeadsAverageByTimeChart from '../LeadsAverageByTimeChart';\r\nimport KanbanStagesFunnelChart from '../KanbanStagesFunnelChart';\r\nimport SectionHeader from './SectionHeader';\r\n\r\ninterface PerformanceChartsSectionProps {\r\n  conversationData: unknown[];\r\n  conversionFunnelData: unknown[];\r\n  conversionByTimeData: unknown[];\r\n  leadsAverageByTimeData: unknown[];\r\n  noShowRate: number;\r\n  loading: boolean;\r\n  transformedDataLoading: boolean;\r\n}\r\n\r\nconst PerformanceChartsSection: React.FC<PerformanceChartsSectionProps> = ({\r\n  conversationData,\r\n  conversionFunnelData,\r\n  conversionByTimeData,\r\n  leadsAverageByTimeData,\r\n  noShowRate,\r\n  loading,\r\n  transformedDataLoading,\r\n}) => {\r\n  const handleFilterChange = (date: unknown, stages: unknown, showNoShow: any) => {\r\n    console.log(\"Filtro aplicado no Funil de Conversão:\", {\r\n      date,\r\n      stages,\r\n      showNoShow,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <SectionHeader \r\n        title=\"📈 Análise de Performance\" \r\n        borderColor=\"border-yellow-200 dark:border-yellow-700\" \r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <ConversationChart\r\n          data={conversationData}\r\n          loading={loading}\r\n        />\r\n        <ConversionFunnelChart\r\n          data={conversionFunnelData}\r\n          loading={transformedDataLoading}\r\n          noShowRate={noShowRate}\r\n          onFilterChange={handleFilterChange}\r\n        />\r\n      </div>\r\n\r\n      {/* Funil de Estágios do Kanban - Agora com hook correto */}\r\n      <div className=\"w-full\">\r\n        <KanbanStagesFunnelChart />\r\n      </div>\r\n\r\n      <ConversionByTimeChart\r\n        data={conversionByTimeData}\r\n        loading={loading}\r\n      />\r\n\r\n      <LeadsAverageByTimeChart\r\n        data={leadsAverageByTimeData}\r\n        loading={loading}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceChartsSection;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\SectionHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\TimeMetricsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\PaymentTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\ProfileInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\SecurityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AgendaSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AppointmentDateTimeSelection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AppointmentsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarGridHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarHeaderBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarView.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'weeks' is never reassigned. Use 'const' instead.","line":99,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":99,"endColumn":24,"fix":{"range":[2714,2739],"text":"const weeks: Date[][] = [];"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo } from \"react\";\r\nimport {\r\n  startOfMonth,\r\n  endOfMonth,\r\n  eachDayOfInterval,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  startOfDay,\r\n  endOfDay,\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  isSameDay,\r\n  isSameMonth,\r\n  parseISO,\r\n} from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { CalendarEvent } from \"@/types/calendar\";\r\nimport { CalendarGridHeader } from \"./CalendarGridHeader\";\r\nimport { CalendarWeek } from \"./CalendarWeek\";\r\nimport { DayEventsView } from \"./DayEventsView\";\r\nimport { CalendarHeaderBar } from \"./CalendarHeaderBar\";\r\nimport { groupEventsByDay } from \"@/utils/eventUtils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\n\r\ninterface CalendarViewProps {\r\n  selectedDate: Date;\r\n  onDateChange: (date: Date) => void;\r\n  events: CalendarEvent[];\r\n  currentMonth: Date;\r\n  onMonthChange: (month: Date) => void;\r\n  view: \"mes\" | \"semana\" | \"dia\" | \"lista\";\r\n  onEventClick?: (event: CalendarEvent) => void;\r\n  onPeriodChange?: (start: Date, end: Date) => void;\r\n  goToPrevious: () => void;\r\n  goToNext: () => void;\r\n}\r\n\r\nexport function CalendarView({\r\n  selectedDate,\r\n  onDateChange,\r\n  events,\r\n  currentMonth,\r\n  onMonthChange,\r\n  view,\r\n  onEventClick,\r\n  onPeriodChange,\r\n  goToPrevious,\r\n  goToNext,\r\n}: CalendarViewProps) {\r\n  // Determinar o período de exibição com useMemo para otimização\r\n  const displayPeriod = useMemo(() => {\r\n    switch (view) {\r\n      case \"dia\":\r\n        return {\r\n          start: startOfDay(selectedDate),\r\n          end: endOfDay(selectedDate),\r\n        };\r\n      case \"semana\": {\r\n        const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd };\r\n      }\r\n      case \"mes\":\r\n      default:\r\n        return {\r\n          start: startOfMonth(currentMonth),\r\n          end: endOfMonth(currentMonth),\r\n        };\r\n    }\r\n  }, [view, selectedDate, currentMonth]);\r\n\r\n  React.useEffect(() => {\r\n    if (onPeriodChange) {\r\n      onPeriodChange(displayPeriod.start, displayPeriod.end);\r\n    }\r\n  }, [onPeriodChange, displayPeriod.start, displayPeriod.end]);\r\n\r\n  const days = eachDayOfInterval({\r\n    start: displayPeriod.start,\r\n    end: displayPeriod.end,\r\n  });\r\n\r\n  const handleEventClick = useCallback(\r\n    (event: CalendarEvent, e: React.MouseEvent) => {\r\n      e.stopPropagation();\r\n      if (onEventClick) {\r\n        onEventClick(event);\r\n      }\r\n    },\r\n    [onEventClick],\r\n  );\r\n\r\n  const isMonthOrWeekMode = view === \"mes\" || view === \"semana\";\r\n\r\n  const buildWeeks = () => {\r\n    const daysArr = [...days];\r\n    let weeks: Date[][] = [];\r\n    \r\n    // For month view, we need to include days from previous/next months to fill the grid\r\n    if (view === \"mes\") {\r\n      const monthStart = startOfMonth(currentMonth);\r\n      const monthEnd = endOfMonth(currentMonth);\r\n      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 });\r\n      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });\r\n      \r\n      const allDays = eachDayOfInterval({ start: startDate, end: endDate });\r\n      for (let i = 0; i < allDays.length; i += 7) {\r\n        weeks.push(allDays.slice(i, i + 7));\r\n      }\r\n    } else {\r\n      // For week view, just use the days array\r\n      for (let i = 0; i < daysArr.length; i += 7) {\r\n        weeks.push(daysArr.slice(i, i + 7));\r\n      }\r\n    }\r\n    \r\n    return weeks;\r\n  };\r\n\r\n  const weeks = buildWeeks();\r\n\r\n  const eventsByDay = useMemo(() => groupEventsByDay(events), [events]);\r\n\r\n  const getCalendarTitle = () => {\r\n    switch (view) {\r\n      case \"dia\":\r\n        return format(selectedDate, \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR });\r\n      case \"semana\": {\r\n        const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        return `${format(weekStart, \"dd/MM\", {\r\n          locale: ptBR,\r\n        })} a ${format(weekEnd, \"dd/MM\", { locale: ptBR })}`;\r\n      }\r\n      case \"lista\":\r\n        return \"Todos os Agendamentos\";\r\n      case \"mes\":\r\n      default:\r\n        return format(currentMonth, \"MMMM 'de' yyyy\", { locale: ptBR });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full bg-[#1e2330] dark:bg-[#1e2330] border rounded-xl shadow-sm overflow-hidden animate-fade-in text-white\">\r\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\r\n        <h2 className=\"text-lg font-semibold text-white\">\r\n          {getCalendarTitle()}\r\n        </h2>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\" onClick={goToPrevious} className=\"text-white border-gray-600 hover:bg-gray-700\">\r\n            <ChevronLeft className=\"h-4 w-4\" />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={goToNext} className=\"text-white border-gray-600 hover:bg-gray-700\">\r\n            <ChevronRight className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Grid principal */}\r\n      <div className=\"px-2 pb-2 pt-3 animate-fade-in flex-1 min-h-0\">\r\n        {isMonthOrWeekMode && <CalendarGridHeader />}\r\n\r\n        {isMonthOrWeekMode ? (\r\n          <div className=\"flex flex-col gap-0 h-full min-h-0\">\r\n            {weeks.map((week, weekIdx) => (\r\n              <CalendarWeek\r\n                key={weekIdx}\r\n                week={week}\r\n                currentMonth={currentMonth}\r\n                selectedDate={selectedDate}\r\n                eventsByDay={eventsByDay}\r\n                onDateChange={onDateChange}\r\n                onEventClick={handleEventClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : view === \"dia\" ? (\r\n          <DayEventsView\r\n            selectedDate={selectedDate}\r\n            dayEvents={\r\n              eventsByDay.get(startOfDay(selectedDate).toISOString()) || []\r\n            }\r\n            onEventClick={handleEventClick}\r\n          />\r\n        ) : (\r\n          // Lista de todos os eventos\r\n          <div className=\"h-full overflow-y-auto p-4\">\r\n            <div className=\"space-y-2\">\r\n              {events.length > 0 ? (\r\n                events.map((event) => (\r\n                  <div\r\n                    key={event.id}\r\n                    onClick={(e) => handleEventClick(event, e)}\r\n                    className=\"flex items-center p-3 bg-gray-800 border border-gray-700 rounded-lg hover:bg-gray-700 cursor-pointer\"\r\n                  >\r\n                    <div className=\"w-16 text-center\">\r\n                      <div className=\"text-sm font-medium\">\r\n                        {format(new Date(event.start), \"dd/MM\", { locale: ptBR })}\r\n                      </div>\r\n                      <div className=\"text-xs text-gray-400\">\r\n                        {format(new Date(event.start), \"HH:mm\")}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ml-4 flex-1\">\r\n                      <div className=\"font-medium\">{event.summary}</div>\r\n                      <div className=\"text-sm text-gray-400\">\r\n                        {event.attendees?.[0]?.email || \"Sem participante\"}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <span\r\n                        className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                          event.status === \"confirmed\"\r\n                            ? \"bg-green-900/30 text-green-300\"\r\n                            : event.status === \"tentative\"\r\n                            ? \"bg-yellow-900/30 text-yellow-300\"\r\n                            : \"bg-red-900/30 text-red-300\"\r\n                        }`}\r\n                      >\r\n                        {event.status === \"confirmed\"\r\n                          ? \"Confirmado\"\r\n                          : event.status === \"tentative\"\r\n                          ? \"Pendente\"\r\n                          : \"Cancelado\"}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"text-center py-8 text-gray-400\">\r\n                  Nenhum evento encontrado\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarViewSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface CalendarViewSwitcherProps {\r\n  view: \"mes\" | \"semana\" | \"dia\" | \"agenda\";\r\n  onChange: (view: \"mes\" | \"semana\" | \"dia\" | \"agenda\") => void;\r\n}\r\n\r\nexport const CalendarViewSwitcher: React.FC<CalendarViewSwitcherProps> = ({\r\n  view,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-1 bg-black/10 dark:bg-white/10 rounded-lg p-1\">\r\n      {[\r\n        { key: \"mes\", label: \"Mês\" },\r\n        { key: \"semana\", label: \"Semana\" },\r\n        { key: \"dia\", label: \"Dia\" },\r\n        { key: \"lista\", label: \"Lista\" },\r\n      ].map((item) => (\r\n        <Button\r\n          key={item.key}\r\n          size=\"sm\"\r\n          variant={view === item.key ? \"default\" : \"ghost\"}\r\n          className={\r\n            view === item.key\r\n              ? \"bg-white text-blue-700 shadow-md h-7 px-2 text-xs\"\r\n              : \"text-white hover:bg-white/20 h-7 px-2 text-xs\"\r\n          }\r\n          onClick={() => onChange(item.key as any)}\r\n        >\r\n          {item.label}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarWeek.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\DayCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\DayEventsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1220,1223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1220,1223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from \"react\";\r\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\r\nimport { isSameDay, parseISO, format } from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { Calendar, Clock } from \"lucide-react\";\r\n\r\ninterface EventSidebarProps {\r\n  selectedDate: Date | undefined;\r\n  events: CalendarEvent[];\r\n  onEventClick: (event: CalendarEvent) => void;\r\n}\r\n\r\nconst salespeople = [\r\n  { id: \"joao\", name: \"João\", color: \"#4f46e5\" },\r\n  { id: \"maria\", name: \"Maria\", color: \"#10b981\" },\r\n  { id: \"pedro\", name: \"Pedro\", color: \"#f59e0b\" },\r\n  { id: \"ana\", name: \"Ana\", color: \"#ef4444\" },\r\n  { id: \"arthur\", name: \"Arthur\", color: \"#8b5cf6\" },\r\n];\r\n\r\nexport function EventSidebar({\r\n  selectedDate,\r\n  events,\r\n  onEventClick,\r\n}: EventSidebarProps) {\r\n  const eventsForSelectedDay = useMemo(() => {\r\n    if (!selectedDate) return [];\r\n    return events.filter((event) => {\r\n      try {\r\n        const eventDate = parseISO(event.start as unknown as string);\r\n        return isSameDay(eventDate, selectedDate);\r\n      } catch {\r\n        return false;\r\n      }\r\n    });\r\n  }, [events, selectedDate]);\r\n\r\n  const eventsBySalesperson = useMemo(() => {\r\n    const grouped: Record<string, any[]> = {};\r\n    eventsForSelectedDay.forEach((event) => {\r\n      let salesperson = \"Não atribuído\";\r\n      let color = \"#6b7280\";\r\n\r\n      const matchingSalesperson = salespeople.find(\r\n        (sp) => sp.name.toLowerCase() === event.hostName?.toLowerCase(),\r\n      );\r\n\r\n      if (matchingSalesperson) {\r\n        salesperson = matchingSalesperson.name;\r\n        color = matchingSalesperson.color;\r\n      }\r\n\r\n      if (!grouped[salesperson]) {\r\n        grouped[salesperson] = [];\r\n      }\r\n      grouped[salesperson].push({\r\n        ...event,\r\n        time: format(parseISO(event.start as unknown as string), \"HH:mm\"),\r\n        color,\r\n      });\r\n    });\r\n    return grouped;\r\n  }, [eventsForSelectedDay]);\r\n\r\n  const handleEventCardClick = (event: CalendarEvent) => {\r\n    onEventClick(event);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full md:w-80 flex-shrink-0 border-t md:border-t-0 md:border-l border-gray-700\">\r\n      <div className=\"bg-gray-800 h-full p-4\">\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex items-center mb-1\">\r\n            <Clock className=\"h-5 w-5 text-purple-400 mr-2\" />\r\n            <h3 className=\"text-lg font-semibold text-white\">\r\n              {selectedDate &&\r\n                format(selectedDate, \"dd 'de' MMMM 'de' yyyy\", {\r\n                  locale: ptBR,\r\n                })}\r\n            </h3>\r\n          </div>\r\n          <p className=\"text-gray-400 text-sm\">\r\n            {selectedDate && format(selectedDate, \"EEEE\", { locale: ptBR })}\r\n          </p>\r\n        </div>\r\n\r\n        {Object.keys(eventsBySalesperson).length === 0 ? (\r\n          <div className=\"flex flex-col items-center justify-center py-12\">\r\n            <div className=\"w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center mb-4\">\r\n              <Calendar className=\"h-8 w-8 text-gray-500\" />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-white mb-2\">Dia livre</h3>\r\n            <p className=\"text-gray-400 text-sm text-center\">\r\n              Nenhum Vendedor tem Compromissos para esse dia.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {Object.entries(eventsBySalesperson).map(\r\n              ([salesperson, salespersonEvents]) => (\r\n                <div key={salesperson} className=\"space-y-2\">\r\n                  <h4 className=\"text-sm font-medium text-white flex items-center\">\r\n                    <div\r\n                      className=\"w-3 h-3 rounded-full mr-2\"\r\n                      style={{ backgroundColor: salespersonEvents[0].color }}\r\n                    />\r\n                    {salesperson}\r\n                  </h4>\r\n                  <div className=\"space-y-2\">\r\n                    {salespersonEvents.map((event) => (\r\n                      <div\r\n                        key={event.id}\r\n                        className=\"bg-gray-700 rounded-md p-3 hover:bg-gray-600 cursor-pointer\"\r\n                        onClick={() => handleEventCardClick(event)}\r\n                      >\r\n                        <div className=\"flex justify-between items-start\">\r\n                          <div>\r\n                            <h5 className=\"font-medium text-white\">\r\n                              {event.title}\r\n                            </h5>\r\n                            <p className=\"text-gray-400 text-sm\">\r\n                              {event.time}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ),\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventSidebar;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\NewAppointmentFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleDialogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleFilters.tsx","messages":[{"ruleId":"no-empty-pattern","severity":2,"message":"Unexpected empty object pattern.","line":15,"column":33,"nodeType":"ObjectPattern","messageId":"unexpected","endLine":16,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\ninterface ScheduleFiltersProps {\n  viewMode: \"calendar\" | \"list\";\n  onViewModeChange: (mode: \"calendar\" | \"list\") => void;\n  statusFilter: string;\n  onStatusFilterChange: (status: string) => void;\n  calendarFilter: string;\n  onCalendarFilterChange: (calendar: string) => void;\n  hostFilter: string;\n  onHostFilterChange: (host: string) => void;\n  onAddEvent: () => void;\n}\n\nexport function ScheduleFilters({} // mantendo props para compatibilidade, mas não usados mais\n: ScheduleFiltersProps) {\n  // Layout vazio (sem filtros/seletores)\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleMetricsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\AddPaymentMethodDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\CancelSubscriptionDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\ChangePlanDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\InvoicesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\PaymentMethodsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":67,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":67,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm hover:shadow\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        success:\n          \"bg-green-500 text-white hover:bg-green-600 shadow-sm shadow-green-200 dark:shadow-green-900/30\",\n        warning:\n          \"bg-amber-500 text-white hover:bg-amber-600 shadow-sm shadow-amber-200 dark:shadow-amber-900/30\",\n        danger:\n          \"bg-red-500 text-white hover:bg-red-600 shadow-sm shadow-red-200 dark:shadow-red-900/30\",\n        control: \"bg-gradient-to-r hover:shadow-md transition-all duration-200\",\n        refresh:\n          \"bg-blue-500 text-white hover:bg-blue-600 shadow-sm shadow-blue-200 dark:shadow-blue-900/30\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-8 rounded-md px-2.5 text-xs\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-8 w-8\",\n        xs: \"h-6 rounded-md px-2 text-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\memoized-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,161],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\virtualized-list.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":104,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":104,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useCallback } from 'react';\r\nimport { FixedSizeList as List, VariableSizeList } from 'react-window';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface VirtualizedListProps<T> {\r\n  items: T[];\r\n  height: number;\r\n  itemHeight: number | ((index: number) => number);\r\n  renderItem: (item: T, index: number, style: React.CSSProperties) => React.ReactNode;\r\n  className?: string;\r\n  onScroll?: (props: unknown) => void;\r\n  overscanCount?: number;\r\n  variableSize?: boolean;\r\n}\r\n\r\n/**\r\n * Componente de lista virtualizada para renderização eficiente de grandes datasets\r\n * Utiliza react-window para otimização de performance\r\n */\r\nexport function VirtualizedList<T>({\r\n  items,\r\n  height,\r\n  itemHeight,\r\n  renderItem,\r\n  className,\r\n  onScroll,\r\n  overscanCount = 5,\r\n  variableSize = false,\r\n}: VirtualizedListProps<T>) {\r\n  \r\n  // Memoizar a função de renderização para evitar re-criações\r\n  const Item = useCallback(({ index, style }: { index: number; style: React.CSSProperties }) => {\r\n    const item = items[index];\r\n    if (!item) return null;\r\n    \r\n    return (\r\n      <div style={style}>\r\n        {renderItem(item, index, style)}\r\n      </div>\r\n    );\r\n  }, [items, renderItem]);\r\n\r\n  // Memoizar o componente de lista\r\n  const ListComponent = useMemo(() => {\r\n    const listProps = {\r\n      height,\r\n      width: \"100%\",\r\n      itemCount: items.length,\r\n      onScroll,\r\n      overscanCount,\r\n      className: cn('virtualized-list', className),\r\n    };\r\n\r\n    if (variableSize && typeof itemHeight === 'function') {\r\n      return (\r\n        <VariableSizeList\r\n          {...listProps}\r\n          itemSize={itemHeight}\r\n        >\r\n          {Item}\r\n        </VariableSizeList>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <List\r\n        {...listProps}\r\n        itemSize={typeof itemHeight === 'number' ? itemHeight : 50}\r\n      >\r\n        {Item}\r\n      </List>\r\n    );\r\n  }, [\r\n    height,\r\n    items.length,\r\n    itemHeight,\r\n    onScroll,\r\n    overscanCount,\r\n    className,\r\n    variableSize,\r\n    Item\r\n  ]);\r\n\r\n  if (items.length === 0) {\r\n    return (\r\n      <div \r\n        className={cn(\r\n          'flex items-center justify-center text-muted-foreground',\r\n          className\r\n        )}\r\n        style={{ height }}\r\n      >\r\n        Nenhum item encontrado\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return ListComponent;\r\n}\r\n\r\n/**\r\n * Hook para calcular altura dinâmica de itens\r\n */\r\nexport const useVariableItemHeight = <T,>(\r\n  items: T[],\r\n  getItemHeight: (item: T, index: number) => number,\r\n  defaultHeight: number = 50\r\n) => {\r\n  return useCallback((index: number) => {\r\n    const item = items[index];\r\n    if (!item) return defaultHeight;\r\n    return getItemHeight(item, index);\r\n  }, [items, getItemHeight, defaultHeight]);\r\n};\r\n\r\n/**\r\n * Componente específico para tabelas virtualizadas\r\n */\r\ninterface VirtualizedTableProps<T> {\r\n  data: T[];\r\n  columns: Array<{\r\n    key: keyof T;\r\n    header: string;\r\n    width?: number;\r\n    render?: (item: T, index: number) => React.ReactNode;\r\n  }>;\r\n  rowHeight?: number;\r\n  height?: number;\r\n  className?: string;\r\n  onRowClick?: (item: T, index: number) => void;\r\n}\r\n\r\nexport function VirtualizedTable<T>({\r\n  data,\r\n  columns,\r\n  rowHeight = 60,\r\n  height = 400,\r\n  className,\r\n  onRowClick,\r\n}: VirtualizedTableProps<T>) {\r\n  \r\n  const renderRow = useCallback((item: T, index: number, style: React.CSSProperties) => (\r\n    <div \r\n      style={style}\r\n      className={cn(\r\n        'flex items-center border-b border-border hover:bg-muted/50',\r\n        onRowClick && 'cursor-pointer',\r\n        className\r\n      )}\r\n      onClick={() => onRowClick?.(item, index)}\r\n    >\r\n      {columns.map((column, colIndex) => (\r\n        <div \r\n          key={String(column.key)}\r\n          className=\"px-4 py-2 flex-1\"\r\n          style={{ \r\n            width: column.width || `${100 / columns.length}%`,\r\n            minWidth: column.width || 'auto'\r\n          }}\r\n        >\r\n          {column.render ? column.render(item, index) : String(item[column.key] || '')}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ), [columns, onRowClick, className]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center border-b-2 border-border bg-muted/50 font-semibold\">\r\n        {columns.map((column) => (\r\n          <div \r\n            key={String(column.key)}\r\n            className=\"px-4 py-3 flex-1\"\r\n            style={{ \r\n              width: column.width || `${100 / columns.length}%`,\r\n              minWidth: column.width || 'auto'\r\n            }}\r\n          >\r\n            {column.header}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Virtualized Body */}\r\n      <VirtualizedList\r\n        items={data}\r\n        height={height}\r\n        itemHeight={rowHeight}\r\n        renderItem={renderRow}\r\n        className=\"border border-t-0\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Componente de loading skeleton para listas virtualizadas\r\n */\r\ninterface VirtualizedSkeletonProps {\r\n  height: number;\r\n  itemHeight: number;\r\n  itemCount?: number;\r\n}\r\n\r\nexport const VirtualizedSkeleton = React.memo<VirtualizedSkeletonProps>(({\r\n  height,\r\n  itemHeight,\r\n  itemCount = 10,\r\n}) => {\r\n  const skeletonItems = useMemo(() => \r\n    Array.from({ length: itemCount }, (_, i) => i), \r\n    [itemCount]\r\n  );\r\n\r\n  const renderSkeletonItem = useCallback((item: number, index: number) => (\r\n    <div className=\"flex items-center space-x-4 p-4 animate-pulse\">\r\n      <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n      <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n    </div>\r\n  ), []);\r\n\r\n  return (\r\n    <VirtualizedList\r\n      items={skeletonItems}\r\n      height={height}\r\n      itemHeight={itemHeight}\r\n      renderItem={renderSkeletonItem}\r\n    />\r\n  );\r\n});\r\n\r\nVirtualizedSkeleton.displayName = 'VirtualizedSkeleton';","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\config\\columnConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Contact } from \"@/types/client\";\r\n\r\n// Definição de tipos para configuração de colunas\r\nexport interface ColumnConfig {\r\n  id: string;\r\n  label: string;\r\n  accessor: keyof Contact | ((contact: Contact) => any);\r\n  isVisible: boolean;\r\n  priority: number; // Quanto menor, mais importante (usado para responsividade)\r\n  minWidth?: number;\r\n  maxWidth?: number;\r\n  renderCell?: (contact: Contact) => React.ReactNode;\r\n}\r\n\r\n// Configuração padrão das colunas\r\nexport const defaultColumnConfig: ColumnConfig[] = [\r\n  {\r\n    id: \"name\",\r\n    label: \"Nome\",\r\n    accessor: \"name\",\r\n    isVisible: true,\r\n    priority: 1,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"contact\",\r\n    label: \"Contato\",\r\n    accessor: (contact) => ({ phone: contact.phone, email: contact.email }),\r\n    isVisible: true,\r\n    priority: 2,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"clientName\",\r\n    label: \"Cliente/Empresa\",\r\n    accessor: \"clientName\",\r\n    isVisible: true,\r\n    priority: 3,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"tags\",\r\n    label: \"Tags\",\r\n    accessor: \"tags\",\r\n    isVisible: true,\r\n    priority: 4,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"consultationStage\",\r\n    label: \"Estágio\",\r\n    accessor: \"consultationStage\",\r\n    isVisible: true,\r\n    priority: 5,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    accessor: \"status\",\r\n    isVisible: true,\r\n    priority: 3,\r\n    minWidth: 100,\r\n  },\r\n  {\r\n    id: \"kanbanStage\",\r\n    label: \"Segmento\",\r\n    accessor: \"kanbanStage\",\r\n    isVisible: true,\r\n    priority: 4,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"lastMessage\",\r\n    label: \"Última Mensagem\",\r\n    accessor: (contact) => ({\r\n      message: contact.lastMessage,\r\n      time: contact.lastMessageTime || contact.lastContact,\r\n      unreadCount: contact.unreadCount,\r\n    }),\r\n    isVisible: true,\r\n    priority: 6,\r\n    minWidth: 200,\r\n  },\r\n  {\r\n    id: \"budget\",\r\n    label: \"Orçamento\",\r\n    accessor: \"budget\",\r\n    isVisible: false,\r\n    priority: 7,\r\n    minWidth: 100,\r\n  },\r\n  {\r\n    id: \"clientObjective\",\r\n    label: \"Objetivo\",\r\n    accessor: \"clientObjective\",\r\n    isVisible: false,\r\n    priority: 8,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"responsibleUser\",\r\n    label: \"Responsável\",\r\n    accessor: \"responsibleUser\",\r\n    isVisible: false,\r\n    priority: 7,\r\n    minWidth: 120,\r\n  },\r\n];\r\n\r\n// Função para obter configuração de colunas (com possibilidade de carregar do localStorage)\r\nexport const getColumnConfig = (): ColumnConfig[] => {\r\n  try {\r\n    const savedConfig = localStorage.getItem(\"clientTableColumnConfig\");\r\n    if (savedConfig) {\r\n      return JSON.parse(savedConfig);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erro ao carregar configuração de colunas:\", error);\r\n  }\r\n  return defaultColumnConfig;\r\n};\r\n\r\n// Função para salvar configuração de colunas\r\nexport const saveColumnConfig = (config: ColumnConfig[]): void => {\r\n  try {\r\n    localStorage.setItem(\"clientTableColumnConfig\", JSON.stringify(config));\r\n  } catch (error) {\r\n    console.error(\"Erro ao salvar configuração de colunas:\", error);\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\constants\\eventFormConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":71,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":71,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  isLoading: boolean;\r\n  userProfile?: unknown; // Add userProfile for compatibility\r\n  isAdmin?: boolean; // Add isAdmin for compatibility\r\n  signIn: (email: string, password: string) => Promise<{ error?: unknown }>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Set up auth state listener FIRST\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      (event, session) => {\r\n        setSession(session);\r\n        setUser(session?.user ?? null);\r\n        setIsLoading(false);\r\n      }\r\n    );\r\n\r\n    // THEN check for existing session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n      return { error };\r\n    } catch (error) {\r\n      return { error };\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    isLoading,\r\n    userProfile: null, // Mock value for now\r\n    isAdmin: false, // Mock value for now\r\n    signIn,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\SupabaseContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface SupabaseContextType {\r\n  supabase: typeof supabase;\r\n}\r\n\r\nconst SupabaseContext = createContext<SupabaseContextType | undefined>(undefined);\r\n\r\nexport const SupabaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  return (\r\n    <SupabaseContext.Provider value={{ supabase }}>\r\n      {children}\r\n    </SupabaseContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSupabase = () => {\r\n  const context = useContext(SupabaseContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSupabase must be used within a SupabaseProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":66,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":66,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"petparadise-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme,\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\ThemeSettingsContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":66,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":66,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from \"react\";\n\nexport interface ThemeSettings {\n  brandName: string;\n  logo: string | null;\n  primaryColor: string;\n  secondaryColor: string;\n  accentColor: string;\n}\n\ntype ThemeSettingsContextType = {\n  settings: ThemeSettings;\n  updateSettings: (newSettings: Partial<ThemeSettings>) => void;\n  resetSettings: () => void;\n};\n\nconst defaultSettings: ThemeSettings = {\n  brandName: \"Valore Náutico\",\n  logo: null,\n  primaryColor: \"#1e40af\",\n  secondaryColor: \"#f59e0b\",\n  accentColor: \"#1e3a8a\",\n};\n\nconst ThemeSettingsContext = createContext<\n  ThemeSettingsContextType | undefined\n>(undefined);\n\nexport function ThemeSettingsProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [settings, setSettings] = useState<ThemeSettings>(() => {\n    const saved = localStorage.getItem(\"valore-theme-settings\");\n    return saved ? JSON.parse(saved) : defaultSettings;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"valore-theme-settings\", JSON.stringify(settings));\n\n    // Apply theme colors to CSS variables\n    const root = document.documentElement;\n    root.style.setProperty(\"--valore-blue\", settings.primaryColor);\n    root.style.setProperty(\"--valore-gold\", settings.secondaryColor);\n    root.style.setProperty(\"--valore-navy\", settings.accentColor);\n  }, [settings]);\n\n  const updateSettings = (newSettings: Partial<ThemeSettings>) => {\n    setSettings((prev) => ({ ...prev, ...newSettings }));\n  };\n\n  const resetSettings = () => {\n    setSettings(defaultSettings);\n  };\n\n  return (\n    <ThemeSettingsContext.Provider\n      value={{ settings, updateSettings, resetSettings }}\n    >\n      {children}\n    </ThemeSettingsContext.Provider>\n  );\n}\n\nexport const useThemeSettings = () => {\n  const context = useContext(ThemeSettingsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useThemeSettings must be used within a ThemeSettingsProvider\",\n    );\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\data\\aiPersonalityTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseContactsData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseFunnelData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseMetrics.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\calendarCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\calendarEventActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\contactsMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIMessagesCrud.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[963,966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[963,966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AIMessage } from '@/types/ai';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  useCreateAIMessageMutation,\r\n  useUpdateAIMessageMutation,\r\n  useDeleteAIMessageMutation,\r\n} from '@/hooks/useAIMessagesQuery';\r\n\r\nexport function useAIMessagesCrud() {\r\n  const { toast } = useToast();\r\n  const createMutation = useCreateAIMessageMutation();\r\n  const updateMutation = useUpdateAIMessageMutation();\r\n  const deleteMutation = useDeleteAIMessageMutation();\r\n\r\n  const extractVariables = (content: string) => {\r\n    const matches = content.match(/\\{([^}]+)\\}/g);\r\n    return matches ? matches.map((m) => m.slice(1, -1)) : [];\r\n  };\r\n\r\n  const addMessage = async (data: {\r\n    category: string;\r\n    name: string;\r\n    content: string;\r\n    context: string;\r\n  }) => {\r\n    const payload = {\r\n      ...data,\r\n      variables: extractVariables(data.content),\r\n      is_active: true,\r\n    };\r\n    try {\r\n      await createMutation.mutateAsync(payload as any);\r\n      toast({\r\n        title: 'Mensagem adicionada',\r\n        description: 'Nova mensagem criada com sucesso!',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao criar mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateMessage = async (\r\n    id: string,\r\n    data: { category: string; name: string; content: string; context: string },\r\n  ) => {\r\n    const payload = {\r\n      ...data,\r\n      variables: extractVariables(data.content),\r\n    };\r\n    try {\r\n      await updateMutation.mutateAsync({ id, ...payload });\r\n      toast({\r\n        title: 'Mensagem atualizada',\r\n        description: 'Mensagem atualizada com sucesso!',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao atualizar mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteMessage = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id);\r\n      toast({\r\n        title: 'Mensagem excluída',\r\n        description: 'Mensagem removida com sucesso!',\r\n        variant: 'destructive',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao excluir mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const toggleMessage = async (message: AIMessage) => {\r\n    try {\r\n      await updateMutation.mutateAsync({\r\n        id: message.id,\r\n        is_active: !message.is_active,\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao alterar status da mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = (content: string) => {\r\n    navigator.clipboard.writeText(content);\r\n    toast({\r\n      title: 'Copiado!',\r\n      description: 'Conteúdo copiado para a área de transferência.',\r\n    });\r\n  };\r\n\r\n  return {\r\n    addMessage,\r\n    updateMessage,\r\n    deleteMessage,\r\n    toggleMessage,\r\n    copyToClipboard,\r\n    createPending: createMutation.isPending,\r\n    updatePending: updateMutation.isPending,\r\n  };\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIMessagesQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIPersonalityForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIPersonalityQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIProductsQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Product } from '@/types/product';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\n// Query keys\r\nexport const aiProductsKeys = {\r\n  all: ['aiProducts'] as const,\r\n  lists: () => [...aiProductsKeys.all, 'list'] as const,\r\n  list: (filters: string) => [...aiProductsKeys.lists(), { filters }] as const,\r\n  details: () => [...aiProductsKeys.all, 'detail'] as const,\r\n  detail: (id: string) => [...aiProductsKeys.details(), id] as const,\r\n};\r\n\r\n// Fetch AI products\r\nconst fetchAIProducts = async (): Promise<any[]> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .select('*')\r\n    .order('created_at', { ascending: false });\r\n\r\n  if (error) {\r\n    console.error('Error fetching AI products:', error);\r\n    throw new Error(`Failed to fetch AI products: ${error.message}`);\r\n  }\r\n\r\n  return data || [];\r\n};\r\n\r\n// Create AI product\r\nconst createAIProduct = async (product: { name: string; description?: string; category?: string; features?: string[]; icon?: string; image?: string; popular?: boolean; new?: boolean }): Promise<unknown> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .insert([{ id: crypto.randomUUID(), ...product }])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error creating AI product:', error);\r\n    throw new Error(`Failed to create AI product: ${error.message}`);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Update AI product\r\nconst updateAIProduct = async ({ id, ...updates }: { id: string } & Partial<{ name: string; description: string; category: string; features: string[]; icon: string; image: string; popular: boolean; new: boolean }>): Promise<unknown> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error updating AI product:', error);\r\n    throw new Error(`Failed to update AI product: ${error.message}`);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Delete AI product\r\nconst deleteAIProduct = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('ai_products')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) {\r\n    console.error('Error deleting AI product:', error);\r\n    throw new Error(`Failed to delete AI product: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Hook for fetching AI products\r\nexport const useAIProductsQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiProductsKeys.lists(),\r\n    queryFn: fetchAIProducts,\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n    gcTime: 10 * 60 * 1000, // 10 minutes\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n// Hook for creating AI product\r\nexport const useCreateAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product created successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook for updating AI product\r\nexport const useUpdateAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: updateAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product updated successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook for deleting AI product\r\nexport const useDeleteAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product deleted successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Utility functions for manual cache management\r\nexport const aiProductsUtils = {\r\n  invalidateAll: (queryClient: ReturnType<typeof useQueryClient>) => {\r\n    queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n  },\r\n  prefetchProducts: (queryClient: ReturnType<typeof useQueryClient>) => {\r\n    queryClient.prefetchQuery({\r\n      queryKey: aiProductsKeys.lists(),\r\n      queryFn: fetchAIProducts,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIStageManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIStagesQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAITest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAddClientFormLogic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { Contact } from \"@/types/client\";\r\nimport { validateClientForm } from \"@/components/clients/ClientFormValidation\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport const useAddClientFormLogic = () => {\r\n  const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});\r\n  const [activeTab, setActiveTab] = useState(\"basico\");\r\n  const [customValues, setCustomValues] = useState<{ [fieldId: string]: unknown }>({});\r\n\r\n  const handleInputChange = useCallback((\r\n    field: keyof Contact,\r\n    value: unknown,\r\n    newContact: Partial<Contact>,\r\n    setNewContact: (contact: Partial<Contact>) => void\r\n  ) => {\r\n    setNewContact({ ...newContact, [field]: value });\r\n\r\n    // Clear field error when user starts typing\r\n    if (validationErrors[field]) {\r\n      setValidationErrors((prev) => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[field];\r\n        return newErrors;\r\n      });\r\n    }\r\n  }, [validationErrors]);\r\n\r\n  const validateForm = useCallback((newContact: Partial<Contact>) => {\r\n    const validation = validateClientForm(newContact);\r\n\r\n    if (!validation.isValid) {\r\n      setValidationErrors(validation.errors);\r\n\r\n      // Navigate to first tab with error\r\n      if (validation.errors.name || validation.errors.phone || validation.errors.email) {\r\n        setActiveTab(\"basico\");\r\n      } else if (validation.errors.budget || validation.errors.cpfCnpj) {\r\n        setActiveTab(\"comercial\");\r\n      }\r\n\r\n      toast({\r\n        title: \"Dados inválidos\",\r\n        description: \"Por favor, corrija os erros destacados no formulário.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }, []);\r\n\r\n  const resetForm = useCallback(() => {\r\n    setCustomValues({});\r\n    setValidationErrors({});\r\n    setActiveTab(\"basico\");\r\n  }, []);\r\n\r\n  const handleCustomFieldChange = useCallback((fieldId: string, value: any) => {\r\n    setCustomValues((prev) => ({\r\n      ...prev,\r\n      [fieldId]: value,\r\n    }));\r\n  }, []);\r\n\r\n  return {\r\n    validationErrors,\r\n    activeTab,\r\n    setActiveTab,\r\n    customValues,\r\n    handleInputChange,\r\n    validateForm,\r\n    resetForm,\r\n    handleCustomFieldChange,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAdvancedSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaAvailability.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'availableDates'. Either exclude it or remove the dependency array.","line":258,"column":6,"nodeType":"ArrayExpression","endLine":258,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [agenda, getOperatingHoursForDate, bookings]","fix":{"range":[8801,8861],"text":"[agenda, getOperatingHoursForDate, bookings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { format, addDays, startOfDay, addMinutes, isAfter, isBefore, isSameDay, parseISO } from 'date-fns';\r\nimport { useAgendas, type Agenda } from './useAgendas';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\nexport interface TimeSlot {\r\n  time: string;\r\n  available: boolean;\r\n  reason?: string;\r\n}\r\n\r\nexport interface AgendaOperatingHours {\r\n  id: string;\r\n  agenda_id: string;\r\n  day_of_week: number; // 0 = Sunday, 1 = Monday, etc.\r\n  start_time: string;\r\n  end_time: string;\r\n  is_active: boolean;\r\n}\r\n\r\nexport interface AgendaAvailableDate {\r\n  id: string;\r\n  agenda_id: string;\r\n  date: string;\r\n  is_available: boolean;\r\n  start_time?: string;\r\n  end_time?: string;\r\n  max_bookings?: number;\r\n  reason?: string;\r\n}\r\n\r\nexport interface AgendaBooking {\r\n  id: string;\r\n  agenda_name: string;\r\n  booking_date: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  status: string;\r\n}\r\n\r\nexport function useAgendaAvailability(agendaId?: string) {\r\n  const { agendas } = useAgendas();\r\n  const [operatingHours, setOperatingHours] = useState<AgendaOperatingHours[]>([]);\r\n  const [availableDates, setAvailableDates] = useState<AgendaAvailableDate[]>([]);\r\n  const [bookings, setBookings] = useState<AgendaBooking[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  // Get current agenda from the agendas list\r\n  const agenda = agendas.find(a => a.id === agendaId);\r\n\r\n  // Fetch operating hours for the agenda\r\n  const fetchOperatingHours = useCallback(async () => {\r\n    if (!agendaId) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_operating_hours')\r\n        .select('*')\r\n        .eq('agenda_id', agendaId)\r\n        .eq('is_active', true)\r\n        .order('day_of_week');\r\n\r\n      if (error) throw error;\r\n      setOperatingHours(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching operating hours:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar horários de funcionamento\",\r\n        description: \"Não foi possível carregar os horários de funcionamento.\",\r\n      });\r\n    }\r\n  }, [agendaId, toast]);\r\n\r\n  // Fetch available dates for the agenda\r\n  const fetchAvailableDates = useCallback(async () => {\r\n    if (!agendaId) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_available_dates')\r\n        .select('*')\r\n        .eq('agenda_id', agendaId)\r\n        .order('date');\r\n\r\n      if (error) throw error;\r\n      setAvailableDates(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching available dates:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar datas disponíveis\",\r\n        description: \"Não foi possível carregar as datas disponíveis.\",\r\n      });\r\n    }\r\n  }, [agendaId, toast]);\r\n\r\n  // Fetch bookings for a date range\r\n  const fetchBookings = useCallback(async (startDate: Date, endDate: Date) => {\r\n    if (!agendaId || !agenda?.name) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_bookings')\r\n        .select('*')\r\n        .eq('agenda_name', agenda.name)\r\n        .gte('booking_date', format(startDate, 'yyyy-MM-dd'))\r\n        .lte('booking_date', format(endDate, 'yyyy-MM-dd'))\r\n        .neq('status', 'cancelled')\r\n        .order('booking_date, start_time');\r\n\r\n      if (error) throw error;\r\n\r\n      setBookings(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching bookings:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar agendamentos\",\r\n        description: \"Não foi possível carregar os agendamentos existentes.\",\r\n      });\r\n    }\r\n  }, [agendaId, agenda?.name, toast]);\r\n\r\n  // Check if a date is available based on operating hours and exceptions\r\n  const isDateAvailable = useCallback((date: Date): boolean => {\r\n    const dayOfWeek = date.getDay();\r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    \r\n    // Check for specific date exceptions first\r\n    const dateException = availableDates.find(ad => ad.date === dateStr);\r\n    if (dateException) {\r\n      return dateException.is_available;\r\n    }\r\n    \r\n    // Check regular operating hours\r\n    const operatingHour = operatingHours.find(oh => oh.day_of_week === dayOfWeek);\r\n    return !!operatingHour;\r\n  }, [operatingHours, availableDates]);\r\n\r\n  // Get available dates for a month\r\n  const getAvailableDatesForMonth = useCallback((date: Date): Date[] => {\r\n    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n    const dates: Date[] = [];\r\n    \r\n    for (let d = new Date(startOfMonth); d <= endOfMonth; d = addDays(d, 1)) {\r\n      if (isDateAvailable(d)) {\r\n        dates.push(new Date(d));\r\n      }\r\n    }\r\n    \r\n    return dates;\r\n  }, [isDateAvailable]);\r\n\r\n  // Get operating hours for a specific date\r\n  const getOperatingHoursForDate = useCallback((date: Date): { start: string; end: string } | null => {\r\n    const dayOfWeek = date.getDay();\r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    \r\n    // Check for specific date exceptions first\r\n    const dateException = availableDates.find(ad => ad.date === dateStr);\r\n    if (dateException) {\r\n      if (!dateException.is_available) return null;\r\n      if (dateException.start_time && dateException.end_time) {\r\n        return {\r\n          start: dateException.start_time,\r\n          end: dateException.end_time\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Use regular operating hours\r\n    const operatingHour = operatingHours.find(oh => oh.day_of_week === dayOfWeek);\r\n    if (!operatingHour) return null;\r\n    \r\n    return {\r\n      start: operatingHour.start_time,\r\n      end: operatingHour.end_time\r\n    };\r\n  }, [operatingHours, availableDates]);\r\n\r\n  // Get available time slots for a specific date\r\n  const getAvailableTimeSlots = useCallback((date: Date): TimeSlot[] => {\r\n    if (!agenda) return [];\r\n    \r\n    const operatingHours = getOperatingHoursForDate(date);\r\n    if (!operatingHours) return [];\r\n    \r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    const dayBookings = bookings.filter(booking => booking.booking_date === dateStr);\r\n    \r\n    const slots: TimeSlot[] = [];\r\n    const duration = agenda.duration_minutes || 60;\r\n    const bufferTime = agenda.buffer_time_minutes || 0;\r\n    \r\n    // Parse start and end times\r\n    const [startHour, startMinute] = operatingHours.start.split(':').map(Number);\r\n    const [endHour, endMinute] = operatingHours.end.split(':').map(Number);\r\n    \r\n    const startTime = new Date(date);\r\n    startTime.setHours(startHour, startMinute, 0, 0);\r\n    \r\n    const endTime = new Date(date);\r\n    endTime.setHours(endHour, endMinute, 0, 0);\r\n    \r\n    let currentTime = new Date(startTime);\r\n    \r\n    while (currentTime.getTime() + (duration * 60000) <= endTime.getTime()) {\r\n      const timeStr = format(currentTime, 'HH:mm');\r\n      \r\n      // Check for conflicts with existing bookings\r\n      const hasConflict = dayBookings.some(booking => {\r\n        const [bookingStartHour, bookingStartMinute] = booking.start_time.split(':').map(Number);\r\n        const [bookingEndHour, bookingEndMinute] = booking.end_time.split(':').map(Number);\r\n        \r\n        const bookingStart = new Date(date);\r\n        bookingStart.setHours(bookingStartHour, bookingStartMinute, 0, 0);\r\n        \r\n        const bookingEnd = new Date(date);\r\n        bookingEnd.setHours(bookingEndHour, bookingEndMinute, 0, 0);\r\n        \r\n        const slotEnd = new Date(currentTime.getTime() + (duration * 60000));\r\n        \r\n        // Check if slot overlaps with booking\r\n        return currentTime < bookingEnd && slotEnd > bookingStart;\r\n      });\r\n      \r\n      // Count existing bookings for this time slot\r\n      const slotBookings = dayBookings.filter(booking => booking.start_time === timeStr);\r\n      const maxParticipants = agenda.max_participants || 1;\r\n      const isOverCapacity = slotBookings.length >= maxParticipants;\r\n      \r\n      let available = true;\r\n      let reason: string | undefined;\r\n      \r\n      if (hasConflict) {\r\n        available = false;\r\n        reason = 'Horário ocupado';\r\n      } else if (isOverCapacity) {\r\n        available = false;\r\n        reason = `Capacidade máxima atingida (${slotBookings.length}/${maxParticipants})`;\r\n      }\r\n      \r\n      slots.push({\r\n        time: timeStr,\r\n        available,\r\n        reason\r\n      });\r\n      \r\n      // Move to next slot\r\n      currentTime = new Date(currentTime.getTime() + ((duration + bufferTime) * 60000));\r\n    }\r\n    \r\n    return slots;\r\n  }, [agenda, getOperatingHoursForDate, bookings, availableDates]);\r\n\r\n  // Load all data when agendaId changes\r\n  useEffect(() => {\r\n    if (agendaId) {\r\n      setLoading(true);\r\n      Promise.all([\r\n        fetchOperatingHours(),\r\n        fetchAvailableDates()\r\n      ]).finally(() => {\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      // Clear data when no agenda is selected\r\n      setOperatingHours([]);\r\n      setAvailableDates([]);\r\n      setBookings([]);\r\n    }\r\n  }, [agendaId, fetchOperatingHours, fetchAvailableDates]);\r\n\r\n  return {\r\n    agenda,\r\n    operatingHours,\r\n    availableDates,\r\n    bookings,\r\n    loading,\r\n    fetchBookings,\r\n    isDateAvailable,\r\n    getAvailableDatesForMonth,\r\n    getOperatingHoursForDate,\r\n    getAvailableTimeSlots,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaServiceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendas.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":32,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface Agenda {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  duration_minutes: number;\r\n  price: number | null;\r\n  category: string | null;\r\n  is_active: boolean;\r\n  max_participants: number | null;\r\n  requires_approval: boolean;\r\n  buffer_time_minutes: number;\r\n  cancellation_policy: string | null;\r\n  preparation_notes: string | null;\r\n  follow_up_notes: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string | null;\r\n  updated_by: string | null;\r\n}\r\n\r\nexport function useAgendas() {\r\n  const [agendas, setAgendas] = useState<Agenda[]>([]);\r\n  const [agendasLoading, setAgendasLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchAgendas();\r\n  }, [\u0001, fetchAgendas]);\r\n\r\n  const fetchAgendas = async () => {\r\n    try {\r\n      setAgendasLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .select('*')\r\n        .eq('is_active', true)\r\n        .order('created_at', { ascending: false }) as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao buscar agendas:', error);\r\n        throw error;\r\n      }\r\n\r\n      setAgendas(data as unknown as Agenda[] || []);\r\n    } catch (error) {\r\n      console.error('Erro ao buscar agendas:', error);\r\n      toast({\r\n        title: \"Erro ao carregar agendas\",\r\n        description: \"Não foi possível carregar a lista de agendas.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setAgendasLoading(false);\r\n    }\r\n  };\r\n\r\n  const createAgenda = async (agendaData: Omit<Agenda, 'id' | 'created_at' | 'updated_at' | 'created_by' | 'updated_by'>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .insert([agendaData])\r\n        .select() as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao criar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda criada com sucesso\",\r\n        description: \"A nova agenda foi adicionada.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n      return data[0];\r\n    } catch (error) {\r\n      console.error('Erro ao criar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao criar agenda\",\r\n        description: \"Não foi possível criar a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateAgenda = async (id: string, agendaData: Partial<Omit<Agenda, 'id' | 'created_at' | 'updated_at' | 'created_by' | 'updated_by'>>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .update({ ...agendaData, updated_at: new Date().toISOString() })\r\n        .eq('id', id)\r\n        .select() as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao atualizar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda atualizada com sucesso\",\r\n        description: \"As alterações foram salvas.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n      return data[0];\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao atualizar agenda\",\r\n        description: \"Não foi possível atualizar a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteAgenda = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('agendas' as any)\r\n        .update({ is_active: false, updated_at: new Date().toISOString() })\r\n        .eq('id', id) as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao deletar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda removida com sucesso\",\r\n        description: \"A agenda foi desativada.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n    } catch (error) {\r\n      console.error('Erro ao deletar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao deletar agenda\",\r\n        description: \"Não foi possível remover a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    agendas,\r\n    agendasLoading,\r\n    refetchAgendas: fetchAgendas,\r\n    createAgenda,\r\n    updateAgenda,\r\n    deleteAgenda\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAppointmentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAuthUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarEvents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarEventsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useChatMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useChatMessagesOptimized.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3999,4002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3999,4002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4043,4046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4043,4046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { ChatMessage } from '@/types/chat';\r\nimport { memoryService } from '@/lib/memoryService';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseChatMessagesOptions {\r\n  sessionId: string;\r\n  pageSize?: number;\r\n  initialPage?: number;\r\n  pollingInterval?: number;\r\n  useCache?: boolean;\r\n}\r\n\r\ninterface UseChatMessagesResult {\r\n  messages: ChatMessage[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  loadMore: () => Promise<void>;\r\n  hasMore: boolean;\r\n  refresh: () => Promise<void>;\r\n  sendMessage: (message: Omit<ChatMessage, 'id'>) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Hook otimizado para gerenciar mensagens de chat com suporte a cache e paginação\r\n */\r\nexport function useChatMessagesOptimized({\r\n  sessionId,\r\n  pageSize = 50,\r\n  initialPage = 1,\r\n  pollingInterval = 5000,\r\n  useCache = true,\r\n}: UseChatMessagesOptions): UseChatMessagesResult {\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [page, setPage] = useState<number>(initialPage);\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n  \r\n  // Referências para controle de polling e estado atual\r\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isMountedRef = useRef<boolean>(true);\r\n  const messagesRef = useRef<ChatMessage[]>(messages);\r\n  \r\n  // Atualizar a referência quando as mensagens mudarem\r\n  useEffect(() => {\r\n    messagesRef.current = messages;\r\n  }, [messages]);\r\n  \r\n  // Função para carregar mensagens\r\n  const loadMessages = useCallback(async (currentPage: number, refresh = false) => {\r\n    if (!sessionId) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Buscar mensagens com paginação\r\n      const chatMemories = await memoryService.getMemoriesBySession(\r\n        sessionId,\r\n        undefined,\r\n        pageSize,\r\n        useCache\r\n      );\r\n      \r\n      // Converter memórias para formato ChatMessage\r\n      const newMessages = chatMemories.map(memory => ({\r\n        id: memory.id.toString(),\r\n        content: memory.message?.content || '',\r\n        role: memory.message?.role || 'user',\r\n        timestamp: memory.created_at || new Date().toISOString(),\r\n        sender: memory.message?.sender || { id: 'unknown', name: 'Unknown' },\r\n      }));\r\n      \r\n      // Atualizar estado com base em refresh ou append\r\n      if (refresh) {\r\n        setMessages(newMessages);\r\n      } else {\r\n        setMessages(prev => [...prev, ...newMessages]);\r\n      }\r\n      \r\n      // Verificar se há mais mensagens para carregar\r\n      setHasMore(newMessages.length === pageSize);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar mensagens:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao carregar mensagens'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sessionId, pageSize, useCache]);\r\n  \r\n  // Função para carregar mais mensagens (paginação)\r\n  const loadMore = useCallback(async () => {\r\n    if (loading || !hasMore) return;\r\n    \r\n    const nextPage = page + 1;\r\n    await loadMessages(nextPage, false);\r\n    setPage(nextPage);\r\n  }, [loading, hasMore, page, loadMessages]);\r\n  \r\n  // Função para atualizar mensagens\r\n  const refresh = useCallback(async () => {\r\n    setPage(initialPage);\r\n    await loadMessages(initialPage, true);\r\n  }, [initialPage, loadMessages]);\r\n  \r\n  // Função para enviar mensagem\r\n  const sendMessage = useCallback(async (message: Omit<ChatMessage, 'id'>) => {\r\n    if (!sessionId) return;\r\n    \r\n    try {\r\n      // Preparar mensagem para armazenamento\r\n      const chatMemory = {\r\n        session_id: sessionId,\r\n        message: {\r\n          content: message.content,\r\n          role: message.role,\r\n          sender: message.sender,\r\n        },\r\n        created_at: message.timestamp || new Date().toISOString(),\r\n        memory_type: 'contextual' as any,\r\n        memory_level: 'short_term' as any,\r\n      };\r\n      \r\n      // Adicionar mensagem otimisticamente à UI\r\n      const optimisticMessage: ChatMessage = {\r\n        id: `temp-${Date.now()}`,\r\n        ...message,\r\n        timestamp: message.timestamp || new Date().toISOString(),\r\n      };\r\n      \r\n      setMessages(prev => [...prev, optimisticMessage]);\r\n      \r\n      // Enviar mensagem para o servidor\r\n      const result = await memoryService.storeMemory(chatMemory);\r\n      \r\n      if (result) {\r\n        // Substituir mensagem temporária pela real\r\n        setMessages(prev => \r\n          prev.map(msg => \r\n            msg.id === optimisticMessage.id \r\n              ? {\r\n                  ...msg,\r\n                  id: result.id.toString(),\r\n                }\r\n              : msg\r\n          )\r\n        );\r\n      } else {\r\n        // Remover mensagem otimista em caso de erro\r\n        setMessages(prev => prev.filter(msg => msg.id !== optimisticMessage.id));\r\n        throw new Error('Falha ao enviar mensagem');\r\n      }\r\n    } catch (err) {\r\n      logger.error('Erro ao enviar mensagem:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao enviar mensagem'));\r\n    }\r\n  }, [sessionId]);\r\n  \r\n  // Função para buscar mensagens recentes durante o polling\r\n  const fetchLatestMessages = useCallback(async () => {\r\n    if (!sessionId || !isMountedRef.current) return;\r\n    \r\n    try {\r\n      // Buscar apenas as mensagens mais recentes\r\n      const latestMemories = await memoryService.getMemoriesBySession(\r\n        sessionId,\r\n        undefined,\r\n        20, // Buscar apenas as 20 mais recentes\r\n        false // Não usar cache para polling\r\n      );\r\n      \r\n      // Converter para formato ChatMessage\r\n      const latestMessages = latestMemories.map(memory => ({\r\n        id: memory.id.toString(),\r\n        content: memory.message?.content || '',\r\n        role: memory.message?.role || 'user',\r\n        timestamp: memory.created_at || new Date().toISOString(),\r\n        sender: memory.message?.sender || { id: 'unknown', name: 'Unknown' },\r\n      }));\r\n      \r\n      // Verificar se há novas mensagens\r\n      if (latestMessages.length > 0) {\r\n        const currentIds = new Set(messagesRef.current.map(msg => msg.id));\r\n        const newMessages = latestMessages.filter(msg => !currentIds.has(msg.id));\r\n        \r\n        if (newMessages.length > 0) {\r\n          setMessages(prev => [...prev, ...newMessages]);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      logger.error('Erro no polling de mensagens:', err);\r\n    }\r\n  }, [sessionId]);\r\n  \r\n  // Função para parar o polling\r\n  const stopPolling = useCallback(() => {\r\n    if (pollingRef.current) {\r\n      clearInterval(pollingRef.current);\r\n      pollingRef.current = null;\r\n    }\r\n  }, []);\r\n  \r\n  // Função para iniciar o polling\r\n  const startPolling = useCallback(() => {\r\n    stopPolling();\r\n    \r\n    pollingRef.current = setInterval(fetchLatestMessages, pollingInterval);\r\n  }, [fetchLatestMessages, pollingInterval, stopPolling]);\r\n  \r\n  // Configurar polling para novas mensagens\r\n  useEffect(() => {\r\n    if (!sessionId || pollingInterval <= 0) return;\r\n    \r\n    // Iniciar carregamento inicial e polling\r\n    loadMessages(initialPage, true);\r\n    startPolling();\r\n    \r\n    return () => {\r\n      isMountedRef.current = false;\r\n      stopPolling();\r\n    };\r\n  }, [sessionId, initialPage, pollingInterval, loadMessages, startPolling, stopPolling]);\r\n  \r\n  return {\r\n    messages,\r\n    loading,\r\n    error,\r\n    loadMore,\r\n    hasMore,\r\n    refresh,\r\n    sendMessage,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientCustomFields.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":43,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\r\nimport { CustomFieldWithValue } from \"@/types/customFields\";\r\nimport { useCustomFields } from \"./useCustomFields\";\r\n\r\nexport const useClientCustomFields = (contactId?: string) => {\r\n  const [customFieldsWithValues, setCustomFieldsWithValues] = useState<\r\n    CustomFieldWithValue[]\r\n  >([]);\r\n  const [loadingCustomFields, setLoadingCustomFields] = useState(false);\r\n  const { getCustomFieldsWithValues, saveClientCustomValues } =\r\n    useCustomFields();\r\n\r\n  const loadCustomFieldsForContact = async (id: string) => {\r\n    try {\r\n      setLoadingCustomFields(true);\r\n      const fieldsWithValues = await getCustomFieldsWithValues(id);\r\n      setCustomFieldsWithValues(fieldsWithValues);\r\n    } catch (error) {\r\n      console.error(\"Erro ao carregar campos personalizados:\", error);\r\n    } finally {\r\n      setLoadingCustomFields(false);\r\n    }\r\n  };\r\n\r\n  const saveCustomFields = async (\r\n    id: string,\r\n    values: { fieldId: string; value: unknown }[],\r\n  ) => {\r\n    try {\r\n      await saveClientCustomValues(id, values);\r\n      await loadCustomFieldsForContact(id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Erro ao salvar campos personalizados:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contactId) {\r\n      loadCustomFieldsForContact(contactId);\r\n    }\r\n  }, [\u0001, loadCustomFieldsForContact]);\r\n\r\n  return {\r\n    customFieldsWithValues,\r\n    loadingCustomFields,\r\n    loadCustomFieldsForContact,\r\n    saveCustomFields,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientDataFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[899,902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[899,902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'selectedConversation.clientName', 'selectedConversation.clientSize', 'selectedConversation.clientType', 'selectedConversation.email', 'selectedConversation.id', 'selectedConversation.name', and 'selectedConversation.phone'. Either include them or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [selectedConversation.sessionId, availableContacts, selectedConversation.id, selectedConversation.name, selectedConversation.email, selectedConversation.phone, selectedConversation.clientName, selectedConversation.clientSize, selectedConversation.clientType]","fix":{"range":[3508,3560],"text":"[selectedConversation.sessionId, availableContacts, selectedConversation.id, selectedConversation.name, selectedConversation.email, selectedConversation.phone, selectedConversation.clientName, selectedConversation.clientSize, selectedConversation.clientType]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Contact } from \"@/types/client\";\r\nimport { Conversation } from \"@/types/chat\";\r\n\r\nexport const useClientDataFetch = (\r\n  selectedConversation: Conversation | undefined,\r\n  availableContacts: Contact[]\r\n) => {\r\n  const [clientData, setClientData] = useState<Contact | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchClientData = async () => {\r\n      if (!selectedConversation?.sessionId) return;\r\n\r\n      setLoading(true);\r\n      try {\r\n        console.log(\r\n          \"Buscando dados do cliente mockup para a sessão:\",\r\n          selectedConversation.sessionId,\r\n        );\r\n\r\n        // Encontrar o cliente correspondente à sessão selecionada\r\n        const client = availableContacts.find(\r\n          (client) => (client as any).sessionId === selectedConversation.sessionId || (client as any).session_id === selectedConversation.sessionId,\r\n        );\r\n\r\n        if (client) {\r\n          console.log(\"Cliente encontrado:\", client.name);\r\n          setClientData(client);\r\n        } else {\r\n          console.log(\r\n            \"Cliente não encontrado para a sessão:\",\r\n            selectedConversation.sessionId,\r\n          );\r\n\r\n          // Tentar encontrar por ID como fallback\r\n          const clientById = availableContacts.find(\r\n            (client) => client.id === selectedConversation.id,\r\n          );\r\n\r\n          if (clientById) {\r\n            console.log(\"Cliente encontrado por ID:\", clientById.name);\r\n            const updatedClient = {\r\n              ...clientById,\r\n              sessionId: selectedConversation.sessionId,\r\n            };\r\n            setClientData(updatedClient);\r\n          } else {\r\n            console.log(\r\n              \"Cliente não encontrado nem por ID. Usando dados da conversa como fallback.\",\r\n            );\r\n            // Usar os dados da conversa selecionada como fallback\r\n            const fallbackClient: Contact = {\r\n              id: selectedConversation.id,\r\n              name: selectedConversation.name || \"Cliente sem nome\",\r\n              email: selectedConversation.email || \"\",\r\n              phone: selectedConversation.phone || \"\",\r\n              clientName: selectedConversation.clientName || \"\",\r\n              clientSize: selectedConversation.clientSize || \"\",\r\n              clientType: selectedConversation.clientType || \"pessoa-fisica\",\r\n              cpfCnpj: \"\",\r\n              asaasCustomerId: \"\",\r\n              status: \"Active\",\r\n              notes:\r\n                \"Cliente gerado automaticamente a partir dos dados da conversa\",\r\n              lastContact: new Date().toLocaleDateString(\"pt-BR\"),\r\n              kanbanStage: \"Nova consulta\",\r\n              sessionId: selectedConversation.sessionId,\r\n              tags: [\"Gerado automaticamente\"],\r\n              responsibleUser: \"\",\r\n              sales: 0,\r\n              clientSector: \"\",\r\n              budget: 0,\r\n              paymentMethod: \"\",\r\n              clientObjective: \"\",\r\n              lossReason: \"\",\r\n              contractNumber: \"\",\r\n              contractDate: \"\",\r\n              payment: \"\",\r\n              uploadedFiles: [],\r\n              consultationStage: \"Nova consulta\",\r\n            };\r\n            setClientData(fallbackClient);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching client data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchClientData();\r\n  }, [selectedConversation?.sessionId, availableContacts]);\r\n\r\n  return { clientData, loading };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientDisplayConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientFiles.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadClientFiles' and 'loadStorageUsage'. Either include them or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [clientId, loadClientFiles, loadStorageUsage]","fix":{"range":[886,896],"text":"[clientId, loadClientFiles, loadStorageUsage]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4511,4514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4511,4514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5627,5630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5627,5630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { FileMetadata } from '@/types/file';\r\n\r\ninterface UseClientFilesProps {\r\n  clientId?: string;\r\n  onFileUpdate?: (files: FileMetadata[]) => void;\r\n}\r\n\r\nexport const useClientFiles = ({ clientId, onFileUpdate }: UseClientFilesProps) => {\r\n  const [files, setFiles] = useState<FileMetadata[]>([]);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [storageUsage, setStorageUsage] = useState({ used: 0, max: 100 * 1024 * 1024 });\r\n  const { toast } = useToast();\r\n  const { user } = useAuth();\r\n\r\n  const maxFileSize = 10 * 1024 * 1024; // 10MB per file\r\n\r\n  useEffect(() => {\r\n    if (clientId) {\r\n      loadClientFiles();\r\n    }\r\n    loadStorageUsage();\r\n  }, [clientId]);\r\n\r\n  const loadClientFiles = async () => {\r\n    if (!clientId) return;\r\n\r\n    try {\r\n      const { data: contact, error } = await supabase\r\n        .from('contacts')\r\n        .select('files_metadata')\r\n        .eq('id', clientId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Erro ao carregar arquivos:', error);\r\n        return;\r\n      }\r\n\r\n      const filesMetadata = (contact?.files_metadata as unknown as FileMetadata[]) || [];\r\n\r\n      const filesWithUrls = await Promise.all(\r\n        filesMetadata.map(async (file) => {\r\n          const { data } = await supabase.storage\r\n            .from('client-files')\r\n            .createSignedUrl(file.path, 3600);\r\n\r\n          return {\r\n            ...file,\r\n            url: data?.signedUrl,\r\n          };\r\n        }),\r\n      );\r\n\r\n      setFiles(filesWithUrls);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar arquivos:', error);\r\n    }\r\n  };\r\n\r\n  const loadStorageUsage = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_storage_usage')\r\n        .select('used_bytes, max_bytes')\r\n        .eq('user_id', user.id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') {\r\n        console.error('Erro ao carregar uso de storage:', error);\r\n        return;\r\n      }\r\n\r\n      if (data) {\r\n        setStorageUsage({ used: data.used_bytes, max: data.max_bytes });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao carregar uso de storage:', error);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const handleFileSelect = (selectedFiles: FileList | null) => {\r\n    if (!selectedFiles || selectedFiles.length === 0) return;\r\n\r\n    const file = selectedFiles[0];\r\n\r\n    if (file.size > maxFileSize) {\r\n      toast({\r\n        title: 'Arquivo muito grande',\r\n        description: `O arquivo deve ter no máximo ${formatFileSize(maxFileSize)}`,\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (storageUsage.used + file.size > storageUsage.max) {\r\n      toast({\r\n        title: 'Limite de armazenamento atingido',\r\n        description: 'Você não tem espaço suficiente para este arquivo',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    uploadFile(file);\r\n  };\r\n\r\n  const uploadFile = async (file: File) => {\r\n    if (!clientId || !user) return;\r\n\r\n    setIsUploading(true);\r\n\r\n    try {\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${clientId}/${Date.now()}.${fileExt}`;\r\n\r\n      const { error: uploadError } = await supabase.storage\r\n        .from('client-files')\r\n        .upload(fileName, file, {\r\n          metadata: {\r\n            size: file.size.toString(),\r\n            originalName: file.name,\r\n            contentType: file.type,\r\n          },\r\n        });\r\n\r\n      if (uploadError) {\r\n        throw uploadError;\r\n      }\r\n\r\n      const fileMetadata: FileMetadata = {\r\n        id: Date.now().toString(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        uploadedAt: new Date().toISOString(),\r\n        path: fileName,\r\n      };\r\n\r\n      const updatedFiles = [...files, fileMetadata];\r\n      setFiles(updatedFiles);\r\n\r\n      const { error: updateError } = await supabase\r\n        .from('contacts')\r\n        .update({ files_metadata: updatedFiles as any })\r\n        .eq('id', clientId);\r\n\r\n      if (updateError) {\r\n        throw updateError;\r\n      }\r\n\r\n      onFileUpdate?.(updatedFiles);\r\n      loadStorageUsage();\r\n\r\n      toast({\r\n        title: 'Arquivo enviado',\r\n        description: 'O arquivo foi enviado com sucesso!',\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao enviar arquivo:', error);\r\n      toast({\r\n        title: 'Erro no upload',\r\n        description: 'Falha ao enviar o arquivo',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (fileToDelete: FileMetadata) => {\r\n    if (!clientId) return;\r\n\r\n    try {\r\n      const { error: deleteError } = await supabase.storage\r\n        .from('client-files')\r\n        .remove([fileToDelete.path]);\r\n\r\n      if (deleteError) {\r\n        throw deleteError;\r\n      }\r\n\r\n      const updatedFiles = files.filter((f) => f.id !== fileToDelete.id);\r\n      setFiles(updatedFiles);\r\n\r\n      const { error: updateError } = await supabase\r\n        .from('contacts')\r\n        .update({ files_metadata: updatedFiles as any })\r\n        .eq('id', clientId);\r\n\r\n      if (updateError) {\r\n        throw updateError;\r\n      }\r\n\r\n      onFileUpdate?.(updatedFiles);\r\n      loadStorageUsage();\r\n\r\n      toast({\r\n        title: 'Arquivo removido',\r\n        description: 'O arquivo foi removido com sucesso',\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao deletar arquivo:', error);\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Falha ao remover o arquivo',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const downloadFile = async (file: FileMetadata) => {\r\n    if (!file.url) {\r\n      const { data } = await supabase.storage\r\n        .from('client-files')\r\n        .createSignedUrl(file.path, 3600);\r\n\r\n      if (data?.signedUrl) {\r\n        window.open(data.signedUrl, '_blank');\r\n      }\r\n    } else {\r\n      window.open(file.url, '_blank');\r\n    }\r\n  };\r\n\r\n  const storagePercentage = (storageUsage.used / storageUsage.max) * 100;\r\n\r\n  return {\r\n    files,\r\n    isUploading,\r\n    storageUsage,\r\n    storagePercentage,\r\n    maxFileSize,\r\n    handleFileSelect,\r\n    deleteFile,\r\n    downloadFile,\r\n    formatFileSize,\r\n    reloadFiles: loadClientFiles,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStatsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStatsQueryOptimized.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'totalWithProbability' is never reassigned. Use 'const' instead.","line":83,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":83,"endColumn":31,"fix":{"range":[2234,2263],"text":"const totalWithProbability = 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'sumProbability' is never reassigned. Use 'const' instead.","line":84,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":84,"endColumn":25,"fix":{"range":[2271,2294],"text":"const sumProbability = 0;"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { queryKeys, cacheConfig } from '@/lib/queryClient';\r\n\r\ninterface ClientStats {\r\n  total: number;\r\n  newThisMonth: number;\r\n  converted: number;\r\n  pending: number;\r\n  byStage: Record<string, number>;\r\n  bySource: Record<string, number>;\r\n  averageValue: number;\r\n  conversionRate: number;\r\n}\r\n\r\ninterface ClientStatsFilters {\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  stage?: string;\r\n  source?: string;\r\n}\r\n\r\n/**\r\n * Hook otimizado para estatísticas de clientes\r\n * Utiliza cache inteligente e queries paralelas\r\n */\r\nexport const useClientStatsQueryOptimized = (filters?: ClientStatsFilters) => {\r\n  return useQuery({\r\n    queryKey: queryKeys.clientStats.byDateRange(\r\n      filters?.dateRange?.start || 'all',\r\n      filters?.dateRange?.end || 'all'\r\n    ),\r\n    queryFn: async (): Promise<ClientStats> => {\r\n      let query = supabase.from('contacts').select(`\r\n        id,\r\n        kanban_stage_id,\r\n        created_at,\r\n        sales,\r\n        budget\r\n      `);\r\n\r\n      // Aplicar filtros se fornecidos\r\n      if (filters?.dateRange) {\r\n        query = query\r\n          .gte('created_at', filters.dateRange.start)\r\n          .lte('created_at', filters.dateRange.end);\r\n      }\r\n\r\n      if (filters?.stage) {\r\n        query = query.eq('kanban_stage_id', filters.stage);\r\n      }\r\n\r\n      // Skip source filter since lead_source doesn't exist in contacts table\r\n\r\n      const { data: contacts, error } = await query.limit(5000);\r\n\r\n      if (error) {\r\n        throw new Error(`Erro ao buscar estatísticas: ${error.message}`);\r\n      }\r\n\r\n      const contactList = contacts || [];\r\n\r\n      // Calcular estatísticas de forma otimizada\r\n      const stats: ClientStats = {\r\n        total: contactList.length,\r\n        newThisMonth: 0,\r\n        converted: 0,\r\n        pending: 0,\r\n        byStage: {},\r\n        bySource: {},\r\n        averageValue: 0,\r\n        conversionRate: 0,\r\n      };\r\n\r\n      // Data de referência para \"este mês\"\r\n      const thisMonth = new Date();\r\n      thisMonth.setDate(1);\r\n      thisMonth.setHours(0, 0, 0, 0);\r\n\r\n      let totalValue = 0;\r\n      let totalWithProbability = 0;\r\n      let sumProbability = 0;\r\n\r\n      // Processar contatos em uma única passagem\r\n      contactList.forEach(contact => {\r\n        // Novos este mês\r\n        if (contact.created_at && new Date(contact.created_at) >= thisMonth) {\r\n          stats.newThisMonth++;\r\n        }\r\n\r\n        // Por estágio\r\n        const stage = contact.kanban_stage_id || 'unknown';\r\n        stats.byStage[stage] = (stats.byStage[stage] || 0) + 1;\r\n\r\n        // Skip source tracking since lead_source doesn't exist\r\n        stats.bySource['unknown'] = stats.bySource['unknown'] || 0;\r\n\r\n        // Use sales or budget as value fallback\r\n        const value = contact.sales || contact.budget || 0;\r\n        if (value > 0) {\r\n          totalValue += value;\r\n        }\r\n\r\n        // Skip conversion probability since field doesn't exist\r\n\r\n        // Contadores específicos\r\n        if (stage === 'fechado' || stage === 'convertido') {\r\n          stats.converted++;\r\n        } else if (stage === 'lead' || stage === 'contato-inicial' || stage === 'em-negociacao') {\r\n          stats.pending++;\r\n        }\r\n      });\r\n\r\n      // Cálculos finais\r\n      stats.averageValue = contactList.length > 0 ? totalValue / contactList.length : 0;\r\n      stats.conversionRate = 0; // Set to 0 since conversion_probability doesn't exist\r\n\r\n      return stats;\r\n    },\r\n    ...cacheConfig.dynamic,\r\n    staleTime: 3 * 60 * 1000, // 3 minutos para stats\r\n    enabled: true,\r\n  });\r\n};\r\n\r\n/**\r\n * Hook para estatísticas em tempo real (cache mais curto)\r\n */\r\nexport const useClientStatsRealtime = () => {\r\n  return useQuery({\r\n    queryKey: queryKeys.clientStats.latest,\r\n    queryFn: async (): Promise<Partial<ClientStats>> => {\r\n      // Query mais leve para dados em tempo real\r\n      const { data, error } = await supabase\r\n        .from('contacts')\r\n        .select('id, kanban_stage_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(100);\r\n\r\n      if (error) {\r\n        throw new Error(`Erro ao buscar stats em tempo real: ${error.message}`);\r\n      }\r\n\r\n      const contacts = data || [];\r\n      const today = new Date().toISOString().split('T')[0];\r\n      \r\n      return {\r\n        total: contacts.length,\r\n        newThisMonth: contacts.filter(c => \r\n          c.created_at && c.created_at.startsWith(today)\r\n        ).length,\r\n        byStage: contacts.reduce((acc, contact) => {\r\n          const stage = contact.kanban_stage_id || 'unknown';\r\n          acc[stage] = (acc[stage] || 0) + 1;\r\n          return acc;\r\n        }, {} as Record<string, number>),\r\n      };\r\n    },\r\n    ...cacheConfig.realtime,\r\n    refetchInterval: 30 * 1000, // 30 segundos\r\n  });\r\n};\r\n\r\n/**\r\n * Utilitários para invalidação e prefetch\r\n */\r\nexport const useClientStatsUtils = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return {\r\n    invalidateAll: () => {\r\n      queryClient.invalidateQueries({ queryKey: queryKeys.clientStats.all });\r\n    },\r\n    \r\n    prefetchByDateRange: (start: string, end: string) => {\r\n      queryClient.prefetchQuery({\r\n        queryKey: queryKeys.clientStats.byDateRange(start, end),\r\n        staleTime: cacheConfig.dynamic.staleTime,\r\n      });\r\n    },\r\n    \r\n    setOptimisticData: (data: ClientStats) => {\r\n      queryClient.setQueryData(queryKeys.clientStats.latest, data);\r\n    },\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientsFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientsTableFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConsolidatedMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactStageHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsByKanbanStage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsOptimizedQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsQueryOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContextualMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[324,327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[324,327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1106,1109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1106,1109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1182,1185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1182,1185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1254,1257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1254,1257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface ContextSummary {\r\n  short_term_count: number;\r\n  medium_term_count: number;\r\n  long_term_count: number;\r\n  total_memories: number;\r\n  entities: unknown[];\r\n  relationships: unknown[];\r\n  context: Record<string, any>;\r\n  most_important: unknown | null;\r\n}\r\n\r\ninterface UseContextualMemoryResult {\r\n  memories: unknown[];\r\n  shortTermMemories: unknown[];\r\n  mediumTermMemories: unknown[];\r\n  longTermMemories: unknown[];\r\n  contextSummary: ContextSummary;\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  generateSummary: () => Promise<string>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar memória contextual - Simplificado durante unificação\r\n */\r\nexport function useContextualMemory(options: unknown): UseContextualMemoryResult {\r\n  const [memories, setMemories] = useState<any[]>([]);\r\n  const [shortTermMemories, setShortTermMemories] = useState<any[]>([]);\r\n  const [mediumTermMemories, setMediumTermMemories] = useState<any[]>([]);\r\n  const [longTermMemories, setLongTermMemories] = useState<any[]>([]);\r\n  const [contextSummary, setContextSummary] = useState<ContextSummary>({\r\n    short_term_count: 0,\r\n    medium_term_count: 0,\r\n    long_term_count: 0,\r\n    total_memories: 0,\r\n    entities: [],\r\n    relationships: [],\r\n    context: {},\r\n    most_important: null,\r\n  });\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const loadContextualData = useCallback(async () => {\r\n    logger.info('useContextualMemory: Funcionalidade desabilitada durante unificação');\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const updateImportance = useCallback(async (memoryId: number, importance: number): Promise<boolean> => {\r\n    logger.info('useContextualMemory: Atualização de importância desabilitada durante unificação');\r\n    return false;\r\n  }, []);\r\n\r\n  const generateSummary = useCallback(async (): Promise<string> => {\r\n    logger.info('useContextualMemory: Geração de resumo desabilitada durante unificação');\r\n    return 'Resumo desabilitado durante unificação';\r\n  }, []);\r\n\r\n  const clearCache = useCallback((pattern?: string): void => {\r\n    logger.info('useContextualMemory: Limpeza de cache desabilitada durante unificação');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadContextualData();\r\n  }, [loadContextualData]);\r\n\r\n  return {\r\n    memories,\r\n    shortTermMemories,\r\n    mediumTermMemories,\r\n    longTermMemories,\r\n    contextSummary,\r\n    loading,\r\n    error,\r\n    refresh: loadContextualData,\r\n    updateImportance,\r\n    generateSummary,\r\n    clearCache,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationMetrics.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'startDate' is never reassigned. Use 'const' instead.","line":97,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":97,"endColumn":16,"fix":{"range":[2549,2576],"text":"const startDate = new Date();"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'endDate', 'latestStats', and 'startDateStr'. Either exclude them or remove the dependency array.","line":216,"column":6,"nodeType":"ArrayExpression","endLine":216,"endColumn":94,"suggestions":[{"desc":"Update the dependencies array to be: [toast, dateFilter, conversationMetrics, funnelData]","fix":{"range":[6837,6925],"text":"[toast, dateFilter, conversationMetrics, funnelData]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useCallback } from \"react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useConversationMetricsQuery, useMetricsByDateRangeQuery } from \"./useConversationMetricsQuery\";\r\nimport { useFunnelByDateRangeQuery } from \"./useFunnelDataQuery\";\r\nimport { useClientStatsQuery, useDashboardMetricsQuery } from \"./useClientStatsQuery\";\r\n\r\ninterface LeadData {\r\n  id: string;\r\n  name: string;\r\n  lastContact: string;\r\n  status: string;\r\n  value: number;\r\n}\r\n\r\ninterface FunnelStage {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color?: string;\r\n}\r\n\r\ninterface ConversionByTime {\r\n  day: string;\r\n  morning: number;\r\n  afternoon: number;\r\n  evening: number;\r\n}\r\n\r\ninterface LeadsBySource {\r\n  name: string;\r\n  value: number;\r\n  color: string;\r\n}\r\n\r\ninterface LeadsOverTime {\r\n  month: string;\r\n  clients: number;\r\n  leads: number;\r\n}\r\n\r\ninterface ConversationMetrics {\r\n  totalConversations: number;\r\n  responseRate: number;\r\n  totalRespondidas: number;\r\n  avgResponseTime: number;\r\n  conversionRate: number;\r\n  avgClosingTime: number;\r\n  avgResponseStartTime: number; // Nova métrica em minutos\r\n  conversationData: unknown[];\r\n  funnelData: FunnelStage[];\r\n  conversionByTimeData: ConversionByTime[];\r\n  leadsAverageByTimeData: ConversionByTime[]; // Nova métrica\r\n  leadsData: LeadData[];\r\n  secondaryResponseRate: number;\r\n  totalSecondaryResponses: number;\r\n  negotiatedValue: number;\r\n  averageNegotiatedValue: number;\r\n  totalNegotiatingValue: number;\r\n  previousPeriodValue: number;\r\n  leadsBySource: LeadsBySource[];\r\n  leadsOverTime: LeadsOverTime[];\r\n  leadsByArrivalFunnel: FunnelStage[];\r\n  isStale: boolean;\r\n}\r\n\r\nexport function useConversationMetrics(\r\n  dateFilter: string = \"week\"\r\n) {\r\n  const [metrics, setMetrics] = useState<ConversationMetrics>({\r\n    totalConversations: 0,\r\n    responseRate: 0,\r\n    totalRespondidas: 0,\r\n    avgResponseTime: 0,\r\n    conversionRate: 0,\r\n    avgClosingTime: 0,\r\n    avgResponseStartTime: 0,\r\n    conversationData: [],\r\n    funnelData: [],\r\n    conversionByTimeData: [],\r\n    leadsAverageByTimeData: [],\r\n    leadsData: [],\r\n    secondaryResponseRate: 0,\r\n    totalSecondaryResponses: 0,\r\n    negotiatedValue: 0,\r\n    averageNegotiatedValue: 0,\r\n    totalNegotiatingValue: 125000,\r\n    previousPeriodValue: 0,\r\n    leadsBySource: [],\r\n    leadsOverTime: [],\r\n    leadsByArrivalFunnel: [],\r\n    isStale: false,\r\n  });\r\n  const { toast } = useToast();\r\n  \r\n  // Calculate date range based on filter\r\n  const endDate = new Date().toISOString().split('T')[0];\r\n  let startDate = new Date();\r\n  \r\n  if (dateFilter === \"week\") {\r\n    startDate.setDate(startDate.getDate() - 7);\r\n  } else if (dateFilter === \"month\") {\r\n    startDate.setMonth(startDate.getMonth() - 1);\r\n  } else if (dateFilter === \"year\") {\r\n    startDate.setFullYear(startDate.getFullYear() - 1);\r\n  }\r\n  \r\n  const startDateStr = startDate.toISOString().split('T')[0];\r\n  \r\n  // React Query hooks\r\n  const { data: conversationMetrics, isLoading: isLoadingConversation } = useMetricsByDateRangeQuery(startDateStr, endDate);\r\n  const { data: dashboardMetrics, isLoading: isLoadingDashboard } = useDashboardMetricsQuery();\r\n  const { stats: latestStats, loading: isLoadingStats } = useClientStatsQuery();\r\n  const { data: funnelData = [], isLoading: isLoadingFunnel } = useFunnelByDateRangeQuery(startDateStr, endDate);\r\n  \r\n  const loading = isLoadingConversation || isLoadingDashboard || isLoadingStats || isLoadingFunnel;\r\n\r\n  const refetchMetrics = useCallback(async () => {\r\n    try {\r\n      console.log(\"Fetching metrics with filter:\", dateFilter);\r\n\r\n      // Funnel data is already available from React Query hook\r\n\r\n      // Transform data to match the expected format\r\n      let transformedMetrics = {\r\n        totalConversations: 0,\r\n        responseRate: 0,\r\n        totalRespondidas: 0,\r\n        avgResponseTime: 0,\r\n        conversionRate: 0,\r\n        avgClosingTime: 0,\r\n        avgResponseStartTime: 0,\r\n        conversationData: [],\r\n        funnelData: [],\r\n        conversionByTimeData: [],\r\n        leadsAverageByTimeData: [],\r\n        leadsData: [],\r\n        secondaryResponseRate: 0,\r\n        totalSecondaryResponses: 0,\r\n        negotiatedValue: 0,\r\n        averageNegotiatedValue: 0,\r\n        totalNegotiatingValue: 0,\r\n        previousPeriodValue: 0,\r\n        leadsBySource: [],\r\n        leadsOverTime: [],\r\n        leadsByArrivalFunnel: [],\r\n        isStale: false,\r\n      };\r\n      \r\n      if (conversationMetrics && conversationMetrics.length > 0) {\r\n        // Use real data from React Query\r\n        const realMetrics = conversationMetrics[0];\r\n        transformedMetrics = {\r\n          ...transformedMetrics,\r\n          totalConversations: realMetrics.total_conversations || 0,\r\n          responseRate: realMetrics.response_rate || 0,\r\n          totalRespondidas: realMetrics.total_respondidas || 0,\r\n          avgResponseTime: realMetrics.avg_response_time || 0,\r\n          conversionRate: realMetrics.conversion_rate || 0,\r\n          avgClosingTime: realMetrics.avg_closing_time || 0,\r\n        };\r\n      }\r\n\r\n      // Transform funnel data if available\r\n      if (funnelData && funnelData.length > 0) {\r\n        transformedMetrics.funnelData = funnelData.map((item: unknown) => ({\r\n          name: item.stage_name || item.name,\r\n          value: item.count || item.value || 0,\r\n          percentage: item.percentage || 0,\r\n          color: item.color || '#8884d8'\r\n        }));\r\n      }\r\n\r\n      setMetrics({\r\n        ...transformedMetrics,\r\n        totalNegotiatingValue: 125000, // Set default value since field doesn't exist\r\n        isStale: false\r\n      });\r\n\r\n      console.log(\"Metrics fetched successfully from React Query\");\r\n    } catch (error) {\r\n      console.error(\"Error loading conversation metrics:\", error);\r\n      toast({\r\n        title: \"Erro ao atualizar métricas\",\r\n        description:\r\n          \"Problema ao buscar as métricas de conversas. Usando dados de exemplo.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      // Fallback to empty data in case of error\r\n      const safeMetrics = {\r\n        totalConversations: 0,\r\n        responseRate: 0,\r\n        totalRespondidas: 0,\r\n        avgResponseTime: 0,\r\n        conversionRate: 0,\r\n        avgClosingTime: 0,\r\n        avgResponseStartTime: 0,\r\n        conversationData: [],\r\n        funnelData: [],\r\n        conversionByTimeData: [],\r\n        leadsAverageByTimeData: [],\r\n        leadsData: [],\r\n        secondaryResponseRate: 0,\r\n        totalSecondaryResponses: 0,\r\n        negotiatedValue: 0,\r\n        averageNegotiatedValue: 0,\r\n        totalNegotiatingValue: 125000,\r\n        previousPeriodValue: 0,\r\n        leadsBySource: [],\r\n        leadsOverTime: [],\r\n        leadsByArrivalFunnel: [],\r\n        isStale: true\r\n      };\r\n      setMetrics(safeMetrics);\r\n    }\r\n  }, [toast, dateFilter, conversationMetrics, latestStats, funnelData, startDateStr, endDate]);\r\n\r\n  return { metrics, loading, refetchMetrics };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationTableFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4879,4882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4879,4882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4942,4945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4942,4945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5009,5012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5009,5012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5076,5079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5076,5079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Conversation } from \"@/types/chat\";\r\nimport { formatMessageTime } from \"@/utils/chatUtils\";\r\n\r\nexport function useConversations() {\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  const fetchConversations = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"🔍 Buscando conversas da tabela unificada...\");\r\n\r\n      // First check if user is authenticated\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.log(\"❌ Usuário não autenticado\");\r\n        setConversations([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.log(\"👤 Usuário autenticado:\", user.id);\r\n\r\n      // Try to get conversations - first from the main conversations table\r\n      const { data: conversationsData, error: conversationsError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"last_message_time\", { ascending: false });\r\n\r\n      if (conversationsError) {\r\n        console.error(\"Error fetching conversations:\", conversationsError);\r\n        // If conversations table fails, try contacts table as fallback\r\n        const { data: contactsData, error: contactsError } = await supabase\r\n          .from(\"contacts\")\r\n          .select(\"*\")\r\n          .eq(\"user_id\", user.id)\r\n          .order(\"created_at\", { ascending: false })\r\n          .limit(50);\r\n\r\n        if (contactsError) {\r\n          console.error(\"Error fetching contacts fallback:\", contactsError);\r\n          throw contactsError;\r\n        }\r\n\r\n        // Convert contacts to conversations format\r\n        const formattedConversations: Conversation[] = (contactsData || []).map((contact, index) => ({\r\n          id: contact.id,\r\n          name: contact.name || contact.client_name || `Cliente ${index + 1}`,\r\n          lastMessage: contact.last_message || \"Nova conversa\",\r\n          time: contact.last_message_time ? formatMessageTime(new Date(contact.last_message_time)) : formatMessageTime(new Date(contact.created_at)),\r\n          unread: contact.unread_count || 0,\r\n          avatar: \"👤\",\r\n          phone: contact.phone || \"\",\r\n          email: contact.email || \"\",\r\n          address: contact.address || \"\",\r\n          clientName: contact.client_name || \"\",\r\n          clientSize: contact.client_size || \"\",\r\n          clientType: contact.client_type || \"\",\r\n          sessionId: contact.session_id || contact.id,\r\n        }));\r\n\r\n        console.log(\"📞 Fallback para dados de contatos:\", formattedConversations.length);\r\n        setConversations(formattedConversations);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.log(\"📊 Dados de conversas recebidos:\", conversationsData?.length || 0);\r\n\r\n      if (!conversationsData || conversationsData.length === 0) {\r\n        // If no conversations exist, create some sample data or show empty state\r\n        console.log(\"📝 Nenhuma conversa encontrada, criando dados de exemplo...\");\r\n        \r\n        // Try to create a sample conversation for demonstration\r\n        const sampleConversation = {\r\n          user_id: user.id,\r\n          session_id: `demo_${Date.now()}`,\r\n          name: \"Conversa de Demonstração\",\r\n          phone: \"+55 11 99999-9999\",\r\n          last_message: \"Olá! Esta é uma conversa de demonstração.\",\r\n          last_message_time: new Date().toISOString(),\r\n          unread_count: 1,\r\n          client_data: {\r\n            client_name: \"Cliente Demo\",\r\n            client_type: \"Pessoa Física\",\r\n            address: \"São Paulo, SP\"\r\n          }\r\n        };\r\n\r\n        const { data: newConversation, error: insertError } = await supabase\r\n          .from(\"conversations\")\r\n          .insert(sampleConversation)\r\n          .select()\r\n          .single();\r\n\r\n        if (insertError) {\r\n          console.error(\"Erro ao criar conversa de exemplo:\", insertError);\r\n        } else {\r\n          console.log(\"✅ Conversa de exemplo criada:\", newConversation);\r\n        }\r\n\r\n        // Set empty state for now\r\n        setConversations([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const formattedConversations: Conversation[] = conversationsData.map((conv) => ({\r\n        id: conv.id,\r\n        name: conv.name || \"Cliente\",\r\n        lastMessage: conv.last_message || \"\",\r\n        time: conv.last_message_time ? formatMessageTime(new Date(conv.last_message_time)) : \"\",\r\n        unread: conv.unread_count || 0,\r\n        avatar: conv.avatar || \"👤\",\r\n        phone: conv.phone || \"\",\r\n        email: conv.email || \"\",\r\n        address: (conv.client_data as any)?.address || \"\",\r\n        clientName: (conv.client_data as any)?.client_name || \"\",\r\n        clientSize: (conv.client_data as any)?.client_size || \"\",\r\n        clientType: (conv.client_data as any)?.client_type || \"\",\r\n        sessionId: conv.session_id || \"\",\r\n      }));\r\n\r\n      console.log(\"✅ Conversas formatadas:\", formattedConversations.length);\r\n      setConversations(formattedConversations);\r\n      \r\n    } catch (error) {\r\n      console.error(\"❌ Erro ao buscar conversas:\", error);\r\n      setConversations([]);\r\n      toast({\r\n        title: \"Erro ao carregar conversas\",\r\n        description: \"Não foi possível carregar as conversas. Tentando novamente...\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n      console.log(\"🏁 Busca de conversas finalizada.\");\r\n    }\r\n  }, [toast]);\r\n\r\n  const updateConversationLastMessage = useCallback(async (sessionId: string) => {\r\n    try {\r\n      console.log(`📨 Atualizando última mensagem para sessão: ${sessionId}`);\r\n      \r\n      // Check if user is authenticated\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.log(\"❌ Usuário não autenticado para atualização\");\r\n        return;\r\n      }\r\n\r\n      // First try to get the latest message from n8n_chat_messages\r\n      const { data: messageData, error: messageError } = await supabase\r\n        .from(\"n8n_chat_messages\")\r\n        .select(\"*\")\r\n        .eq(\"session_id\", sessionId)\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"created_at\", { ascending: false })\r\n        .limit(1);\r\n\r\n      if (messageError) {\r\n        console.error(\"Erro ao buscar mensagens:\", messageError);\r\n        return;\r\n      }\r\n\r\n      if (messageData && messageData.length > 0) {\r\n        const lastMessage = messageData[0];\r\n        const messageContent = lastMessage.user_message || lastMessage.bot_message || \"Nova mensagem\";\r\n        \r\n        console.log(`📝 Conteúdo da última mensagem: ${messageContent}`);\r\n\r\n        // Get current unread count first\r\n        const { data: currentConv } = await supabase\r\n          .from(\"conversations\")\r\n          .select(\"unread_count\")\r\n          .eq(\"session_id\", sessionId)\r\n          .eq(\"user_id\", user.id)\r\n          .single();\r\n\r\n        const currentUnreadCount = currentConv?.unread_count || 0;\r\n\r\n        // Update the conversation with the new message\r\n        const { error: updateError } = await supabase\r\n          .from(\"conversations\")\r\n          .update({\r\n            last_message: messageContent,\r\n            last_message_time: new Date().toISOString(),\r\n            unread_count: currentUnreadCount + 1\r\n          })\r\n          .eq(\"session_id\", sessionId)\r\n          .eq(\"user_id\", user.id);\r\n\r\n        if (updateError) {\r\n          console.error(\"Erro ao atualizar conversa:\", updateError);\r\n        } else {\r\n          console.log(`✅ Conversa atualizada com sucesso: ${sessionId}`);\r\n          \r\n          // Update local state immediately\r\n          setConversations(prev => \r\n            prev.map(conv => \r\n              conv.sessionId === sessionId \r\n                ? { \r\n                    ...conv, \r\n                    lastMessage: messageContent, \r\n                    time: formatMessageTime(new Date()),\r\n                    unread: conv.unread + 1 \r\n                  }\r\n                : conv\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Erro em updateConversationLastMessage:\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, [fetchConversations]);\r\n\r\n  return {\r\n    conversations,\r\n    setConversations,\r\n    loading,\r\n    updateConversationLastMessage,\r\n    fetchConversations,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCustomFieldValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCustomFields.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardInvalidators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtimeQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtimeSubscriptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebounceCallback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebouncedCallback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebouncedValue.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[803,806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[803,806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Hook para debounce de valores\r\n * Útil para otimizar buscas e filtros em tempo real\r\n * \r\n * @param value - Valor a ser debounced\r\n * @param delay - Delay em millisegundos (padrão: 300ms)\r\n * @returns Valor debounced\r\n */\r\nexport function useDebouncedValue<T>(value: T, delay: number = 300): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Hook para debounce de callbacks\r\n * Útil para otimizar event handlers\r\n */\r\nexport function useDebouncedCallback<T extends (...args: unknown[]) => any>(\r\n  callback: T,\r\n  delay: number = 300\r\n): T {\r\n  const [debouncedCallback, setDebouncedCallback] = useState<T>(() => callback);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedCallback(() => callback);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [callback, delay]);\r\n\r\n  return debouncedCallback;\r\n}\r\n\r\n/**\r\n * Hook para debounce de estado com retorno do estado pendente\r\n * Útil quando você precisa saber se há uma mudança pendente\r\n */\r\nexport function useDebouncedState<T>(\r\n  initialValue: T,\r\n  delay: number = 300\r\n): [T, T, (value: T) => void, boolean] {\r\n  const [value, setValue] = useState<T>(initialValue);\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\r\n  const [isPending, setIsPending] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (value !== debouncedValue) {\r\n      setIsPending(true);\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n        setIsPending(false);\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    } else {\r\n      setIsPending(false);\r\n    }\r\n  }, [value, debouncedValue, delay]);\r\n\r\n  return [value, debouncedValue, setValue, isPending];\r\n}\r\n\r\n/**\r\n * Hook para debounce de search queries\r\n * Especializado para buscas com otimizações específicas\r\n */\r\nexport function useDebouncedSearch(\r\n  initialQuery: string = '',\r\n  delay: number = 300,\r\n  minLength: number = 2\r\n) {\r\n  const [query, setQuery] = useState<string>(initialQuery);\r\n  const [debouncedQuery, setDebouncedQuery] = useState<string>(\r\n    initialQuery.length >= minLength ? initialQuery : ''\r\n  );\r\n  const [isSearching, setIsSearching] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Se a query for menor que o mínimo, limpar o debounced\r\n    if (query.length < minLength) {\r\n      setDebouncedQuery('');\r\n      setIsSearching(false);\r\n      return;\r\n    }\r\n\r\n    setIsSearching(true);\r\n    const handler = setTimeout(() => {\r\n      setDebouncedQuery(query);\r\n      setIsSearching(false);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [query, delay, minLength]);\r\n\r\n  const clearSearch = () => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setIsSearching(false);\r\n  };\r\n\r\n  return {\r\n    query,\r\n    debouncedQuery,\r\n    setQuery,\r\n    isSearching,\r\n    clearSearch,\r\n    hasValidQuery: debouncedQuery.length >= minLength,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDynamicFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3976,3979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3976,3979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5096,5099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5096,5099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport { DynamicCategory } from \"@/components/clients/DynamicCategoryManager\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useCustomFieldValidation } from \"./useCustomFieldValidation\";\nimport { validateCustomField } from \"@/utils/customFieldValidation\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport function useDynamicFields(clientId: string | null) {\n  const [dynamicFields, setDynamicFields] = useState<{\n    basic: DynamicCategory[];\n    commercial: DynamicCategory[];\n    personalized: DynamicCategory[];\n    documents: DynamicCategory[];\n  }>({\n    basic: [],\n    commercial: [],\n    personalized: [],\n    documents: [],\n  });\n  const [loading, setLoading] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<{\n    [fieldId: string]: string;\n  }>({});\n\n  const { validationRules, logCustomFieldChange } = useCustomFieldValidation();\n\n  const fetchDynamicFields = useCallback(async (clientId: string) => {\n    try {\n      setLoading(true);\n\n      // Fetch custom field definitions\n      const { data: customFields, error: fieldsError } = await supabase\n        .from(\"custom_fields\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: true });\n\n      if (fieldsError) {\n        console.error(\"Error fetching custom fields:\", fieldsError);\n        return;\n      }\n\n      // Fetch client values for these fields\n      const { data: clientValues, error: valuesError } = await supabase\n        .from(\"client_custom_values\")\n        .select(\"*\")\n        .eq(\"client_id\", clientId);\n\n      if (valuesError) {\n        console.error(\"Error fetching client values:\", valuesError);\n      }\n\n      // Create a map of field values for quick lookup\n      const valuesMap = new Map();\n      if (clientValues) {\n        clientValues.forEach((value) => {\n          valuesMap.set(value.field_id, value.field_value);\n        });\n      }\n\n      // Transform the data into the expected format\n      const categorizedFields = {\n        basic: [] as DynamicCategory[],\n        commercial: [] as DynamicCategory[],\n        personalized: [] as DynamicCategory[],\n        documents: [] as DynamicCategory[],\n      };\n\n      if (customFields) {\n        customFields.forEach((field) => {\n          // Use the category from the database, defaulting to 'basic' if not set\n          const category = (field.category ||\n            \"basic\") as keyof typeof categorizedFields;\n          const fieldValue = valuesMap.get(field.id);\n\n          const dynamicField: DynamicCategory = {\n            id: field.id,\n            name: field.field_name,\n            type: field.field_type as \"text\" | \"single_select\" | \"multi_select\",\n            options: field.field_options\n              ? (field.field_options as string[])\n              : undefined,\n            value:\n              fieldValue || (field.field_type === \"multi_select\" ? [] : \"\"),\n          };\n\n          // Ensure the category exists in our categorized fields\n          if (categorizedFields[category]) {\n            categorizedFields[category].push(dynamicField);\n          } else {\n            // If category doesn't exist, default to 'basic'\n            categorizedFields.basic.push(dynamicField);\n          }\n        });\n      }\n\n      setDynamicFields(categorizedFields);\n    } catch (error) {\n      console.error(\"Error fetching dynamic fields:\", error);\n      // Reset to empty state on error\n      setDynamicFields({\n        basic: [],\n        commercial: [],\n        personalized: [],\n        documents: [],\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (clientId) {\n      fetchDynamicFields(clientId);\n    } else {\n      setDynamicFields({\n        basic: [],\n        commercial: [],\n        personalized: [],\n        documents: [],\n      });\n    }\n  }, [clientId, fetchDynamicFields]);\n\n  const updateField = useCallback(\n    async (fieldId: string, newValue: any) => {\n      if (!clientId) return;\n\n      // Get current value for audit logging\n      const currentField = Object.values(dynamicFields)\n        .flat()\n        .find((field) => field.id === fieldId);\n      const oldValue = currentField?.value;\n\n      // Validate the field\n      const validationError = validateCustomField(\n        fieldId,\n        newValue,\n        validationRules,\n      );\n\n      if (validationError) {\n        setValidationErrors((prev) => ({\n          ...prev,\n          [fieldId]: validationError.message,\n        }));\n        toast({\n          title: \"Erro de validação\",\n          description: validationError.message,\n          variant: \"destructive\",\n        });\n        return;\n      } else {\n        // Clear validation error if field is now valid\n        setValidationErrors((prev) => {\n          const newErrors = { ...prev };\n          delete newErrors[fieldId];\n          return newErrors;\n        });\n      }\n\n      // Helper function to update a field in the dynamic fields state\n      const updateDynamicFieldValue = (prevFields: typeof dynamicFields, fieldId: string, newValue: any) => {\n        const updated = { ...prevFields };\n\n        // Find and update the field in the appropriate category\n        Object.keys(updated).forEach((category) => {\n          const categoryFields = updated[category as keyof typeof updated];\n          const fieldIndex = categoryFields.findIndex(\n            (field) => field.id === fieldId,\n          );\n          if (fieldIndex !== -1) {\n            categoryFields[fieldIndex] = {\n              ...categoryFields[fieldIndex],\n              value: newValue,\n            };\n          }\n        });\n\n        return updated;\n      };\n\n      // Optimistically update the UI\n      setDynamicFields(prev => updateDynamicFieldValue(prev, fieldId, newValue));\n\n      try {\n        // Save the value to the database\n        const { error } = await supabase.from(\"client_custom_values\").upsert(\n          {\n            client_id: clientId,\n            field_id: fieldId,\n            field_value: newValue,\n          },\n          {\n            onConflict: \"client_id,field_id\",\n          },\n        );\n\n        if (error) {\n          console.error(\"Error saving field value:\", error);\n          toast({\n            title: \"Erro ao salvar\",\n            description: \"Não foi possível salvar o valor do campo.\",\n            variant: \"destructive\",\n          });\n          // Optionally revert the optimistic update here\n        } else {\n          // Log the change for audit purposes\n          await logCustomFieldChange(\n            clientId,\n            fieldId,\n            oldValue,\n            newValue,\n            oldValue === undefined ? \"create\" : \"update\",\n          );\n\n          console.log(\n            `Field ${fieldId} updated successfully with value:`,\n            newValue,\n          );\n        }\n      } catch (error) {\n        console.error(\"Error updating field:\", error);\n        toast({\n          title: \"Erro ao salvar\",\n          description: \"Não foi possível salvar o valor do campo.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [clientId, dynamicFields, validationRules, logCustomFieldChange],\n  );\n\n  return {\n    dynamicFields,\n    loading,\n    validationErrors,\n    refetch: () => clientId && fetchDynamicFields(clientId),\n    updateField,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEpisodicMemory.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":105,"column":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { N8nChatMemory, EpisodicMemory, Memory } from '@/types/memory';\r\nimport { useSupabaseEpisodicMemory } from './useSupabaseEpisodicMemory';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseEpisodicMemoryOptions {\r\n  sessionId: string;\r\n  useCache?: boolean;\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface UseEpisodicMemoryResult {\r\n  memories: Memory[];\r\n  timeline: EpisodicMemory[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  getMemoriesByPeriod: (startDate: string, endDate: string) => Promise<Memory[]>;\r\n  storeMemory: (memory: Partial<N8nChatMemory>) => Promise<N8nChatMemory | null>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar memória episódica com suporte a cache e linha do tempo\r\n */\r\nexport function useEpisodicMemory({\r\n  sessionId,\r\n  useCache = true,\r\n  autoRefresh = false,\r\n  refreshInterval = 30000, // 30 segundos\r\n}: UseEpisodicMemoryOptions): UseEpisodicMemoryResult {\r\n  const [memories, setMemories] = useState<Memory[]>([]);\r\n  const [timeline, setTimeline] = useState<EpisodicMemory[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const {\r\n    fetchMemories,\r\n    fetchTimeline,\r\n    fetchMemoriesByPeriod,\r\n    updateImportance: updateImportanceQuery,\r\n    storeMemory: storeMemoryQuery,\r\n  } = useSupabaseEpisodicMemory();\r\n\r\n  // Função para carregar todos os dados episódicos\r\n  const loadEpisodicData = useCallback(async () => {\r\n    if (!sessionId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Carregar memórias e linha do tempo em paralelo\r\n      const [memoriesData, timelineData] = await Promise.all([\r\n        fetchMemories(sessionId, 50),\r\n        fetchTimeline(sessionId),\r\n      ]);\r\n\r\n      // Convert N8nChatMemory to Memory format\r\n      const convertedMemories: Memory[] = memoriesData.map(item => ({\r\n        id: item.id,\r\n        message: typeof item.message === 'string' ? item.message : JSON.stringify(item.message),\r\n        memory_type: item.memory_type || 'episodic',\r\n        created_at: item.created_at || new Date().toISOString(),\r\n        importance: item.importance,\r\n        entities: item.entities,\r\n        context: item.context\r\n      }));\r\n\r\n      setMemories(convertedMemories);\r\n      setTimeline(timelineData);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar dados episódicos:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao carregar dados episódicos'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sessionId, useCache]);\r\n\r\n  // Função para buscar memórias por período\r\n  const getMemoriesByPeriod = useCallback(\r\n    async (startDate: string, endDate: string): Promise<Memory[]> => {\r\n      if (!sessionId) return [];\r\n\r\n      try {\r\n        const results = await fetchMemoriesByPeriod(sessionId, startDate, endDate);\r\n        \r\n        // Convert N8nChatMemory to Memory format\r\n        return results.map(item => ({\r\n          id: item.id,\r\n          message: typeof item.message === 'string' ? item.message : JSON.stringify(item.message),\r\n          memory_type: item.memory_type || 'episodic',\r\n          created_at: item.created_at || new Date().toISOString(),\r\n          importance: item.importance,\r\n          entities: item.entities,\r\n          context: item.context\r\n        }));\r\n      } catch (err) {\r\n        logger.error('Erro ao buscar memórias por período:', err);\r\n        return [];\r\n      }\r\n    },\r\n    [\u0001, fetchMemoriesByPeriod]\r\n  );\r\n\r\n  // Função para armazenar nova memória\r\n  const storeMemory = useCallback(\r\n    async (memory: Partial<N8nChatMemory>): Promise<N8nChatMemory | null> => {\r\n      if (!sessionId) return null;\r\n\r\n      try {\r\n        const newMemory = await storeMemoryQuery({ ...memory, session_id: sessionId });\r\n\r\n        if (newMemory) {\r\n          // Convert and update local state\r\n          const convertedMemory: Memory = {\r\n            id: newMemory.id,\r\n            message: typeof newMemory.message === 'string' ? newMemory.message : JSON.stringify(newMemory.message),\r\n            memory_type: newMemory.memory_type || 'episodic',\r\n            created_at: newMemory.created_at || new Date().toISOString(),\r\n            importance: newMemory.importance,\r\n            entities: newMemory.entities,\r\n            context: newMemory.context\r\n          };\r\n          \r\n          setMemories(prev => [convertedMemory, ...prev]);\r\n          \r\n          // Recarregar linha do tempo\r\n          const updatedTimeline = await fetchTimeline(sessionId);\r\n          setTimeline(updatedTimeline);\r\n        }\r\n\r\n        return newMemory;\r\n      } catch (err) {\r\n        logger.error('Erro ao armazenar memória:', err);\r\n        return null;\r\n      }\r\n    },\r\n    [sessionId]\r\n  );\r\n\r\n  // Função para atualizar importância\r\n  const updateImportance = useCallback(\r\n    async (memoryId: number, importance: number): Promise<boolean> => {\r\n      try {\r\n        const success = await updateImportanceQuery(memoryId, importance);\r\n\r\n        if (success) {\r\n          // Atualizar estado local\r\n          setMemories(prev =>\r\n            prev.map(memory =>\r\n              memory.id === memoryId ? { ...memory, importance } : memory\r\n            )\r\n          );\r\n          \r\n          // Recarregar linha do tempo\r\n          const updatedTimeline = await fetchTimeline(sessionId);\r\n          setTimeline(updatedTimeline);\r\n        }\r\n\r\n        return success;\r\n      } catch (err) {\r\n        logger.error('Erro ao atualizar importância:', err);\r\n        return false;\r\n      }\r\n    },\r\n    [sessionId]\r\n  );\r\n\r\n  // Função para limpar cache\r\n  const clearCache = useCallback((): void => {\r\n    // noop - cache layer not implemented\r\n  }, []);\r\n\r\n  // Carregar dados iniciais\r\n  useEffect(() => {\r\n    loadEpisodicData();\r\n  }, [loadEpisodicData]);\r\n\r\n  // Configurar atualização automática se habilitada\r\n  useEffect(() => {\r\n    if (!autoRefresh || refreshInterval <= 0) return;\r\n\r\n    const intervalId = setInterval(() => {\r\n      loadEpisodicData();\r\n    }, refreshInterval);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [autoRefresh, refreshInterval, loadEpisodicData]);\r\n\r\n  return {\r\n    memories,\r\n    timeline,\r\n    loading,\r\n    error,\r\n    refresh: loadEpisodicData,\r\n    getMemoriesByPeriod,\r\n    storeMemory,\r\n    updateImportance,\r\n    clearCache,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEventFormDialog.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":261,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\r\nimport { format, parse, parseISO } from 'date-fns';\r\nimport { Contact } from '@/types/client';\r\nimport { EventFormData, CalendarEvent } from '@/hooks/useCalendarEvents';\r\nimport { useOptimizedContactsData } from '@/hooks/useOptimizedContactsData';\r\nimport { useEventFormState } from '@/hooks/useEventFormState';\r\nimport { EventFormState } from '@/types/eventForm';\r\nimport { COLORS, SERVICES, COLLABORATORS, DURATIONS, ATTENDANCE_TYPES } from '@/constants/eventFormConstants';\r\nimport { \r\n  validateForm, \r\n  validateNewClientData, \r\n  validateServiceSelection, \r\n  validateDateTimeSelection \r\n} from '@/utils/eventFormValidation';\r\nimport {\r\n  createBlockedDateDescription,\r\n  createRegularEventDescription,\r\n  prepareFormData,\r\n  addTag as addTagHelper,\r\n  removeTag as removeTagHelper,\r\n  extractTags\r\n} from '@/utils/eventFormHelpers';\r\n\r\ninterface UseEventFormDialogProps {\r\n  event?: CalendarEvent;\r\n  open: boolean;\r\n}\r\n\r\nexport const useEventFormDialog = ({ event, open }: UseEventFormDialogProps) => {\r\n  const { contacts } = useOptimizedContactsData();\r\n  const { state, updateState, resetForm: resetFormState } = useEventFormState();\r\n\r\n  // Filter contacts based on search term\r\n  const filteredContacts = contacts.filter(\r\n    contact => \r\n      contact.name.toLowerCase().includes(state.searchTerm.toLowerCase()) ||\r\n      (contact.email && contact.email.toLowerCase().includes(state.searchTerm.toLowerCase())) ||\r\n      (contact.phone && contact.phone.includes(state.searchTerm))\r\n  );\r\n\r\n\r\n  // Set basic event information from existing event\r\n  const setBasicEventInfo = (event: CalendarEvent) => {\r\n    const start = parseISO(event.start);\r\n    const end = parseISO(event.end);\r\n    const durationInMinutes = Math.round((end.getTime() - start.getTime()) / (1000 * 60));\r\n    \r\n    updateState({\r\n      summary: event.summary || \"\",\r\n      automation: \"\",\r\n      collaborator: event.hostName || \"\",\r\n      eventDescription: event.description || \"\",\r\n      email: event.attendees?.find((a) => a?.email)?.email || \"\",\r\n      startDateTime: format(start, \"yyyy-MM-dd'T'HH:mm\"),\r\n      endDateTime: format(end, \"yyyy-MM-dd'T'HH:mm\"),\r\n      selectedColor: COLORS[0],\r\n      selectedDuration: durationInMinutes,\r\n    });\r\n  };\r\n\r\n  // Find service information from event description\r\n  const findServiceInfo = (event: CalendarEvent) => {\r\n    const foundService = SERVICES.find(service => \r\n      event.summary?.includes(service) || event.description?.includes(service)\r\n    );\r\n    \r\n    if (foundService) {\r\n      updateState({ selectedService: foundService });\r\n    }\r\n  };\r\n\r\n  // Find client information from event attendees\r\n  const findClientInfo = (event: CalendarEvent) => {\r\n    const clientEmail = event.attendees?.find((a) => a?.email)?.email;\r\n    if (clientEmail) {\r\n      const foundClient = contacts.find(c => c.email === clientEmail);\r\n      if (foundClient) {\r\n        updateState({\r\n          selectedClient: foundClient,\r\n          isNewClient: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Determine attendance type and location/link from event description\r\n  const determineAttendanceInfo = (event: CalendarEvent) => {\r\n    if (event.description?.toLowerCase().includes(\"online\") || \r\n        event.description?.toLowerCase().includes(\"zoom\") || \r\n        event.description?.toLowerCase().includes(\"meet\")) {\r\n      // Try to extract meeting link\r\n      const linkMatch = event.description?.match(/(https?:\\/\\/[^\\s]+)/);\r\n      \r\n      updateState({\r\n        attendanceType: \"online\",\r\n        meetingLink: linkMatch ? linkMatch[0] : \"\",\r\n      });\r\n    } else {\r\n      // Try to extract location\r\n      const locationLines = event.description?.split('\\n').filter(line => \r\n        line.toLowerCase().includes(\"local\") || \r\n        line.toLowerCase().includes(\"endereço\") ||\r\n        line.toLowerCase().includes(\"localização\")\r\n      );\r\n      \r\n      updateState({\r\n        attendanceType: \"presencial\",\r\n        location: locationLines && locationLines.length > 0 ?\r\n          locationLines[0].replace(/local|endereço|localização/i, \"\").trim() : \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Check if date is blocked and extract reason\r\n  const checkBlockedDate = (event: CalendarEvent) => {\r\n    if (event.summary?.toLowerCase().includes(\"bloqueado\") || \r\n        event.description?.toLowerCase().includes(\"bloqueado\")) {\r\n      // Try to extract block reason\r\n      const reasonLines = event.description?.split('\\n').filter(line => \r\n        line.toLowerCase().includes(\"motivo\") || \r\n        line.toLowerCase().includes(\"razão\")\r\n      );\r\n      \r\n      updateState({\r\n        isBlockingDate: true,\r\n        blockReason: reasonLines && reasonLines.length > 0 ?\r\n          reasonLines[0].replace(/motivo|razão/i, \"\").trim() : \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  // Determine initial status from event status\r\n  const determineInitialStatus = (event: CalendarEvent) => {\r\n    if (event.status === \"confirmed\") {\r\n      updateState({ initialStatus: \"confirmado\" });\r\n    } else if (event.status === \"tentative\") {\r\n      updateState({ initialStatus: \"pendente\" });\r\n    }\r\n  };\r\n\r\n  const validateFormLocal = (): boolean => {\r\n    return validateForm(state);\r\n  };\r\n\r\n  // Event handlers\r\n  const handleSubmit = (e: React.FormEvent): EventFormData | null => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateFormLocal()) {\r\n      return null;\r\n    }\r\n    \r\n    const startDate = state.startDateTime ? \r\n      parse(state.startDateTime, \"yyyy-MM-dd'T'HH:mm\", new Date()) : new Date();\r\n    const endDate = new Date(startDate.getTime() + state.selectedDuration * 60 * 1000);\r\n    \r\n    let eventInfo;\r\n    if (state.isBlockingDate) {\r\n      eventInfo = createBlockedDateDescription(state);\r\n    } else {\r\n      eventInfo = createRegularEventDescription(state);\r\n    }\r\n    \r\n    return prepareFormData(eventInfo.summary, eventInfo.description, startDate, endDate, state);\r\n  };\r\n\r\n  const handleSelectClient = (contact: Contact) => {\r\n    updateState({\r\n      selectedClient: contact,\r\n      isNewClient: false,\r\n      email: contact.email || \"\",\r\n      searchTerm: \"\",\r\n      activeTab: \"service\"\r\n    });\r\n  };\r\n\r\n  const handleNewClient = () => {\r\n    updateState({\r\n      isNewClient: true,\r\n      selectedClient: null\r\n    });\r\n  };\r\n\r\n  const validateNewClientDataLocal = (): boolean => {\r\n    return validateNewClientData(state);\r\n  };\r\n\r\n  const handleSaveNewClient = () => {\r\n    if (validateNewClientDataLocal()) {\r\n      updateState({\r\n        email: state.newClientData.email,\r\n        activeTab: \"service\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateServiceSelectionLocal = (): boolean => {\r\n    return validateServiceSelection(state);\r\n  };\r\n\r\n  const handleServiceNext = () => {\r\n    if (validateServiceSelectionLocal()) {\r\n      updateState({ activeTab: \"datetime\" });\r\n    }\r\n  };\r\n\r\n  const validateDateTimeSelectionLocal = (): boolean => {\r\n    return validateDateTimeSelection(state);\r\n  };\r\n\r\n  const handleDateTimeNext = () => {\r\n    if (validateDateTimeSelectionLocal()) {\r\n      updateState({ activeTab: \"attendance\" });\r\n    }\r\n  };\r\n\r\n  const updateEndTime = () => {\r\n    if (state.startDateTime) {\r\n      const startDate = parse(state.startDateTime, \"yyyy-MM-dd'T'HH:mm\", new Date());\r\n      const endDate = new Date(startDate.getTime() + state.selectedDuration * 60 * 1000);\r\n      updateState({ endDateTime: format(endDate, \"yyyy-MM-dd'T'HH:mm\") });\r\n    }\r\n  };\r\n\r\n  const addTag = () => {\r\n    addTagHelper(state, updateState);\r\n  };\r\n\r\n  const removeTag = (id: string) => {\r\n    removeTagHelper(id, state, updateState);\r\n  };\r\n\r\n  const handleDeleteDialogOpen = () => {\r\n    updateState({ isDeleteDialogOpen: true });\r\n  };\r\n\r\n  const handleDeleteDialogClose = () => {\r\n    updateState({ isDeleteDialogOpen: false });\r\n  };\r\n\r\n  // Load event data when event changes or dialog opens\r\n  useEffect(() => {\r\n    if (event && open) {\r\n      setBasicEventInfo(event);\r\n      findServiceInfo(event);\r\n      findClientInfo(event);\r\n      determineAttendanceInfo(event);\r\n      checkBlockedDate(event);\r\n      const extractedTags = extractTags(event.description);\r\n      updateState({ tags: extractedTags });\r\n      determineInitialStatus(event);\r\n    } else if (!open) {\r\n      resetFormState();\r\n    }\r\n  }, [event, open, contacts]);\r\n\r\n  // Update end time when start time or duration changes\r\n  useEffect(() => {\r\n    updateEndTime();\r\n  }, [\u0001, updateEndTime]);\r\n\r\n  return {\r\n    // State\r\n    state,\r\n    updateState,\r\n    filteredContacts,\r\n    constants: {\r\n      COLORS,\r\n      SERVICES,\r\n      COLLABORATORS,\r\n      DURATIONS,\r\n      ATTENDANCE_TYPES,\r\n    },\r\n    \r\n    // Validation\r\n    validateForm: validateFormLocal,\r\n    validateNewClientData: validateNewClientDataLocal,\r\n    validateServiceSelection: validateServiceSelectionLocal,\r\n    validateDateTimeSelection: validateDateTimeSelectionLocal,\r\n    \r\n    // Event handlers\r\n    handleSubmit,\r\n    handleSelectClient,\r\n    handleNewClient,\r\n    handleSaveNewClient,\r\n    handleServiceNext,\r\n    handleDateTimeNext,\r\n    addTag,\r\n    removeTag,\r\n    handleDeleteDialogOpen,\r\n    handleDeleteDialogClose,\r\n    \r\n    // Helper functions\r\n    resetForm: resetFormState,\r\n    updateEndTime,\r\n  };\r\n};\r\n\r\nexport default useEventFormDialog;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEventFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEvolutionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFAQManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFAQQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFetchCalendarEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFilterDialog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFilteredEvents.ts","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":39,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":41,"endColumn":12,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1275,1502],"text":"{ const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd }; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":42,"endColumn":79,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1275,1502],"text":"{ const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd }; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo, useCallback } from \"react\";\r\nimport { parseISO, isWithinInterval, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\r\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\r\nimport { ScheduleEvent } from \"@/hooks/useScheduleData\";\r\nimport { convertScheduleEventsToCalendarEvents } from \"@/utils/scheduleUtils\";\r\n\r\nexport function useFilteredEvents(\r\n  events: CalendarEvent[],\r\n  scheduleEvents: ScheduleEvent[],\r\n  statusFilter: string,\r\n  calendarViewType: \"mes\" | \"semana\" | \"dia\" | \"lista\",\r\n  searchTerm: string,\r\n  selectedDate: Date | undefined,\r\n  currentMonth: Date\r\n) {\r\n  const getListModeFilterPeriod = useCallback(() => {\r\n    const today = new Date();\r\n    switch (calendarViewType) {\r\n      case \"dia\":\r\n        if (selectedDate) {\r\n          return {\r\n            start: new Date(\r\n              selectedDate.getFullYear(),\r\n              selectedDate.getMonth(),\r\n              selectedDate.getDate(),\r\n            ),\r\n            end: new Date(\r\n              selectedDate.getFullYear(),\r\n              selectedDate.getMonth(),\r\n              selectedDate.getDate(),\r\n              23,\r\n              59,\r\n              59,\r\n            ),\r\n          };\r\n        }\r\n        return null;\r\n      case \"semana\":\r\n        const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd };\r\n      case \"mes\":\r\n        return {\r\n          start: startOfMonth(currentMonth),\r\n          end: endOfMonth(currentMonth),\r\n        };\r\n      case \"lista\":\r\n        // For \"lista\" view, don't apply date filtering\r\n        return null;\r\n      default:\r\n        return {\r\n          start: new Date(\r\n            today.getFullYear(),\r\n            today.getMonth(),\r\n            today.getDate(),\r\n          ),\r\n          end: new Date(\r\n            today.getFullYear(),\r\n            today.getMonth(),\r\n            today.getDate(),\r\n            23,\r\n            59,\r\n            59,\r\n          ),\r\n        };\r\n    }\r\n  }, [calendarViewType, selectedDate, currentMonth]);\r\n\r\n  const filteredEvents = useMemo(() => {\r\n    // Convert schedule events to calendar events\r\n    const convertedScheduleEvents = convertScheduleEventsToCalendarEvents(scheduleEvents);\r\n    \r\n    // Combine events from calendar with events from schedule\r\n    const allEvents = [...events, ...convertedScheduleEvents];\r\n    \r\n    return allEvents\r\n      .filter((event) => {\r\n        if (!event.start || typeof event.start !== \"string\") return false;\r\n        if (statusFilter !== \"all\" && event.status !== statusFilter)\r\n          return false;\r\n        \r\n        // Apply date filtering based on calendar view type\r\n        if (calendarViewType === \"lista\") {\r\n          // For \"lista\" view, don't apply date filtering\r\n          return true;\r\n        } else {\r\n          try {\r\n            const eventDate = parseISO(event.start);\r\n            if (isNaN(eventDate.getTime())) return false;\r\n            const filterPeriod = getListModeFilterPeriod();\r\n            if (!filterPeriod) return true;\r\n            return isWithinInterval(eventDate, {\r\n              start: filterPeriod.start,\r\n              end: filterPeriod.end,\r\n            });\r\n          } catch {\r\n            return false;\r\n          }\r\n        }\r\n      })\r\n      .filter((event) => {\r\n        if (!searchTerm) return true;\r\n        const searchLower = searchTerm.toLowerCase();\r\n        return (\r\n          (event.summary &&\r\n            event.summary.toLowerCase().includes(searchLower)) ||\r\n          (event.description &&\r\n            event.description.toLowerCase().includes(searchLower)) ||\r\n          (event.attendees &&\r\n            event.attendees.some(\r\n              (attendee) =>\r\n                attendee?.email &&\r\n                attendee.email.toLowerCase().includes(searchLower),\r\n            ))\r\n        );\r\n      })\r\n      .sort((a, b) => {\r\n        try {\r\n          const dateA = a.start ? parseISO(a.start) : new Date(0);\r\n          const dateB = b.start ? parseISO(b.start) : new Date(0);\r\n          // For \"lista\" view, sort by most recent first\r\n          if (calendarViewType === \"lista\") {\r\n            return dateB.getTime() - dateA.getTime();\r\n          }\r\n          return dateA.getTime() - dateB.getTime();\r\n        } catch {\r\n          return 0;\r\n        }\r\n      });\r\n  }, [events, scheduleEvents, statusFilter, calendarViewType, getListModeFilterPeriod, searchTerm]);\r\n\r\n  return filteredEvents;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFunnelDataQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useHosts.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":18,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Database } from '@/integrations/supabase/types';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\ntype Host = Database['public']['Tables']['employees']['Row'];\r\n\r\nexport const useHosts = () => {\r\n  const { user } = useAuth();\r\n  const [hosts, setHosts] = useState<Host[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchHosts();\r\n    }\r\n  }, [\u0001, fetchHosts]);\r\n\r\n  const fetchHosts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user?.id)\r\n        .order(\"name\", { ascending: true });\r\n\r\n      if (error) throw error;\r\n      setHosts(data as Host[] || []);\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar anfitriões:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar os anfitriões.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    hosts,\r\n    loading,\r\n    refetch: fetchHosts,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStages.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'loadStagesFromLocalStorage' and 'saveStageToLocalStorage'. Either include them or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadStagesFromLocalStorage, saveStageToLocalStorage, user?.id]","fix":{"range":[2277,2283],"text":"[loadStagesFromLocalStorage, saveStageToLocalStorage, user?.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\n\r\nexport interface KanbanStage {\r\n  id: string;\r\n  title: string;\r\n  ordering: number;\r\n  settings?: {\r\n    color?: string;\r\n  };\r\n}\r\n\r\nconst DEFAULT_STAGES = [\r\n  \"Entraram\",\r\n  \"Conversaram\",\r\n  \"Agendaram\",\r\n  \"Compareceram\",\r\n  \"Negociaram\",\r\n  \"Postergaram\",\r\n  \"Converteram\",\r\n];\r\n\r\nexport function useKanbanStages() {\r\n  const { user } = useAuth();\r\n  const [stages, setStages] = useState<KanbanStage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  // Store stages in localStorage to persist between page refreshes\r\n  const saveStageToLocalStorage = (stages: KanbanStage[]) => {\r\n    try {\r\n      const userId = user?.id || 'anonymous';\r\n      localStorage.setItem(`kanban_stages_${userId}`, JSON.stringify(stages));\r\n    } catch (error) {\r\n      console.error(\"Error saving stages to localStorage:\", error);\r\n    }\r\n  };\r\n\r\n  // Load stages from localStorage\r\n  const loadStagesFromLocalStorage = (): KanbanStage[] | null => {\r\n    try {\r\n      const userId = user?.id || 'anonymous';\r\n      const storedStages = localStorage.getItem(`kanban_stages_${userId}`);\r\n      if (storedStages) {\r\n        return JSON.parse(storedStages);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading stages from localStorage:\", error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Load user stages or fallback to DEFAULT_STAGES\r\n  const fetchStages = useCallback(async () => {\r\n    setLoading(true);\r\n    console.log(\"Fetching kanban stages, user:\", user?.id);\r\n    \r\n    // First try to load from localStorage\r\n    const storedStages = loadStagesFromLocalStorage();\r\n    if (storedStages && storedStages.length > 0) {\r\n      console.log(\"Loaded stages from localStorage:\", storedStages.length);\r\n      setStages(storedStages);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    // If no stored stages, use default stages\r\n    console.log(\"No stored stages, using default stages\");\r\n    const defaultStages = DEFAULT_STAGES.map((stage, idx) => ({\r\n      id: String(idx),\r\n      title: stage,\r\n      ordering: idx,\r\n    }));\r\n    \r\n    setStages(defaultStages);\r\n    saveStageToLocalStorage(defaultStages);\r\n    setLoading(false);\r\n  }, [user]);\r\n\r\n  const addStage = async (title: string) => {\r\n    // Prevent duplicates by title\r\n    if (stages.some((s) => s.title.toLowerCase() === title.toLowerCase()))\r\n      return;\r\n      \r\n    console.log(\"Adding new stage:\", title);\r\n    const newStage = {\r\n      id: `stage-${Date.now()}`,\r\n      title,\r\n      ordering: stages.length,\r\n    };\r\n    \r\n    const updatedStages = [...stages, newStage];\r\n    setStages(updatedStages);\r\n    saveStageToLocalStorage(updatedStages);\r\n  };\r\n\r\n  const removeStage = async (id: string) => {\r\n    console.log(\"Removing stage:\", id);\r\n    const updatedStages = stages.filter((s) => s.id !== id);\r\n    setStages(updatedStages);\r\n    saveStageToLocalStorage(updatedStages);\r\n  };\r\n\r\n  const reorderStages = async (newStages: KanbanStage[]) => {\r\n    console.log(\"Reordering stages\");\r\n    setStages(newStages);\r\n    saveStageToLocalStorage(newStages);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"useKanbanStages: Initial fetch\");\r\n    fetchStages();\r\n  }, [fetchStages]);\r\n\r\n  return {\r\n    stages,\r\n    loading,\r\n    fetchStages,\r\n    addStage,\r\n    removeStage,\r\n    reorderStages,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesFunnelData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesLocal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesSupabase.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":94,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport interface KanbanStage {\r\n  id: string;\r\n  title: string;\r\n  ordering: number;\r\n  settings?: {\r\n    color?: string;\r\n  };\r\n}\r\n\r\nconst DEFAULT_STAGES = [\r\n  \"Entraram\",\r\n  \"Conversaram\", \r\n  \"Agendaram\",\r\n  \"Compareceram\",\r\n  \"Negociaram\",\r\n  \"Postergaram\",\r\n  \"Converteram\",\r\n];\r\n\r\n// Helper function to safely parse settings from database Json\r\nconst parseStageSettings = (settings: unknown): { color?: string } => {\r\n  if (!settings) return { color: '#6b7280' };\r\n  \r\n  // If settings is already an object with color property\r\n  if (typeof settings === 'object' && settings !== null && !Array.isArray(settings)) {\r\n    return {\r\n      color: typeof settings.color === 'string' ? settings.color : '#6b7280'\r\n    };\r\n  }\r\n  \r\n  // Default fallback\r\n  return { color: '#6b7280' };\r\n};\r\n\r\nexport function useKanbanStagesSupabase() {\r\n  const { user } = useAuth();\r\n  const [stages, setStages] = useState<KanbanStage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const fetchStages = useCallback(async () => {\r\n    if (!user?.id) {\r\n      console.log(\"No user ID available for fetching stages\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"Fetching kanban stages for user:\", user.id);\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('ordering', { ascending: true });\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching stages:\", error);\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"Fetched stages from Supabase:\", data);\r\n\r\n      if (!data || data.length === 0) {\r\n        console.log(\"No stages found, creating default stages\");\r\n        await createDefaultStages();\r\n        return;\r\n      }\r\n\r\n      const transformedStages: KanbanStage[] = data.map(stage => ({\r\n        id: stage.id,\r\n        title: stage.title,\r\n        ordering: stage.ordering,\r\n        settings: parseStageSettings(stage.settings)\r\n      }));\r\n\r\n      setStages(transformedStages);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch kanban stages:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar estágios\",\r\n        description: \"Não foi possível carregar os estágios do kanban.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [\u0001, createDefaultStages]);\r\n\r\n  const createDefaultStages = async () => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      console.log(\"Creating default stages for user:\", user.id);\r\n      \r\n      const defaultStagesData = DEFAULT_STAGES.map((title, index) => ({\r\n        title,\r\n        ordering: index,\r\n        user_id: user.id,\r\n        settings: { color: '#6b7280' }\r\n      }));\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .insert(defaultStagesData)\r\n        .select();\r\n\r\n      if (error) {\r\n        console.error(\"Error creating default stages:\", error);\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"Created default stages:\", data);\r\n\r\n      const transformedStages: KanbanStage[] = data.map(stage => ({\r\n        id: stage.id,\r\n        title: stage.title,\r\n        ordering: stage.ordering,\r\n        settings: parseStageSettings(stage.settings)\r\n      }));\r\n\r\n      setStages(transformedStages);\r\n\r\n      toast({\r\n        title: \"Estágios criados\",\r\n        description: \"Estágios padrão do kanban foram criados com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to create default stages:\", error);\r\n      toast({\r\n        title: \"Erro ao criar estágios\",\r\n        description: \"Não foi possível criar os estágios padrão.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const addStage = async (title: string) => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      console.log(\"Adding new stage:\", title);\r\n      \r\n      const newStageData = {\r\n        title,\r\n        ordering: stages.length,\r\n        user_id: user.id,\r\n        settings: { color: '#6b7280' }\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .insert([newStageData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const newStage: KanbanStage = {\r\n        id: data.id,\r\n        title: data.title,\r\n        ordering: data.ordering,\r\n        settings: parseStageSettings(data.settings)\r\n      };\r\n\r\n      setStages(prev => [...prev, newStage]);\r\n\r\n      toast({\r\n        title: \"Estágio adicionado\",\r\n        description: `O estágio \"${title}\" foi adicionado com sucesso.`,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to add stage:\", error);\r\n      toast({\r\n        title: \"Erro ao adicionar estágio\",\r\n        description: \"Não foi possível adicionar o novo estágio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStage = async (stageId: string, title: string, color: string) => {\r\n    try {\r\n      console.log(\"Updating stage:\", stageId, title, color);\r\n\r\n      const { error } = await supabase\r\n        .from('kanban_stages')\r\n        .update({\r\n          title,\r\n          settings: { color }\r\n        })\r\n        .eq('id', stageId);\r\n\r\n      if (error) throw error;\r\n\r\n      setStages(prev => prev.map(stage => \r\n        stage.id === stageId \r\n          ? { ...stage, title, settings: { ...stage.settings, color } }\r\n          : stage\r\n      ));\r\n\r\n      toast({\r\n        title: \"Estágio atualizado\",\r\n        description: `O estágio foi atualizado com sucesso.`,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to update stage:\", error);\r\n      toast({\r\n        title: \"Erro ao atualizar estágio\",\r\n        description: \"Não foi possível atualizar o estágio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeStage = async (stageId: string) => {\r\n    try {\r\n      console.log(\"Removing stage:\", stageId);\r\n\r\n      const { error } = await supabase\r\n        .from('kanban_stages')\r\n        .delete()\r\n        .eq('id', stageId);\r\n\r\n      if (error) throw error;\r\n\r\n      setStages(prev => prev.filter(stage => stage.id !== stageId));\r\n\r\n      toast({\r\n        title: \"Estágio removido\",\r\n        description: \"O estágio foi removido com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to remove stage:\", error);\r\n      toast({\r\n        title: \"Erro ao remover estágio\",\r\n        description: \"Não foi possível remover o estágio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStages();\r\n  }, [fetchStages]);\r\n\r\n  return {\r\n    stages,\r\n    loading,\r\n    fetchStages,\r\n    addStage,\r\n    updateStage,\r\n    removeStage,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useMetricsFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useNormalizedKanbanStages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedContactsData.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'globalContactsCache' is never reassigned. Use 'const' instead.","line":7,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":12,"endColumn":2,"fix":{"range":[253,457],"text":"const globalContactsCache: {\r\n  data: Contact[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContactsService } from \"./useContactsService\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\n// Global cache to avoid multiple API calls\r\nlet globalContactsCache: {\r\n  data: Contact[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\r\n\r\nexport const useOptimizedContactsData = () => {\r\n  const [contacts, setContacts] = useState<Contact[]>(globalContactsCache.data);\r\n  const [loadingContacts, setLoadingContacts] = useState(globalContactsCache.loading);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  \r\n  const { fetchAllContacts, updateContactKanbanStage } = useContactsService();\r\n\r\n  const notifyListeners = useCallback(() => {\r\n    globalContactsCache.listeners.forEach(listener => listener());\r\n  }, []);\r\n\r\n  const fetchClients = useCallback(async (forceRefresh = false) => {\r\n    const now = Date.now();\r\n    const isCacheValid = !forceRefresh && (now - globalContactsCache.lastFetch) < CACHE_DURATION;\r\n    \r\n    // If cache is valid and we have data, use it\r\n    if (isCacheValid && globalContactsCache.data.length > 0) {\r\n      setContacts(globalContactsCache.data);\r\n      setLoadingContacts(false);\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous requests\r\n    if (globalContactsCache.loading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      globalContactsCache.loading = true;\r\n      setLoadingContacts(true);\r\n      notifyListeners();\r\n      \r\n      console.log(\"Fetching contacts from Supabase (optimized)...\");\r\n      const fetchedContacts = await fetchAllContacts();\r\n      console.log(\"Fetched contacts (optimized):\", fetchedContacts.length);\r\n      \r\n      globalContactsCache.data = fetchedContacts;\r\n      globalContactsCache.lastFetch = now;\r\n      \r\n      setContacts(fetchedContacts);\r\n      notifyListeners();\r\n    } catch (error) {\r\n      console.error(\"Error fetching contacts:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar contatos\",\r\n        description: \"Não foi possível carregar a lista de contatos.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      globalContactsCache.loading = false;\r\n      setLoadingContacts(false);\r\n      notifyListeners();\r\n    }\r\n  }, [fetchAllContacts, notifyListeners]);\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    await fetchClients(true);\r\n    setRefreshing(false);\r\n  };\r\n\r\n  const handleKanbanStageChange = async (contactId: string, newStageId: string) => {\r\n    try {\r\n      console.log(`[useOptimizedContactsData] Updating contact ${contactId} to stage ${newStageId}`);\r\n      \r\n      // Optimistic update in cache and local state\r\n      const updatedContacts = globalContactsCache.data.map(contact =>\r\n        contact.id === contactId\r\n          ? { ...contact, kanban_stage_id: newStageId, kanbanStage: newStageId }\r\n          : contact\r\n      );\r\n      \r\n      globalContactsCache.data = updatedContacts;\r\n      setContacts(updatedContacts);\r\n      notifyListeners();\r\n\r\n      // Update in database\r\n      await updateContactKanbanStage(contactId, newStageId);\r\n      \r\n      console.log(`[useOptimizedContactsData] Successfully updated contact ${contactId} stage`);\r\n      \r\n      toast({\r\n        title: \"Estágio atualizado\",\r\n        description: \"O estágio do contato foi atualizado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating kanban stage:\", error);\r\n      \r\n      // Revert optimistic update on error\r\n      await fetchClients(true);\r\n      \r\n      toast({\r\n        title: \"Erro ao atualizar estágio\",\r\n        description: \"Não foi possível atualizar o estágio do contato.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Subscribe to cache updates\r\n  useEffect(() => {\r\n    const updateFromCache = () => {\r\n      setContacts(globalContactsCache.data);\r\n      setLoadingContacts(globalContactsCache.loading);\r\n    };\r\n\r\n    globalContactsCache.listeners.add(updateFromCache);\r\n    \r\n    // Initial fetch if cache is empty or expired\r\n    if (globalContactsCache.data.length === 0 || \r\n        (Date.now() - globalContactsCache.lastFetch) > CACHE_DURATION) {\r\n      fetchClients();\r\n    }\r\n\r\n    return () => {\r\n      globalContactsCache.listeners.delete(updateFromCache);\r\n    };\r\n  }, [fetchClients]);\r\n\r\n  return {\r\n    contacts,\r\n    setContacts,\r\n    loadingContacts,\r\n    refreshing,\r\n    fetchClients,\r\n    handleKanbanStageChange,\r\n    handleRefresh,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedHosts.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'globalHostsCache' is never reassigned. Use 'const' instead.","line":10,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":15,"endColumn":2,"fix":{"range":[384,582],"text":"const globalHostsCache: {\r\n  data: Host[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Database } from '@/integrations/supabase/types';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\ntype Host = Database['public']['Tables']['employees']['Row'];\r\n\r\n// Global cache to avoid multiple API calls\r\nlet globalHostsCache: {\r\n  data: Host[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\r\n\r\nexport const useOptimizedHosts = () => {\r\n  const { user } = useAuth();\r\n  const [hosts, setHosts] = useState<Host[]>(globalHostsCache.data);\r\n  const [loading, setLoading] = useState(globalHostsCache.loading);\r\n\r\n  const notifyListeners = useCallback(() => {\r\n    globalHostsCache.listeners.forEach(listener => listener());\r\n  }, []);\r\n\r\n  const fetchHosts = useCallback(async (forceRefresh = false) => {\r\n    if (!user) return;\r\n\r\n    const now = Date.now();\r\n    const isCacheValid = !forceRefresh && (now - globalHostsCache.lastFetch) < CACHE_DURATION;\r\n    \r\n    // If cache is valid and we have data, use it\r\n    if (isCacheValid && globalHostsCache.data.length > 0) {\r\n      setHosts(globalHostsCache.data);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous requests\r\n    if (globalHostsCache.loading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      globalHostsCache.loading = true;\r\n      setLoading(true);\r\n      notifyListeners();\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"name\", { ascending: true });\r\n\r\n      if (error) throw error;\r\n      \r\n      const hostsData = data as Host[] || [];\r\n      globalHostsCache.data = hostsData;\r\n      globalHostsCache.lastFetch = now;\r\n      \r\n      setHosts(hostsData);\r\n      notifyListeners();\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar anfitriões:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar os anfitriões.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      globalHostsCache.loading = false;\r\n      setLoading(false);\r\n      notifyListeners();\r\n    }\r\n  }, [user, notifyListeners]);\r\n\r\n  // Subscribe to cache updates\r\n  useEffect(() => {\r\n    const updateFromCache = () => {\r\n      setHosts(globalHostsCache.data);\r\n      setLoading(globalHostsCache.loading);\r\n    };\r\n\r\n    globalHostsCache.listeners.add(updateFromCache);\r\n    \r\n    // Initial fetch if cache is empty or expired or user changed\r\n    if (user && (globalHostsCache.data.length === 0 || \r\n        (Date.now() - globalHostsCache.lastFetch) > CACHE_DURATION)) {\r\n      fetchHosts();\r\n    }\r\n\r\n    return () => {\r\n      globalHostsCache.listeners.delete(updateFromCache);\r\n    };\r\n  }, [user, fetchHosts]);\r\n\r\n  return {\r\n    hosts,\r\n    loading,\r\n    refetch: () => fetchHosts(true),\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedRealtime.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1128,1131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1128,1131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { queryKeys, cacheUtils } from '@/lib/queryClient';\r\nimport { useDebouncedCallback } from '@/hooks/useDebouncedCallback';\r\n\r\ninterface RealtimeConfig {\r\n  enableClientUpdates?: boolean;\r\n  enableMetricsUpdates?: boolean;\r\n  enableConversationUpdates?: boolean;\r\n  debounceMs?: number;\r\n  pollingInterval?: number;\r\n}\r\n\r\n/**\r\n * Hook otimizado para atualizações em tempo real\r\n * \r\n * Features:\r\n * - Debounce de updates para evitar spam\r\n * - Subscriptions condicionais por tipo de dados\r\n * - Invalidação inteligente de cache\r\n * - Cleanup automático\r\n * - Polling de fallback configurável\r\n */\r\nexport const useOptimizedRealtime = (config: RealtimeConfig = {}) => {\r\n  const {\r\n    enableClientUpdates = true,\r\n    enableMetricsUpdates = true,\r\n    enableConversationUpdates = true,\r\n    debounceMs = 1000,\r\n    pollingInterval = 30000, // 30 segundos\r\n  } = config;\r\n\r\n  const queryClient = useQueryClient();\r\n  const subscriptionsRef = useRef<any[]>([]);\r\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Debounced invalidation functions\r\n  const debouncedInvalidateContacts = useDebouncedCallback(() => {\r\n    cacheUtils.invalidateContacts();\r\n    console.log('🔄 Contacts cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  const debouncedInvalidateMetrics = useDebouncedCallback(() => {\r\n    cacheUtils.invalidateMetrics();\r\n    console.log('📊 Metrics cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  const debouncedInvalidateConversations = useDebouncedCallback(() => {\r\n    queryClient.invalidateQueries({ queryKey: queryKeys.conversations.all });\r\n    console.log('💬 Conversations cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  // Setup client updates subscription\r\n  const setupClientUpdates = useCallback(() => {\r\n    if (!enableClientUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('contacts_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'contacts' \r\n        }, \r\n        (payload) => {\r\n          console.log('👤 Contact change detected:', payload.eventType);\r\n          debouncedInvalidateContacts();\r\n          \r\n          // Otimização: invalidar métricas apenas se for relevante\r\n          if (payload.eventType === 'INSERT' || payload.eventType === 'DELETE') {\r\n            debouncedInvalidateMetrics();\r\n          }\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('👤 Contacts subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableClientUpdates, debouncedInvalidateContacts, debouncedInvalidateMetrics]);\r\n\r\n  // Setup metrics updates subscription\r\n  const setupMetricsUpdates = useCallback(() => {\r\n    if (!enableMetricsUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('metrics_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'conversation_metrics' \r\n        }, \r\n        (payload) => {\r\n          console.log('📊 Metrics change detected:', payload.eventType);\r\n          debouncedInvalidateMetrics();\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('📊 Metrics subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableMetricsUpdates, debouncedInvalidateMetrics]);\r\n\r\n  // Setup conversations subscription\r\n  const setupConversationUpdates = useCallback(() => {\r\n    if (!enableConversationUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('conversations_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'conversations' \r\n        }, \r\n        (payload) => {\r\n          console.log('💬 Conversation change detected:', payload.eventType);\r\n          debouncedInvalidateConversations();\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('💬 Conversations subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableConversationUpdates, debouncedInvalidateConversations]);\r\n\r\n  // Polling de fallback para garantir sincronização\r\n  const setupPolling = useCallback(() => {\r\n    if (pollingInterval <= 0) return;\r\n\r\n    pollingRef.current = setInterval(() => {\r\n      console.log('🔄 Fallback polling - refreshing critical data');\r\n      \r\n      // Invalidar apenas dados críticos em tempo real\r\n      queryClient.invalidateQueries({ \r\n        queryKey: queryKeys.clientStats.latest,\r\n        exact: true \r\n      });\r\n      \r\n      queryClient.invalidateQueries({ \r\n        queryKey: queryKeys.realtimeMetrics,\r\n        exact: true \r\n      });\r\n    }, pollingInterval);\r\n  }, [pollingInterval, queryClient]);\r\n\r\n  // Cleanup function\r\n  const cleanup = useCallback(() => {\r\n    console.log('🧹 Cleaning up realtime subscriptions');\r\n    \r\n    // Unsubscribe all active subscriptions\r\n    subscriptionsRef.current.forEach(subscription => {\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    subscriptionsRef.current = [];\r\n\r\n    // Clear polling\r\n    if (pollingRef.current) {\r\n      clearInterval(pollingRef.current);\r\n      pollingRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Setup all subscriptions\r\n  useEffect(() => {\r\n    console.log('🚀 Setting up optimized realtime subscriptions');\r\n    \r\n    const subscriptions = [\r\n      setupClientUpdates(),\r\n      setupMetricsUpdates(),\r\n      setupConversationUpdates(),\r\n    ].filter(Boolean);\r\n\r\n    subscriptionsRef.current = subscriptions;\r\n\r\n    // Setup polling\r\n    setupPolling();\r\n\r\n    // Cleanup on unmount\r\n    return cleanup;\r\n  }, [\r\n    setupClientUpdates,\r\n    setupMetricsUpdates,\r\n    setupConversationUpdates,\r\n    setupPolling,\r\n    cleanup\r\n  ]);\r\n\r\n  // Manual refresh functions\r\n  const manualRefresh = useCallback(() => {\r\n    console.log('🔄 Manual refresh triggered');\r\n    cacheUtils.invalidateMetrics();\r\n    cacheUtils.invalidateContacts();\r\n    cacheUtils.invalidateRealtime();\r\n  }, []);\r\n\r\n  const refreshSpecific = useCallback((type: 'contacts' | 'metrics' | 'conversations') => {\r\n    console.log(`🔄 Manual refresh for ${type}`);\r\n    \r\n    switch (type) {\r\n      case 'contacts':\r\n        cacheUtils.invalidateContacts();\r\n        break;\r\n      case 'metrics':\r\n        cacheUtils.invalidateMetrics();\r\n        break;\r\n      case 'conversations':\r\n        queryClient.invalidateQueries({ queryKey: queryKeys.conversations.all });\r\n        break;\r\n    }\r\n  }, [queryClient]);\r\n\r\n  return {\r\n    manualRefresh,\r\n    refreshSpecific,\r\n    cleanup,\r\n    isEnabled: {\r\n      clients: enableClientUpdates,\r\n      metrics: enableMetricsUpdates,\r\n      conversations: enableConversationUpdates,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Hook simplificado para uso comum\r\n */\r\nexport const useBasicRealtime = () => {\r\n  return useOptimizedRealtime({\r\n    enableClientUpdates: true,\r\n    enableMetricsUpdates: true,\r\n    enableConversationUpdates: false, // Desabilitado por padrão para economizar recursos\r\n    debounceMs: 2000, // Debounce maior para uso básico\r\n    pollingInterval: 60000, // 1 minuto\r\n  });\r\n};\r\n\r\n/**\r\n * Hook para dashboard com alta frequência de updates\r\n */\r\nexport const useDashboardRealtime = () => {\r\n  return useOptimizedRealtime({\r\n    enableClientUpdates: true,\r\n    enableMetricsUpdates: true,\r\n    enableConversationUpdates: false,\r\n    debounceMs: 500, // Resposta mais rápida\r\n    pollingInterval: 30000, // 30 segundos\r\n  });\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePaymentMethodOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePersonalityTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePricingQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePricingQueryOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useProducts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useProductsOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useRealTimeMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useRealtimeUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleDialogs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Appointment } from \"@/types/calendar\";\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\n\nexport function useScheduleDialogs() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [currentAppointment, setCurrentAppointment] = useState<Appointment | null>(null);\n\n  const [isAddEventDialogOpen, setIsAddEventDialogOpen] = useState(false);\n  const [isEditEventDialogOpen, setIsEditEventDialogOpen] = useState(false);\n  const [isDeleteEventDialogOpen, setIsDeleteEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n\n  const handleEditClick = (appointment: Appointment, setFormData: any) => {\n    setCurrentAppointment(appointment);\n    setFormData({\n      petName: appointment.petName,\n      ownerName: appointment.ownerName,\n      phone: appointment.phone,\n      date: appointment.date,\n      service: appointment.service,\n      status: appointment.status,\n      notes: appointment.notes,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteClick = (appointment: Appointment) => {\n    setCurrentAppointment(appointment);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = (appointments: Appointment[], setAppointments: any) => {\n    if (currentAppointment) {\n      setAppointments(\n        appointments.filter((app) => app.id !== currentAppointment.id),\n      );\n      setIsDeleteDialogOpen(false);\n      setCurrentAppointment(null);\n    }\n  };\n\n  return {\n    isAddDialogOpen,\n    setIsAddDialogOpen,\n    isEditDialogOpen,\n    setIsEditDialogOpen,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    currentAppointment,\n    isAddEventDialogOpen,\n    setIsAddEventDialogOpen,\n    isEditEventDialogOpen,\n    setIsEditEventDialogOpen,\n    isDeleteEventDialogOpen,\n    setIsDeleteEventDialogOpen,\n    selectedEvent,\n    setSelectedEvent,\n    handleEditClick,\n    handleDeleteClick,\n    confirmDelete,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSemanticMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[503,506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[503,506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[562,565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[562,565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1064,1067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1064,1067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1581,1584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1581,1584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseSemanticMemoryOptions {\r\n  sessionId: string;\r\n  useCache?: boolean;\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface UseSemanticMemoryResult {\r\n  memories: unknown[];\r\n  entities: unknown[];\r\n  relationships: unknown[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  searchBySimilarity: (query: string, limit?: number) => Promise<any[]>;\r\n  searchByEntity: (entityName: string) => Promise<any[]>;\r\n  storeMemory: (memory: unknown) => Promise<unknown>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar memória semântica - Simplificado durante unificação\r\n */\r\nexport function useSemanticMemory({\r\n  sessionId,\r\n  useCache = true,\r\n  autoRefresh = false,\r\n  refreshInterval = 30000,\r\n}: UseSemanticMemoryOptions): UseSemanticMemoryResult {\r\n  const [memories, setMemories] = useState<any[]>([]);\r\n  const [entities, setEntities] = useState<any[]>([]);\r\n  const [relationships, setRelationships] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const loadSemanticData = useCallback(async () => {\r\n    logger.info('useSemanticMemory: Funcionalidade desabilitada durante unificação');\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const searchBySimilarity = useCallback(async (query: string, limit = 10): Promise<any[]> => {\r\n    logger.info('useSemanticMemory: Busca por similaridade desabilitada durante unificação');\r\n    return [];\r\n  }, []);\r\n\r\n  const searchByEntity = useCallback(async (entityName: string): Promise<any[]> => {\r\n    logger.info('useSemanticMemory: Busca por entidade desabilitada durante unificação');\r\n    return [];\r\n  }, []);\r\n\r\n  const storeMemory = useCallback(async (memory: unknown): Promise<unknown> => {\r\n    logger.info('useSemanticMemory: Armazenamento de memória desabilitado durante unificação');\r\n    return null;\r\n  }, []);\r\n\r\n  const updateImportance = useCallback(async (memoryId: number, importance: number): Promise<boolean> => {\r\n    logger.info('useSemanticMemory: Atualização de importância desabilitada durante unificação');\r\n    return false;\r\n  }, []);\r\n\r\n  const clearCache = useCallback((pattern?: string): void => {\r\n    logger.info('useSemanticMemory: Limpeza de cache desabilitada durante unificação');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadSemanticData();\r\n  }, [loadSemanticData]);\r\n\r\n  return {\r\n    memories,\r\n    entities,\r\n    relationships,\r\n    loading,\r\n    error,\r\n    refresh: loadSemanticData,\r\n    searchBySimilarity,\r\n    searchByEntity,\r\n    storeMemory,\r\n    updateImportance,\r\n    clearCache,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscription.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":91,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport {\r\n  UserSubscription,\r\n  PricingPlan,\r\n  PaymentMethod,\r\n  Invoice,\r\n} from \"@/types/pricing\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\nimport { useSubscriptionLocalStorage } from \"./useSubscriptionLocalStorage\";\r\nimport { useSubscriptionActions } from \"./useSubscriptionActions\";\r\nimport { usePaymentMethodOperations } from \"./usePaymentMethodOperations\";\r\n\r\nexport function useSubscription() {\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n  const [subscription, setSubscription] = useState<UserSubscription | null>(\r\n    null,\r\n  );\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const availablePlans =\r\n    supabasePlans && supabasePlans.length > 0 ? supabasePlans : [];\r\n\r\n  const {\r\n    saveSubscription,\r\n    loadSubscription,\r\n    savePaymentMethods,\r\n    loadPaymentMethods,\r\n    saveInvoices,\r\n    loadInvoices,\r\n  } = useSubscriptionLocalStorage();\r\n\r\n  const fetchSubscription = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const storedSubscription = loadSubscription();\r\n      const storedPaymentMethods = loadPaymentMethods();\r\n      const storedInvoices = loadInvoices();\r\n\r\n      if (storedSubscription) {\r\n        setSubscription(storedSubscription);\r\n        setPaymentMethods(storedPaymentMethods);\r\n        setInvoices(storedInvoices);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setSubscription(null);\r\n      setPaymentMethods([]);\r\n      setInvoices([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching subscription:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar assinatura\",\r\n        description: \"Não foi possível carregar os dados da sua assinatura.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  const { processingPayment, subscribeToPlan, cancelSubscription, changePlan } =\r\n    useSubscriptionActions({\r\n      subscription,\r\n      invoices,\r\n      setSubscription,\r\n      setInvoices,\r\n      availablePlans,\r\n    });\r\n\r\n  const { addPaymentMethod, removePaymentMethod, setDefaultPaymentMethod } =\r\n    usePaymentMethodOperations({\r\n      paymentMethods,\r\n      setPaymentMethods,\r\n    });\r\n\r\n  const getCurrentPlan = useCallback((): PricingPlan | null => {\r\n    if (!subscription) return null;\r\n    const foundPlan = availablePlans.find((p) => p.id === subscription.planId);\r\n    return foundPlan\r\n      ? { ...foundPlan, description: foundPlan.description || \"\" }\r\n      : null;\r\n  }, [\u0001, subscription]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchSubscription();\r\n    }\r\n  }, [\u0001, fetchSubscription]);\r\n\r\n  return {\r\n    subscription,\r\n    paymentMethods,\r\n    invoices,\r\n    loading,\r\n    processingPayment,\r\n    subscribeToPlan,\r\n    cancelSubscription,\r\n    addPaymentMethod,\r\n    removePaymentMethod,\r\n    setDefaultPaymentMethod,\r\n    changePlan,\r\n    getCurrentPlan,\r\n    fetchSubscription,\r\n    saveSubscription,\r\n    savePaymentMethods,\r\n    saveInvoices,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionPageData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'availablePlans' conditional could make the dependencies of useMemo Hook (at line 22) change on every render. To fix this, wrap the initialization of 'availablePlans' in its own useMemo() Hook.","line":11,"column":9,"nodeType":"VariableDeclarator","endLine":11,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from \"react\";\r\nimport { useSubscription } from \"@/hooks/useSubscription\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\nimport { calculateDaysLeft } from \"@/utils/subscriptionUtils\";\r\nimport type { PricingPlan } from \"@/types/pricing\";\r\n\r\nexport const useSubscriptionPageData = () => {\r\n  const subscriptionData = useSubscription();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n\r\n  const availablePlans = supabasePlans.length > 0 ? supabasePlans : [];\r\n\r\n  const currentPlan = useMemo<PricingPlan | null>(() => {\r\n    const plan = availablePlans.find((plan) => plan.id === subscriptionData.subscription?.planId);\r\n    if (!plan) return null;\r\n    \r\n    // Ensure the plan has required description field\r\n    return {\r\n      ...plan,\r\n      description: plan.description || 'Plan description not available'\r\n    } as PricingPlan;\r\n  }, [availablePlans, subscriptionData.subscription]);\r\n\r\n  const daysLeft = useMemo(() => {\r\n    return subscriptionData.subscription\r\n      ? calculateDaysLeft(subscriptionData.subscription.currentPeriodEnd)\r\n      : 0;\r\n  }, [subscriptionData.subscription]);\r\n\r\n  return {\r\n    ...subscriptionData,\r\n    availablePlans,\r\n    currentPlan,\r\n    daysLeft,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseAIProducts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseClientStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseContacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseContactsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseConversationMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseEpisodicMemory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseFunnelData.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":42,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":17,"fix":{"range":[1540,1768],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":42,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":24,"fix":{"range":[1540,1768],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":72,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":72,"endColumn":17,"fix":{"range":[2452,2552],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":72,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":72,"endColumn":24,"fix":{"range":[2452,2552],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":132,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":132,"endColumn":15,"fix":{"range":[4080,4298],"text":"const { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":132,"column":17,"nodeType":"Identifier","messageId":"useConst","endLine":132,"endColumn":22,"fix":{"range":[4080,4298],"text":"const { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { supabase } from '../integrations/supabase/client';\r\nimport type { Database } from '../integrations/supabase/types';\r\n\r\ntype FunnelData = Database['public']['Tables']['funnel_data']['Row'];\r\n\r\nexport const useSupabaseFunnelData = () => {\r\n  const [funnelData, setFunnelData] = useState<FunnelData[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch raw funnel data optionally filtered by date range\r\n  const getFunnelData = async (start?: string, end?: string) => {\r\n    let query = supabase.from('funnel_data').select('*');\r\n    if (start) query = query.gte('created_at', start);\r\n    if (end) query = query.lte('created_at', end);\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    if (error) throw error;\r\n    return data || [];\r\n  };\r\n\r\n  const fetchFunnelData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('funnel_data')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setFunnelData(data || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Erro ao carregar dados do funil');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getFunnelByDateRange = async (startDate: string, endDate: string) => {\r\n    try {\r\n      // Try conversion_funnel_view first, fallback to funnel_data\r\n      let { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        // Fallback to funnel_data table\r\n        const fallback = await supabase\r\n          .from('funnel_data')\r\n          .select('*')\r\n          .gte('created_at', startDate)\r\n          .lte('created_at', endDate)\r\n          .order('created_at', { ascending: false });\r\n        \r\n        if (fallback.error) throw fallback.error;\r\n        return fallback.data || [];\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      console.error('Erro ao buscar funil por período:', err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getFunnelSummary = async () => {\r\n    try {\r\n      // Try conversion_funnel_view first, fallback to funnel_data\r\n      let { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');\r\n\r\n      if (error) {\r\n        // Fallback to funnel_data table\r\n        const fallback = await supabase\r\n          .from('funnel_data')\r\n          .select('*');\r\n        \r\n        if (fallback.error) throw fallback.error;\r\n        return fallback.data || [];\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      console.error('Erro ao buscar resumo do funil:', err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const addFunnelData = async (item: Omit<FunnelData, 'id' | 'created_at'>) => {\r\n    const { data, error } = await supabase\r\n      .from('funnel_data')\r\n      .insert(item)\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    return data as FunnelData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFunnelData();\r\n  }, []);\r\n\r\n  return {\r\n    funnelData,\r\n    loading,\r\n    error,\r\n    refetch: fetchFunnelData,\r\n    getFunnelData,\r\n    getFunnelByDateRange,\r\n    getFunnelSummary,\r\n    addFunnelData\r\n  };\r\n};\r\n\r\n// Individual functions are already available through the hook\r\n// Export them directly for backwards compatibility\r\nconst getFunnelDataCompat = async (start?: string, end?: string) => {\r\n  let query = supabase.from('funnel_data').select('*');\r\n  if (start) query = query.gte('created_at', start);\r\n  if (end) query = query.lte('created_at', end);\r\n  const { data, error } = await query.order('created_at', { ascending: false });\r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\nconst getFunnelByDateRangeCompat = async (startDate: string, endDate: string) => {\r\n  try {\r\n    let { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      const fallback = await supabase\r\n        .from('funnel_data')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (fallback.error) throw fallback.error;\r\n      return fallback.data || [];\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (err) {\r\n    console.error('Erro ao buscar funil por período:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst addFunnelDataCompat = async (item: Omit<FunnelData, 'id' | 'created_at'>) => {\r\n  const { data, error } = await supabase\r\n    .from('funnel_data')\r\n    .insert(item)\r\n    .select()\r\n    .single();\r\n  if (error) throw error;\r\n  return data as FunnelData;\r\n};\r\n\r\nexport { getFunnelDataCompat as getFunnelData, getFunnelByDateRangeCompat as getFunnelByDateRange, addFunnelDataCompat as addFunnelData };","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabasePricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseSchedule.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseUTMMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useThemeSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useTransformedMetricsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUTMMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUTMTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUnifiedClientInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUserProfile.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":28,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  email: string;\r\n  full_name: string;\r\n  role: string;\r\n  department?: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport function useUserProfile() {\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [updating, setUpdating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchProfile();\r\n    }\r\n  }, [\u0001, fetchProfile]);\r\n\r\n  const fetchProfile = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') {\r\n        throw error;\r\n      }\r\n\r\n      if (data) {\r\n        setProfile(data);\r\n      } else {\r\n        // Create a default profile if none exists\r\n        await createProfile();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível carregar o perfil.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createProfile = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const defaultProfile = {\r\n        id: user.id,\r\n        email: user.email || '',\r\n        full_name: user.user_metadata?.full_name || user.email || '',\r\n        role: 'user',\r\n        is_active: true,\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .insert(defaultProfile)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setProfile(data);\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updates: Partial<UserProfile>) => {\r\n    if (!user || !profile) return;\r\n\r\n    try {\r\n      setUpdating(true);\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setProfile(data);\r\n      toast({\r\n        title: \"Perfil atualizado\",\r\n        description: \"Suas informações foram salvas com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Não foi possível atualizar o perfil.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setUpdating(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    profile,\r\n    loading,\r\n    updating,\r\n    updateProfile,\r\n    refetchProfile: fetchProfile,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUsers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useValidatedData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2442,2445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2442,2445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3909,3912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3909,3912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\r\n\r\n// Interfaces para validação\r\nexport interface DataValidationResult<T> {\r\n  data: T;\r\n  isValid: boolean;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\nexport interface DataQualityScore {\r\n  score: number; // 0-100\r\n  completeness: number; // 0-100\r\n  accuracy: number; // 0-100\r\n  freshness: number; // 0-100\r\n}\r\n\r\n// Função para validar métricas\r\nconst validateMetrics = (metrics: unknown): DataValidationResult<unknown> => {\r\n  const errors: string[] = [];\r\n  const warnings: string[] = [];\r\n\r\n  // Validações básicas\r\n  if (metrics.totalLeads < 0) {\r\n    errors.push('Total de leads não pode ser negativo');\r\n  }\r\n\r\n  if (metrics.responseRate < 0 || metrics.responseRate > 100) {\r\n    errors.push('Taxa de resposta deve estar entre 0% e 100%');\r\n  }\r\n\r\n  if (metrics.conversionRate < 0 || metrics.conversionRate > 100) {\r\n    errors.push('Taxa de conversão deve estar entre 0% e 100%');\r\n  }\r\n\r\n  if (metrics.avgResponseTime < 0) {\r\n    errors.push('Tempo médio de resposta não pode ser negativo');\r\n  }\r\n\r\n  // Validações de consistência\r\n  if (metrics.totalRespondidas > metrics.totalConversations) {\r\n    errors.push('Conversas respondidas não pode ser maior que total de conversas');\r\n  }\r\n\r\n  if (metrics.conversasNaoRespondidas + metrics.totalRespondidas !== metrics.totalConversations) {\r\n    warnings.push('Soma de conversas respondidas e não respondidas não confere com o total');\r\n  }\r\n\r\n  // Validações de plausibilidade\r\n  if (metrics.responseRate > 95) {\r\n    warnings.push('Taxa de resposta muito alta (>95%) - verificar dados');\r\n  }\r\n\r\n  if (metrics.conversionRate > 50) {\r\n    warnings.push('Taxa de conversão muito alta (>50%) - verificar dados');\r\n  }\r\n\r\n  if (metrics.avgResponseTime > 24) {\r\n    warnings.push('Tempo médio de resposta muito alto (>24h) - verificar dados');\r\n  }\r\n\r\n  // Verificar dados faltantes\r\n  const requiredFields = [\r\n    'totalLeads', 'totalConversations', 'responseRate', \r\n    'conversionRate', 'avgResponseTime', 'ticketMedio'\r\n  ];\r\n  \r\n  for (const field of requiredFields) {\r\n    if (metrics[field] === undefined || metrics[field] === null) {\r\n      warnings.push(`Campo obrigatório faltando: ${field}`);\r\n    }\r\n  }\r\n\r\n  return {\r\n    data: metrics,\r\n    isValid: errors.length === 0,\r\n    errors,\r\n    warnings,\r\n  };\r\n};\r\n\r\n// Função para validar dados de série temporal\r\nconst validateTimeSeriesData = (data: unknown[]): DataValidationResult<any[]> => {\r\n  const errors: string[] = [];\r\n  const warnings: string[] = [];\r\n\r\n  if (!Array.isArray(data)) {\r\n    errors.push('Dados de série temporal devem ser um array');\r\n    return { data: [], isValid: false, errors, warnings };\r\n  }\r\n\r\n  if (data.length === 0) {\r\n    warnings.push('Nenhum dado de série temporal encontrado');\r\n  }\r\n\r\n  // Validar cada ponto de dados\r\n  data.forEach((point, index) => {\r\n    if (!point.date) {\r\n      errors.push(`Data faltando no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.leads < 0) {\r\n      errors.push(`Leads negativos no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.converted > point.leads) {\r\n      warnings.push(`Conversões maiores que leads no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.respondidas + point.naoRespondidas !== point.iniciadas) {\r\n      warnings.push(`Inconsistência nas conversas no ponto ${index + 1}`);\r\n    }\r\n  });\r\n\r\n  // Verificar ordenação por data\r\n  for (let i = 1; i < data.length; i++) {\r\n    const prevDate = new Date(data[i - 1].date);\r\n    const currDate = new Date(data[i].date);\r\n    \r\n    if (currDate < prevDate) {\r\n      warnings.push('Dados não estão ordenados por data');\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    data,\r\n    isValid: errors.length === 0,\r\n    errors,\r\n    warnings,\r\n  };\r\n};\r\n\r\n// Função para calcular qualidade dos dados\r\nconst calculateDataQuality = (\r\n  metricsValidation: DataValidationResult<unknown>,\r\n  timeSeriesValidation: DataValidationResult<any[]>,\r\n  lastUpdate?: string\r\n): DataQualityScore => {\r\n  // Completeness: baseado na presença de campos obrigatórios\r\n  const totalFields = 10; // número de campos esperados\r\n  const missingFields = metricsValidation.warnings.filter(w => \r\n    w.includes('Campo obrigatório faltando')\r\n  ).length;\r\n  const completeness = Math.max(0, (totalFields - missingFields) / totalFields * 100);\r\n\r\n  // Accuracy: baseado no número de erros e warnings\r\n  const totalIssues = metricsValidation.errors.length + \r\n                     metricsValidation.warnings.length + \r\n                     timeSeriesValidation.errors.length + \r\n                     timeSeriesValidation.warnings.length;\r\n  const accuracy = Math.max(0, 100 - (totalIssues * 10));\r\n\r\n  // Freshness: baseado na última atualização\r\n  let freshness = 100;\r\n  if (lastUpdate) {\r\n    const updateTime = new Date(lastUpdate);\r\n    const now = new Date();\r\n    const diffMinutes = (now.getTime() - updateTime.getTime()) / (1000 * 60);\r\n    \r\n    if (diffMinutes > 60) {\r\n      freshness = Math.max(0, 100 - ((diffMinutes - 60) / 60 * 10));\r\n    }\r\n  }\r\n\r\n  // Score geral (média ponderada)\r\n  const score = Math.round(\r\n    (completeness * 0.4) + \r\n    (accuracy * 0.4) + \r\n    (freshness * 0.2)\r\n  );\r\n\r\n  return {\r\n    score,\r\n    completeness: Math.round(completeness),\r\n    accuracy: Math.round(accuracy),\r\n    freshness: Math.round(freshness),\r\n  };\r\n};\r\n\r\n// Hook principal\r\nexport const useValidatedData = (metrics: unknown, timeSeriesData: unknown[], lastUpdate?: string) => {\r\n  return useMemo(() => {\r\n    // Validar métricas\r\n    const metricsValidation = validateMetrics(metrics || {});\r\n    \r\n    // Validar dados de série temporal\r\n    const timeSeriesValidation = validateTimeSeriesData(timeSeriesData || []);\r\n    \r\n    // Calcular qualidade dos dados\r\n    const dataQuality = calculateDataQuality(\r\n      metricsValidation, \r\n      timeSeriesValidation, \r\n      lastUpdate\r\n    );\r\n    \r\n    // Consolidar todos os erros e warnings\r\n    const allErrors = [\r\n      ...metricsValidation.errors,\r\n      ...timeSeriesValidation.errors,\r\n    ];\r\n    \r\n    const allWarnings = [\r\n      ...metricsValidation.warnings,\r\n      ...timeSeriesValidation.warnings,\r\n    ];\r\n\r\n    return {\r\n      metrics: metricsValidation,\r\n      timeSeries: timeSeriesValidation,\r\n      dataQuality,\r\n      allErrors,\r\n      allWarnings,\r\n      isDataReliable: allErrors.length === 0 && dataQuality.score >= 70,\r\n      hasWarnings: allWarnings.length > 0,\r\n    };\r\n  }, [metrics, timeSeriesData, lastUpdate]);\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsiteManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsitesData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock implementation for websites functionality since websites table doesn't exist\r\nimport { useState, useCallback } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nexport interface Website {\r\n  id: string;\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'active' | 'inactive' | 'pending' | 'indexed' | 'indexing' | 'error';\r\n  last_crawled: string;\r\n  metadata: unknown;\r\n  created_at: string;\r\n  updated_at: string;\r\n  tags: string[];\r\n  category: string;\r\n  language: string;\r\n  pages_indexed?: number;\r\n}\r\n\r\nexport function useWebsitesData() {\r\n  const [websites, setWebsites] = useState<Website[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchWebsites = useCallback(async () => {\r\n    console.log('Mock fetchWebsites called');\r\n    return [];\r\n  }, []);\r\n\r\n  const addWebsite = useCallback(async (websiteData: unknown) => {\r\n    console.log('Mock addWebsite called with:', websiteData);\r\n    return { id: 'mock', ...websiteData };\r\n  }, []);\r\n\r\n  const updateWebsite = useCallback(async (id: string, updates: any) => {\r\n    console.log('Mock updateWebsite called');\r\n    return true;\r\n  }, []);\r\n\r\n  const deleteWebsite = useCallback(async (id: string) => {\r\n    console.log('Mock deleteWebsite called');\r\n    return true;\r\n  }, []);\r\n\r\n  return {\r\n    websites,\r\n    loading,\r\n    error,\r\n    fetchWebsites,\r\n    addWebsite,\r\n    updateWebsite,\r\n    deleteWebsite\r\n  };\r\n}\r\n\r\n// Mock query hook for React Query compatibility\r\nexport const useWebsitesQuery = () => {\r\n  return useQuery({\r\n    queryKey: ['websites'],\r\n    queryFn: async () => [] as Website[],\r\n    initialData: [],\r\n  });\r\n};\r\n\r\n// Mock mutation hooks with full React Query mutation interface\r\nexport const useCreateWebsiteMutation = () => ({\r\n  mutateAsync: async (websiteData: unknown) => ({ id: 'mock', ...websiteData }),\r\n  mutate: (websiteData: unknown) => console.log('Creating website:', websiteData),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useUpdateWebsiteMutation = () => ({\r\n  mutateAsync: async (updates: unknown) => ({ success: true }),\r\n  mutate: (updates: unknown) => console.log('Updating website:', updates),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useDeleteWebsiteMutation = () => ({\r\n  mutateAsync: async (id: string) => ({ success: true }),\r\n  mutate: (id: string) => console.log('Deleting website:', id),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useCrawlWebsiteMutation = () => ({\r\n  mutateAsync: async (id: string) => ({ success: true }),\r\n  mutate: (id: string) => console.log('Crawling website:', id),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsitesDataMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWhatsAppConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\utils\\retryFetch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\chatService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsQueryKeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[390,393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[390,393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1464,1467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1464,1467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { getCurrentAuthUser } from '@/hooks/useAuthUser';\r\n\r\nexport interface ContactFilters {\r\n  kanban_stage?: string;\r\n  lead_source?: string;\r\n  search?: string;\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n}\r\n\r\nexport const contactsService = {\r\n  async fetchContacts(filters: ContactFilters = {}): Promise<any[]> {\r\n    // Verify user authentication\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    let query = supabase\r\n      .from('contacts')\r\n      .select('id, name, email, phone, kanban_stage_id, created_at, updated_at, sales, budget')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    // Apply filters\r\n    if (filters.kanban_stage) {\r\n      query = query.eq('kanban_stage_id', filters.kanban_stage);\r\n    }\r\n\r\n    if (filters.search) {\r\n      query = query.or(`name.ilike.%${filters.search}%,email.ilike.%${filters.search}%,company.ilike.%${filters.search}%`);\r\n    }\r\n\r\n    if (filters.dateRange) {\r\n      query = query\r\n        .gte('created_at', filters.dateRange.start)\r\n        .lte('created_at', filters.dateRange.end);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error fetching contacts:', error);\r\n      throw new Error(`Failed to fetch contacts: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  },\r\n\r\n  async fetchContactsByKanbanStage(stage: string): Promise<any[]> {\r\n    // Verify user authentication\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .select('id, name, email, phone, kanban_stage_id, created_at, updated_at')\r\n      .eq('user_id', user.id)\r\n      .eq('kanban_stage_id', stage)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching contacts by stage:', error);\r\n      throw new Error(`Failed to fetch contacts by stage: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  },\r\n\r\n  async createContact(contact: unknown): Promise<unknown> {\r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .insert([contact])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating contact:', error);\r\n      throw new Error(`Failed to create contact: ${error.message}`);\r\n    }\r\n\r\n    return data;\r\n  },\r\n\r\n  async updateContact({ id, ...updates }: unknown): Promise<unknown> {\r\n    // Verify user authentication and ownership\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .update({ ...updates, updated_at: new Date().toISOString() })\r\n      .eq('id', id)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error updating contact:', error);\r\n      throw new Error(`Failed to update contact: ${error.message}`);\r\n    }\r\n\r\n    return data;\r\n  },\r\n\r\n  async deleteContact(id: string): Promise<void> {\r\n    // Verify user authentication and ownership\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { error } = await supabase\r\n      .from('contacts')\r\n      .delete()\r\n      .eq('id', id)\r\n      .eq('user_id', user.id);\r\n\r\n    if (error) {\r\n      console.error('Error deleting contact:', error);\r\n      throw new Error(`Failed to delete contact: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contextualMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[618,621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[618,621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Serviço para gerenciar memória contextual - Simplificado para nova estrutura\r\n */\r\nexport const contextualMemoryService = {\r\n  /**\r\n   * Armazena uma memória contextual - Desabilitado temporariamente\r\n   */\r\n  storeContextualMemory: async (memory: unknown): Promise<unknown> => {\r\n    logger.info('contextualMemoryService: Funcionalidade desabilitada durante unificação');\r\n    return null;\r\n  },\r\n  \r\n  /**\r\n   * Obtém todas as memórias contextuais - Desabilitado temporariamente\r\n   */\r\n  getContextualMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('contextualMemoryService: Funcionalidade desabilitada durante unificação');\r\n    return [];\r\n  },\r\n  \r\n  /**\r\n   * Limpa o cache\r\n   */\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('contextualMemoryService: Cache clearing desabilitado durante unificação');\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\episodicMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2871,2874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2871,2874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\r\nimport { MemoryCache } from './memoryCache';\r\nimport { N8nChatMemory, MemoryType, MemoryLevel } from '@/types/memory';\r\nimport { logger } from '@/utils/logger';\r\n\r\n// Simplified cache\r\nconst episodicCache = new MemoryCache({ maxSize: 50 });\r\n\r\nexport const episodicMemoryService = {\r\n  /**\r\n   * Armazena uma memória episódica\r\n   */\r\n  storeEpisodicMemory: async (\r\n    memory: Partial<N8nChatMemory>\r\n  ): Promise<N8nChatMemory | null> => {\r\n    try {\r\n      // Mock implementation - return null for now since table structure is complex\r\n      console.log('Mock storeEpisodicMemory called', { memory });\r\n      return null;\r\n    } catch (err) {\r\n      logger.error('Erro ao armazenar memória episódica:', err);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Obtém memórias episódicas de uma sessão\r\n   */\r\n  getEpisodicMemories: async (\r\n    sessionId: string,\r\n    limit = 50,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation - return empty array\r\n      console.log('Mock getEpisodicMemories called', { sessionId, limit, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar memórias episódicas:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Busca memórias por importância\r\n   */\r\n  getMemoriesByImportance: async (\r\n    sessionId: string,\r\n    minImportance = 3,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getMemoriesByImportance called', { sessionId, minImportance, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar memórias por importância:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Atualiza uma memória episódica\r\n   */\r\n  updateEpisodicMemory: async (\r\n    memoryId: number,\r\n    updates: Partial<N8nChatMemory>\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock updateEpisodicMemory called', { memoryId, updates });\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Erro ao atualizar memória episódica:', err);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove memórias episódicas expiradas\r\n   */\r\n  removeExpiredMemories: async (): Promise<number> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock removeExpiredMemories called');\r\n      return 0;\r\n    } catch (err) {\r\n      logger.error('Erro ao remover memórias episódicas expiradas:', err);\r\n      return 0;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Limpa o cache de memória episódica\r\n   */\r\n  clearCache: (sessionId?: string): void => {\r\n    console.log('Mock clearCache called', { sessionId });\r\n    episodicCache.clear();\r\n  },\r\n\r\n  /**\r\n   * Gera linha do tempo episódica\r\n   */\r\n  generateTimeline: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock generateTimeline called', { sessionId, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao gerar linha do tempo:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Busca memórias por período\r\n   */\r\n  getEpisodicMemoriesByPeriod: async (\r\n    sessionId: string,\r\n    startDate: string,\r\n    endDate: string,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getEpisodicMemoriesByPeriod called', { sessionId, startDate, endDate, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar memórias por período:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Atualiza importância de uma memória\r\n   */\r\n  updateImportance: async (memoryId: number, importance: number): Promise<boolean> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock updateImportance called', { memoryId, importance });\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Erro ao atualizar importância:', err);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Gera estatísticas da memória episódica\r\n   */\r\n  getMemoryStats: async (sessionId: string): Promise<unknown> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getMemoryStats called', { sessionId });\r\n      return {\r\n        total: 0,\r\n        byImportance: { low: 0, medium: 0, high: 0 },\r\n        byLevel: { short_term: 0, medium_term: 0, long_term: 0 },\r\n        mostRecent: null,\r\n        mostImportant: null,\r\n      };\r\n    } catch (err) {\r\n      logger.error('Erro ao gerar estatísticas da memória:', err);\r\n      return {\r\n        total: 0,\r\n        byImportance: { low: 0, medium: 0, high: 0 },\r\n        byLevel: { short_term: 0, medium_term: 0, long_term: 0 },\r\n        mostRecent: null,\r\n        mostImportant: null,\r\n      };\r\n    }\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\memoryCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\memoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Serviço de memória - Simplificado durante unificação\r\n */\r\nexport const memoryService = {\r\n  /**\r\n   * Obtém todas as memórias - Desabilitado temporariamente\r\n   */\r\n  getAllMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('memoryService: Funcionalidade desabilitada durante unificação');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Busca memórias por sessão - Desabilitado temporariamente\r\n   */\r\n  getMemoriesBySession: async (\r\n    sessionId: string,\r\n    memoryType?: unknown,\r\n    limit = 50,\r\n    useCache = true\r\n  ): Promise<any[]> => {\r\n    logger.info('memoryService: Funcionalidade desabilitada durante unificação');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Armazena uma nova memória - Desabilitado temporariamente\r\n   */\r\n  storeMemory: async (memory: unknown): Promise<unknown> => {\r\n    logger.info('memoryService: Armazenamento de memória desabilitado durante unificação');\r\n    return null;\r\n  },\r\n\r\n  /**\r\n   * Busca memórias por importância - Desabilitado temporariamente\r\n   */\r\n  getMemoriesByImportance: async (\r\n    sessionId: string,\r\n    minImportance = 3,\r\n    useCache = true\r\n  ): Promise<any[]> => {\r\n    logger.info('memoryService: Busca por importância desabilitada durante unificação');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Limpa o cache\r\n   */\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('memoryService: Limpeza de cache desabilitada durante unificação');\r\n  },\r\n\r\n  /**\r\n   * Obtém estatísticas do cache\r\n   */\r\n  getCacheStats: () => {\r\n    logger.info('memoryService: Estatísticas de cache desabilitadas durante unificação');\r\n    return {};\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\semanticMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[436,439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[436,439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[629,632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[629,632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Serviço para gerenciar memória semântica - Simplificado durante unificação\r\n */\r\nexport const semanticMemoryService = {\r\n  storeSemanticMemory: async (memory: unknown): Promise<unknown> => {\r\n    logger.info('semanticMemoryService: Funcionalidade desabilitada durante unificação');\r\n    return null;\r\n  },\r\n\r\n  getSemanticMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('semanticMemoryService: Funcionalidade desabilitada durante unificação');\r\n    return [];\r\n  },\r\n\r\n  searchBySimilarity: async (query: string, limit = 10): Promise<any[]> => {\r\n    logger.info('semanticMemoryService: Busca por similaridade desabilitada durante unificação');\r\n    return [];\r\n  },\r\n\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('semanticMemoryService: Limpeza de cache desabilitada durante unificação');\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabase-migration.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'query' is never reassigned. Use 'const' instead.","line":164,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":164,"endColumn":14,"fix":{"range":[4620,4673],"text":"const query = supabase.from(\"funnel_data\").select(\"*\");"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":470,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12487,12490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12487,12490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// =====================================================\r\n// MIGRAÇÃO E INTEGRAÇÃO COM SUPABASE\r\n// Substitui dados mockup por dados reais do banco\r\n// =====================================================\r\n\r\nimport type { Database } from \"@/types/supabase\";\r\nimport { supabase } from \"./supabaseClient\";\r\n\r\n// =====================================================\r\n// TIPOS PARA DADOS DO SUPABASE\r\n// =====================================================\r\n\r\nexport interface SupabaseContact {\r\n  id: string;\r\n  name: string;\r\n  email: string | null;\r\n  phone: string | null;\r\n  address: string | null;\r\n  client_name: string | null;\r\n  client_size: string | null;\r\n  client_type: string | null;\r\n  cpf_cnpj: string | null;\r\n  asaas_customer_id: string | null;\r\n  status: string | null;\r\n  notes: string | null;\r\n  last_contact: string | null;\r\n  kanban_stage_id: string | null;\r\n  last_message: string | null;\r\n  last_message_time: string | null;\r\n  unread_count: number | null;\r\n  session_id: string | null;\r\n  tags: string[] | null;\r\n  responsible_user: string | null;\r\n  sales: number | null;\r\n  client_sector: string | null;\r\n  budget: number | null;\r\n  payment_method: string | null;\r\n  client_objective: string | null;\r\n  loss_reason: string | null;\r\n  contract_number: string | null;\r\n  contract_date: string | null;\r\n  payment: string | null;\r\n  uploaded_files: string[] | null;\r\n  consultation_stage: string | null;\r\n  files_metadata: unknown;\r\n  deleted_at: string | null;\r\n  user_id: string;\r\n  created_at: string | null;\r\n  updated_at: string | null;\r\n}\r\n\r\nexport interface SupabaseMetrics {\r\n  total_conversations: number;\r\n  response_rate: number;\r\n  conversion_rate: number;\r\n  negotiated_value: number;\r\n  total_clients: number;\r\n  total_chats: number;\r\n  new_clients_this_month: number;\r\n}\r\n\r\nexport interface SupabaseFunnelData {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\n// =====================================================\r\n// FUNÇÕES DE MIGRAÇÃO\r\n// =====================================================\r\n\r\n/**\r\n * Executa o script SQL de migração no Supabase\r\n * ATENÇÃO: Execute apenas uma vez para criar as tabelas e inserir dados iniciais\r\n */\r\nexport async function executeMigration() {\r\n  try {\r\n    console.log(\"🚀 Iniciando migração para Supabase...\");\r\n\r\n    // Nota: O script SQL deve ser executado diretamente no painel do Supabase\r\n    // ou via CLI, pois o cliente JavaScript não suporta DDL commands\r\n    console.log(\r\n      \"⚠️  Execute o arquivo supabase-migration.sql no painel do Supabase:\",\r\n    );\r\n    console.log(\"1. Acesse https://supabase.com/dashboard\");\r\n    console.log(\"2. Vá para SQL Editor\");\r\n    console.log(\"3. Cole o conteúdo do arquivo supabase-migration.sql\");\r\n    console.log(\"4. Execute o script\");\r\n\r\n    return {\r\n      success: false,\r\n      message: \"Execute o script SQL manualmente no painel do Supabase\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"❌ Erro na migração:\", error);\r\n    return {\r\n      success: false,\r\n      error: error,\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNÇÕES PARA SUBSTITUIR DADOS MOCKUP\r\n// =====================================================\r\n\r\n/**\r\n * Busca todos os contatos do Supabase\r\n * Substitui mockClients\r\n */\r\nexport async function getContactsFromSupabase(): Promise<SupabaseContact[]> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar contatos:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na função getContactsFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca métricas do dashboard do Supabase\r\n * Substitui mockClientStats e mockConversationMetrics\r\n */\r\nexport async function getMetricsFromSupabase(): Promise<SupabaseMetrics | null> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"dashboard_metrics\")\r\n      .select(\"*\")\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar métricas:\", error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Erro na função getMetricsFromSupabase:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados do funil de conversão com filtro de data\r\n * Substitui funnelData do mockConversationMetrics\r\n */\r\nexport async function getFunnelDataFromSupabase(\r\n  startDate?: string,\r\n  endDate?: string,\r\n): Promise<SupabaseFunnelData[]> {\r\n  try {\r\n    let query = supabase.from(\"funnel_data\").select(\"*\");\r\n\r\n    if (startDate && endDate) {\r\n      // Usar função SQL para filtro por data\r\n      const { data, error } = await supabase.rpc(\"get_funnel_by_date_range\", {\r\n        start_date: startDate,\r\n        end_date: endDate,\r\n      });\r\n\r\n      if (error) {\r\n        console.error(\"Erro ao buscar funil com filtro:\", error);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    } else {\r\n      const { data, error } = await query.order(\"value\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erro ao buscar funil:\", error);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erro na função getFunnelDataFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados de conversão por tempo\r\n * Substitui conversionByTimeData\r\n */\r\nexport async function getConversionByTimeFromSupabase() {\r\n  try {\r\n    // Using funnel_data as alternative since conversion_by_time doesn't exist in types\r\n    const { data, error } = await supabase\r\n      .from(\"funnel_data\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar conversão por tempo:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na função getConversionByTimeFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca leads por fonte\r\n * Substitui leadsBySource\r\n */\r\nexport async function getLeadsBySourceFromSupabase() {\r\n  try {\r\n    // Using utm_tracking as alternative since leads_by_source doesn't exist in types\r\n    const { data, error } = await supabase\r\n      .from(\"utm_tracking\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar leads por fonte:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na função getLeadsBySourceFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca produtos AI do Supabase\r\n * Substitui aiProducts mock\r\n */\r\nexport async function getAIProductsFromSupabase() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"ai_products\")\r\n      .select(\"*\")\r\n      .order(\"popular\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar produtos AI:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na função getAIProductsFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados UTM e campanhas\r\n * Substitui mockUTMMetrics\r\n */\r\nexport async function getUTMDataFromSupabase() {\r\n  try {\r\n    const [metricsResult, campaignsResult, trackingResult] = await Promise.all([\r\n      supabase.from(\"utm_metrics\").select(\"*\").limit(1).single(),\r\n      supabase\r\n        .from(\"utm_tracking\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false }),\r\n      supabase\r\n        .from(\"utm_tracking\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false }),\r\n    ]);\r\n\r\n    return {\r\n      metrics: metricsResult.data,\r\n      campaigns: campaignsResult.data || [],\r\n      tracking: trackingResult.data || [],\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Erro na função getUTMDataFromSupabase:\", error);\r\n    return {\r\n      metrics: null,\r\n      campaigns: [],\r\n      tracking: [],\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNÇÕES DE INSERÇÃO E ATUALIZAÇÃO\r\n// =====================================================\r\n\r\n/**\r\n * Adiciona um novo contato\r\n */\r\nexport async function addContact(\r\n  contact: Omit<SupabaseContact, \"id\" | \"created_at\" | \"updated_at\">,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .insert(contact)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao adicionar contato:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na função addContact:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Atualiza um contato existente\r\n */\r\nexport async function updateContact(\r\n  id: string,\r\n  updates: Partial<SupabaseContact>,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .update(updates)\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao atualizar contato:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na função updateContact:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Adiciona dados ao funil (para testes)\r\n */\r\nexport async function addFunnelData(\r\n  funnelData: Omit<SupabaseFunnelData, \"id\" | \"created_at\">,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"funnel_data\")\r\n      .insert([funnelData])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao adicionar dados do funil:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na função addFunnelData:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HOOK PERSONALIZADO PARA USAR NO REACT\r\n// =====================================================\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Hook para buscar dados do Supabase com loading state\r\n */\r\nexport function useSupabaseData() {\r\n  const [contacts, setContacts] = useState<SupabaseContact[]>([]);\r\n  const [metrics, setMetrics] = useState<SupabaseMetrics | null>(null);\r\n  const [funnelData, setFunnelData] = useState<SupabaseFunnelData[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadData = async (dateFilter?: { start: string; end: string }) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [contactsData, metricsData, funnelDataResult] = await Promise.all([\r\n        getContactsFromSupabase(),\r\n        getMetricsFromSupabase(),\r\n        getFunnelDataFromSupabase(dateFilter?.start, dateFilter?.end),\r\n      ]);\r\n\r\n      setContacts(contactsData);\r\n      setMetrics(metricsData);\r\n      setFunnelData(funnelDataResult);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Erro desconhecido\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  return {\r\n    contacts,\r\n    metrics,\r\n    funnelData,\r\n    loading,\r\n    error,\r\n    refetch: loadData,\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// UTILITÁRIOS PARA MIGRAÇÃO\r\n// =====================================================\r\n\r\n/**\r\n * Verifica se as tabelas existem no Supabase\r\n */\r\nexport async function checkTablesExist() {\r\n  try {\r\n    const tables = [\r\n      \"contacts\",\r\n      \"conversation_metrics\",\r\n      \"funnel_data\",\r\n      \"ai_products\",\r\n    ];\r\n    const results = [];\r\n\r\n    for (const table of tables) {\r\n      try {\r\n        // Only check tables that exist in types\r\n        const validTables = [\r\n          \"contacts\",\r\n          \"ai_products\",\r\n          \"client_stats\",\r\n          \"conversation_metrics\",\r\n          \"funnel_data\",\r\n          \"utm_metrics\",\r\n          \"utm_tracking\",\r\n        ];\r\n        if (!validTables.includes(table)) {\r\n          results.push({\r\n            table,\r\n            exists: false,\r\n            error: `Table ${table} not found in types`,\r\n          });\r\n          continue;\r\n        }\r\n\r\n        const { data, error } = await supabase\r\n          .from(table as any)\r\n          .select(\"id\")\r\n          .limit(1);\r\n\r\n        results.push({\r\n          table,\r\n          exists: !error,\r\n          error: error?.message,\r\n        });\r\n      } catch (tableError) {\r\n        results.push({\r\n          table,\r\n          exists: false,\r\n          error:\r\n            tableError instanceof Error ? tableError.message : \"Unknown error\",\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Erro ao verificar tabelas:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Função para testar a conexão com Supabase\r\n */\r\nexport async function testSupabaseConnection() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .select(\"count\")\r\n      .limit(1);\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: \"Erro na conexão: \" + error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Conexão com Supabase estabelecida com sucesso!\",\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      message:\r\n        \"Erro na conexão: \" +\r\n        (error instanceof Error ? error.message : \"Erro desconhecido\"),\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// EXEMPLO DE USO\r\n// =====================================================\r\n\r\n/*\r\n// Em um componente React:\r\n\r\nimport { useSupabaseData, testSupabaseConnection } from '@/lib/supabase-migration';\r\n\r\nfunction MetricsComponent() {\r\n  const { contacts, metrics, funnelData, loading, error, refetch } = useSupabaseData();\r\n  \r\n  // Para filtrar por data:\r\n  const handleDateFilter = (startDate: string, endDate: string) => {\r\n    refetch({ start: startDate, end: endDate });\r\n  };\r\n  \r\n  if (loading) return <div>Carregando...</div>;\r\n  if (error) return <div>Erro: {error}</div>;\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Métricas do Supabase</h2>\r\n      <p>Total de contatos: {contacts.length}</p>\r\n      <p>Taxa de conversão: {metrics?.conversion_rate}%</p>\r\n      \r\n      <h3>Funil de Conversão</h3>\r\n      {funnelData.map(item => (\r\n        <div key={item.name}>\r\n          {item.name}: {item.value} ({item.percentage}%)\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Para testar a conexão:\r\nconst testConnection = async () => {\r\n  const result = await testSupabaseConnection();\r\n  console.log(result.message);\r\n};\r\n\r\n*/\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\clientsMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\metricsMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\scheduleMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\AIStore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ChatsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ChatsDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ClientsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Evolution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\KnowledgeManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\MetricsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\MetricsDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Pricing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Schedule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Subscription.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ThemeSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\providers\\QueryProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { queryClient } from '../lib/queryClient';\r\n\r\ninterface QueryProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * Provider do React Query para gerenciamento de estado de servidor\r\n * \r\n * Features:\r\n * - Cache inteligente configurado\r\n * - DevTools para desenvolvimento\r\n * - Error boundaries integrados\r\n * - Performance otimizada\r\n */\r\nexport const QueryProvider: React.FC<QueryProviderProps> = ({ children }) => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\n/**\r\n * Hook para acessar o QueryClient em qualquer lugar da aplicação\r\n */\r\nexport { queryClient };\r\n\r\n/**\r\n * Error Boundary específico para React Query\r\n */\r\nexport class QueryErrorBoundary extends React.Component<\r\n  { children: React.ReactNode; fallback?: React.ComponentType<{ error: Error; resetError: () => void }> },\r\n  { hasError: boolean; error: Error | null }\r\n> {\r\n  constructor(props: unknown) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error) {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    console.error('Query Error Boundary caught an error:', error, errorInfo);\r\n    \r\n    // Log para monitoramento em produção\r\n    if (process.env.NODE_ENV === 'production') {\r\n      // Aqui você pode integrar com serviços como Sentry\r\n      console.error('Production Query Error:', {\r\n        error: error.message,\r\n        stack: error.stack,\r\n        componentStack: errorInfo.componentStack,\r\n      });\r\n    }\r\n  }\r\n\r\n  resetError = () => {\r\n    this.setState({ hasError: false, error: null });\r\n    // Limpar cache corrompido se necessário\r\n    queryClient.clear();\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      const FallbackComponent = this.props.fallback;\r\n      \r\n      if (FallbackComponent) {\r\n        return <FallbackComponent error={this.state.error!} resetError={this.resetError} />;\r\n      }\r\n      \r\n      return (\r\n        <div className=\"flex flex-col items-center justify-center min-h-[200px] p-6 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"text-red-600 text-lg font-semibold mb-2\">\r\n            Erro no carregamento dos dados\r\n          </div>\r\n          <div className=\"text-red-500 text-sm mb-4 text-center\">\r\n            {this.state.error?.message || 'Ocorreu um erro inesperado'}\r\n          </div>\r\n          <button\r\n            onClick={this.resetError}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\r\n          >\r\n            Tentar Novamente\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper que combina QueryProvider com ErrorBoundary\r\n */\r\nexport const QueryProviderWithErrorBoundary: React.FC<QueryProviderProps> = ({ children }) => {\r\n  return (\r\n    <QueryErrorBoundary>\r\n      <QueryProvider>\r\n        {children}\r\n      </QueryProvider>\r\n    </QueryErrorBoundary>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\scripts\\seedPersonalityTemplates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2473,2476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2473,2476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { aiPersonalityTemplates } from \"@/data/aiPersonalityTemplates\";\n\nexport const seedPersonalityTemplates = async () => {\n  try {\n    console.log('Iniciando inserção dos templates de personalidade...');\n    \n    // Primeiro, vamos verificar se já existem templates\n    const { data: existingTemplates, error: fetchError } = await supabase\n      .from('ai_personalities')\n      .select('name')\n      .in('name', aiPersonalityTemplates.map(t => t.name));\n    \n    if (fetchError) {\n      console.error('Erro ao verificar templates existentes:', fetchError);\n      return;\n    }\n    \n    const existingNames = existingTemplates?.map(t => t.name) || [];\n    const templatesToInsert = aiPersonalityTemplates.filter(\n      template => !existingNames.includes(template.name)\n    );\n    \n    if (templatesToInsert.length === 0) {\n      console.log('Todos os templates já existem no banco de dados.');\n      return;\n    }\n    \n    console.log(`Inserindo ${templatesToInsert.length} novos templates...`);\n    \n    // Preparar dados para inserção\n    const templatesData = templatesToInsert.map(template => ({\n      name: template.name,\n      description: template.description,\n      personality_type: template.settings.personality_type,\n      tone: template.settings.tone,\n      temperature: template.settings.temperature,\n      greeting_message: template.settings.greeting_message,\n      custom_instructions: template.settings.custom_instructions,\n      max_tokens: template.settings.max_tokens,\n      response_style: template.settings.response_style,\n      language: template.settings.language,\n      is_active: true,\n      user_id: '00000000-0000-0000-0000-000000000000', // Template user ID\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    \n    // Inserir templates no banco\n    const { data, error } = await supabase\n      .from('ai_personalities')\n      .insert(templatesData)\n      .select();\n    \n    if (error) {\n      console.error('Erro ao inserir templates:', error);\n      return;\n    }\n    \n    console.log(`✅ ${data?.length || 0} templates inseridos com sucesso!`);\n    console.log('Templates inseridos:', data?.map(t => t.name));\n    \n  } catch (error) {\n    console.error('Erro geral ao inserir templates:', error);\n  }\n};\n\n// Função para executar o seeding\nif (typeof window !== 'undefined') {\n  // Executar apenas no browser para debug\n  (window as any).seedPersonalityTemplates = seedPersonalityTemplates;\n  console.log('Função seedPersonalityTemplates disponível no console do browser');\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\ai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[673,676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[673,676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-related type definitions\r\n\r\nexport interface AIMessage {\r\n  id: string;\r\n  content: string;\r\n  role?: 'assistant' | 'user';\r\n  timestamp?: string;\r\n  category?: string;\r\n  name?: string;\r\n  variables?: string[];\r\n  context?: string;\r\n  is_active?: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface AIStage {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  stage_order?: number;\r\n  order?: number;\r\n  order_position?: number; // Backward compatibility\r\n  is_active?: boolean;\r\n  personality_id?: string;\r\n  actions?: unknown[];\r\n  trigger?: string;\r\n  next_stage?: string;\r\n  next_stage_id?: string;\r\n  trigger_conditions?: Record<string, any>;\r\n  timeout_minutes?: number;\r\n  is_final_stage?: boolean;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n}\r\n\r\nexport interface AIPersonality {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  personality_type: string;\r\n  system_prompt?: string;\r\n  greeting_message?: string;\r\n  response_style?: string;\r\n  tone?: string;\r\n  language?: string;\r\n  temperature?: number;\r\n  max_tokens?: number;\r\n  is_active?: boolean;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n  custom_instructions?: string;\r\n  fallback_responses?: unknown;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\calendar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\customFields.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\event.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\eventForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\fixes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\memory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1114,1117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1114,1117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1653,1656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1653,1656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2028,2031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2028,2031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Definição de tipos para o sistema de memória da IA\r\n\r\n/**\r\n * Tipos de memória suportados pelo sistema\r\n */\r\nexport type MemoryType = \"contextual\" | \"semantic\" | \"episodic\";\r\n\r\n/**\r\n * Níveis de memória para diferentes durações\r\n */\r\nexport type MemoryLevel = \"short_term\" | \"medium_term\" | \"long_term\";\r\n\r\n/**\r\n * Interface para entidades na memória semântica\r\n */\r\nexport interface SemanticEntity {\r\n  name: string;\r\n  type: string;\r\n  attributes?: Record<string, any>;\r\n  confidence?: number;\r\n}\r\n\r\n/**\r\n * Interface para relacionamentos entre entidades\r\n */\r\nexport interface EntityRelationship {\r\n  source: string;\r\n  target: string;\r\n  type: string;\r\n  relation?: string; // Backward compatibility\r\n  attributes?: Record<string, any>;\r\n  confidence?: number;\r\n}\r\n\r\n/**\r\n * Interface para memória episódica (sequência de eventos)\r\n */\r\nexport interface EpisodicMemory {\r\n  id: number;\r\n  date: string;\r\n  description: string;\r\n  events?: Array<{\r\n    action: string;\r\n    timestamp: string;\r\n    actors: string[];\r\n    context?: Record<string, any>;\r\n  }>;\r\n  summary?: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Interface principal para a tabela n8n_chat_memory\r\n */\r\nexport interface N8nChatMemory {\r\n  id: number;\r\n  session_id: string;\r\n  message: unknown;\r\n  data?: string;\r\n  hora?: string;\r\n  created_at?: string;\r\n\r\n  // Novos campos para tipos de memória\r\n  memory_type: MemoryType; // Required for Memory interface compatibility\r\n  memory_level?: MemoryLevel;\r\n  expiration_date?: string;\r\n  importance?: number; // 1-10\r\n  entities?: SemanticEntity[];\r\n  relationships?: EntityRelationship[];\r\n  context?: Record<string, any>;\r\n  metadata?: {\r\n    tags?: string[];\r\n    categories?: string[];\r\n    [key: string]: unknown;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface unificada para sistemas de memória\r\n */\r\nexport interface Memory {\r\n  id: number;\r\n  message: string;\r\n  memory_type: MemoryType;\r\n  created_at: string;\r\n  importance?: number;\r\n  entities?: Array<{ name: string }>;\r\n  context?: Record<string, any>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\pricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\product.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":413,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":413,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[13657,13659],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[13657,13659],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":414,"column":21,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":414,"endColumn":23,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[13682,13684],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[13682,13684],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\r\n// TIPOS TYPESCRIPT PARA SUPABASE DATABASE\r\n// Gerados automaticamente baseados no schema SQL\r\n// =====================================================\r\n\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json | undefined }\r\n  | Json[];\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      contacts: {\r\n        Row: {\r\n          id: string;\r\n          name: string;\r\n          email: string | null;\r\n          phone: string | null;\r\n          address: string | null;\r\n          client_name: string | null;\r\n          client_size: string | null;\r\n          client_type: string | null;\r\n          cpf_cnpj: string | null;\r\n          asaas_customer_id: string | null;\r\n          status: string;\r\n          notes: string | null;\r\n          last_contact: string | null;\r\n          kanban_stage: string | null;\r\n          last_message: string | null;\r\n          last_message_time: string | null;\r\n          unread_count: number | null;\r\n          session_id: string | null;\r\n          tags: string[] | null;\r\n          responsible_user: string | null;\r\n          sales: number | null;\r\n          client_sector: string | null;\r\n          budget: number | null;\r\n          payment_method: string | null;\r\n          client_objective: string | null;\r\n          loss_reason: string | null;\r\n          contract_number: string | null;\r\n          contract_date: string | null;\r\n          payment: string | null;\r\n          uploaded_files: string[] | null;\r\n          consultation_stage: string | null;\r\n          custom_values: Json | null;\r\n          created_at: string | null;\r\n          updated_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          name: string;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          client_name?: string | null;\r\n          client_size?: string | null;\r\n          client_type?: string | null;\r\n          cpf_cnpj?: string | null;\r\n          asaas_customer_id?: string | null;\r\n          status?: string;\r\n          notes?: string | null;\r\n          last_contact?: string | null;\r\n          kanban_stage?: string | null;\r\n          last_message?: string | null;\r\n          last_message_time?: string | null;\r\n          unread_count?: number | null;\r\n          session_id?: string | null;\r\n          tags?: string[] | null;\r\n          responsible_user?: string | null;\r\n          sales?: number | null;\r\n          client_sector?: string | null;\r\n          budget?: number | null;\r\n          payment_method?: string | null;\r\n          client_objective?: string | null;\r\n          loss_reason?: string | null;\r\n          contract_number?: string | null;\r\n          contract_date?: string | null;\r\n          payment?: string | null;\r\n          uploaded_files?: string[] | null;\r\n          consultation_stage?: string | null;\r\n          custom_values?: Json | null;\r\n          created_at?: string | null;\r\n          updated_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          client_name?: string | null;\r\n          client_size?: string | null;\r\n          client_type?: string | null;\r\n          cpf_cnpj?: string | null;\r\n          asaas_customer_id?: string | null;\r\n          status?: string;\r\n          notes?: string | null;\r\n          last_contact?: string | null;\r\n          kanban_stage?: string | null;\r\n          last_message?: string | null;\r\n          last_message_time?: string | null;\r\n          unread_count?: number | null;\r\n          session_id?: string | null;\r\n          tags?: string[] | null;\r\n          responsible_user?: string | null;\r\n          sales?: number | null;\r\n          client_sector?: string | null;\r\n          budget?: number | null;\r\n          payment_method?: string | null;\r\n          client_objective?: string | null;\r\n          loss_reason?: string | null;\r\n          contract_number?: string | null;\r\n          contract_date?: string | null;\r\n          payment?: string | null;\r\n          uploaded_files?: string[] | null;\r\n          consultation_stage?: string | null;\r\n          custom_values?: Json | null;\r\n          created_at?: string | null;\r\n          updated_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      client_stats: {\r\n        Row: {\r\n          id: string;\r\n          total_clients: number | null;\r\n          total_chats: number | null;\r\n          new_clients_this_month: number | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_clients?: number | null;\r\n          total_chats?: number | null;\r\n          new_clients_this_month?: number | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_clients?: number | null;\r\n          total_chats?: number | null;\r\n          new_clients_this_month?: number | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      conversation_metrics: {\r\n        Row: {\r\n          id: string;\r\n          total_conversations: number | null;\r\n          response_rate: number | null;\r\n          total_respondidas: number | null;\r\n          avg_response_time: number | null;\r\n          conversion_rate: number | null;\r\n          avg_closing_time: number | null;\r\n          avg_response_start_time: number | null;\r\n          secondary_response_rate: number | null;\r\n          total_secondary_responses: number | null;\r\n          negotiated_value: number | null;\r\n          average_negotiated_value: number | null;\r\n          total_negotiating_value: number | null;\r\n          previous_period_value: number | null;\r\n          is_stale: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_conversations?: number | null;\r\n          response_rate?: number | null;\r\n          total_respondidas?: number | null;\r\n          avg_response_time?: number | null;\r\n          conversion_rate?: number | null;\r\n          avg_closing_time?: number | null;\r\n          avg_response_start_time?: number | null;\r\n          secondary_response_rate?: number | null;\r\n          total_secondary_responses?: number | null;\r\n          negotiated_value?: number | null;\r\n          average_negotiated_value?: number | null;\r\n          total_negotiating_value?: number | null;\r\n          previous_period_value?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_conversations?: number | null;\r\n          response_rate?: number | null;\r\n          total_respondidas?: number | null;\r\n          avg_response_time?: number | null;\r\n          conversion_rate?: number | null;\r\n          avg_closing_time?: number | null;\r\n          avg_response_start_time?: number | null;\r\n          secondary_response_rate?: number | null;\r\n          total_secondary_responses?: number | null;\r\n          negotiated_value?: number | null;\r\n          average_negotiated_value?: number | null;\r\n          total_negotiating_value?: number | null;\r\n          previous_period_value?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      funnel_data: {\r\n        Row: {\r\n          id: string;\r\n          name: string | null;\r\n          value: number | null;\r\n          percentage: number | null;\r\n          color: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          name?: string | null;\r\n          value?: number | null;\r\n          percentage?: number | null;\r\n          color?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string | null;\r\n          value?: number | null;\r\n          percentage?: number | null;\r\n          color?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      ai_products: {\r\n        Row: {\r\n          id: string;\r\n          name: string;\r\n          description: string | null;\r\n          icon: string | null;\r\n          image: string | null;\r\n          features: string[] | null;\r\n          category: string | null;\r\n          popular: boolean | null;\r\n          new: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id: string;\r\n          name: string;\r\n          description?: string | null;\r\n          icon?: string | null;\r\n          image?: string | null;\r\n          features?: string[] | null;\r\n          category?: string | null;\r\n          popular?: boolean | null;\r\n          new?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string;\r\n          description?: string | null;\r\n          icon?: string | null;\r\n          image?: string | null;\r\n          features?: string[] | null;\r\n          category?: string | null;\r\n          popular?: boolean | null;\r\n          new?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      utm_metrics: {\r\n        Row: {\r\n          id: string;\r\n          total_campaigns: number | null;\r\n          total_leads: number | null;\r\n          conversion_rate: number | null;\r\n          is_stale: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_campaigns?: number | null;\r\n          total_leads?: number | null;\r\n          conversion_rate?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_campaigns?: number | null;\r\n          total_leads?: number | null;\r\n          conversion_rate?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      utm_tracking: {\r\n        Row: {\r\n          id: string;\r\n          lead_id: string | null;\r\n          utm_source: string | null;\r\n          utm_medium: string | null;\r\n          utm_campaign: string | null;\r\n          utm_term: string | null;\r\n          utm_content: string | null;\r\n          utm_conversion: boolean | null;\r\n          utm_conversion_value: number | null;\r\n          utm_conversion_stage: string | null;\r\n          landing_page: string | null;\r\n          device_type: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          lead_id?: string | null;\r\n          utm_source?: string | null;\r\n          utm_medium?: string | null;\r\n          utm_campaign?: string | null;\r\n          utm_term?: string | null;\r\n          utm_content?: string | null;\r\n          utm_conversion?: boolean | null;\r\n          utm_conversion_value?: number | null;\r\n          utm_conversion_stage?: string | null;\r\n          landing_page?: string | null;\r\n          device_type?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          lead_id?: string | null;\r\n          utm_source?: string | null;\r\n          utm_medium?: string | null;\r\n          utm_campaign?: string | null;\r\n          utm_term?: string | null;\r\n          utm_content?: string | null;\r\n          utm_conversion?: boolean | null;\r\n          utm_conversion_value?: number | null;\r\n          utm_conversion_stage?: string | null;\r\n          landing_page?: string | null;\r\n          device_type?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n    };\r\n    Views: {\r\n      dashboard_metrics: {\r\n        Row: {\r\n          total_clients: number | null;\r\n          total_chats: number | null;\r\n          new_clients_this_month: number | null;\r\n          total_conversations: number | null;\r\n          response_rate: number | null;\r\n          conversion_rate: number | null;\r\n          negotiated_value: number | null;\r\n          total_campaigns: number | null;\r\n          total_leads: number | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      conversion_funnel_view: {\r\n        Row: {\r\n          name: string | null;\r\n          value: number | null;\r\n          percentage: number | null;\r\n          color: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      leads_analysis: {\r\n        Row: {\r\n          month: string | null;\r\n          clients: number | null;\r\n          leads: number | null;\r\n          source_name: string | null;\r\n          source_value: number | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n    };\r\n    Functions: {\r\n      get_metrics_by_date_range: {\r\n        Args: {\r\n          start_date?: string;\r\n          end_date?: string;\r\n        };\r\n        Returns: {\r\n          total_conversations: number;\r\n          response_rate: number;\r\n          conversion_rate: number;\r\n          negotiated_value: number;\r\n        }[];\r\n      };\r\n      get_funnel_by_date_range: {\r\n        Args: {\r\n          start_date?: string;\r\n          end_date?: string;\r\n        };\r\n        Returns: {\r\n          name: string;\r\n          value: number;\r\n          percentage: number;\r\n          color: string;\r\n        }[];\r\n      };\r\n    };\r\n    Enums: {};\r\n    CompositeTypes: {};\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\react.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\responses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\agendaUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\chatUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\clientDataUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\customFieldValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventFormHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\fictitiousMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\navigationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\scheduleUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\subscriptionUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]