[{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\chat-optimized\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[950,953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[950,953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChats'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadChats]","fix":{"range":[3631,3633],"text":"[loadChats]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { ChatAreaOptimized } from '@/components/chat/ChatAreaOptimized';\r\nimport { ChatList } from '@/components/chat/ChatList';\r\nimport { Chat, Conversation } from '@/types/chat';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Loader2 } from 'lucide-react';\r\nimport { logger } from '@/utils/logger';\r\n\r\n/**\r\n * P├ígina otimizada de chat que demonstra as melhorias de performance\r\n */\r\nexport default function ChatOptimizedPage() {\r\n  const [chats, setChats] = useState<Chat[]>([]);\r\n  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\r\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fun├º├úo para formatar os dados de conversa recebidos do Supabase\r\n  const formatChatData = (data: any[]): Chat[] => {\r\n    // Agrupar conversas por cliente/contato\r\n    const groupedConversations = data.reduce((acc, conv) => {\r\n      const clientId = conv.session_id || conv.id;\r\n      const clientName = conv.name || `Cliente ${clientId}`;\r\n      \r\n      if (!acc[clientId]) {\r\n        acc[clientId] = {\r\n          id: clientId,\r\n          client: {\r\n            id: clientId,\r\n            name: clientName,\r\n            email: conv.email,\r\n          },\r\n          conversations: [],\r\n        };\r\n      }\r\n      \r\n      acc[clientId].conversations.push({\r\n        id: conv.id,\r\n        name: conv.name,\r\n        lastMessage: '',\r\n        time: conv.created_at,\r\n        unread: 0,\r\n        phone: conv.phone,\r\n        email: conv.email,\r\n        sessionId: conv.session_id,\r\n      });\r\n      \r\n      return acc;\r\n    }, {} as Record<string, Chat>);\r\n    \r\n    return Object.values(groupedConversations);\r\n  };\r\n\r\n  // Fun├º├úo para selecionar o chat e conversa iniciais\r\n  const selectInitialChatAndConversation = (chats: Chat[]) => {\r\n    if (chats.length > 0) {\r\n      const firstChat = chats[0];\r\n      setSelectedChat(firstChat);\r\n      \r\n      if (firstChat.conversations.length > 0) {\r\n        setSelectedConversation(firstChat.conversations[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fun├º├úo para buscar chats do Supabase (usando tabelas dispon├¡veis)\r\n  const fetchChatsFromSupabase = async () => {\r\n    const { data, error } = await supabase\r\n      .from('conversations')\r\n      .select(`\r\n        id,\r\n        name,\r\n        phone,\r\n        email,\r\n        session_id,\r\n        created_at\r\n      `)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  };\r\n\r\n  // Fun├º├úo principal para carregar chats\r\n  const loadChats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const data = await fetchChatsFromSupabase();\r\n      const formattedChats = formatChatData(data);\r\n      \r\n      setChats(formattedChats);\r\n      selectInitialChatAndConversation(formattedChats);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar chats:', err);\r\n      setError('Falha ao carregar chats. Por favor, tente novamente.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar chats ao montar o componente\r\n  useEffect(() => {\r\n    loadChats();\r\n    \r\n    // Configurar subscription para atualiza├º├Áes em tempo real\r\n    const subscription = supabase\r\n      .channel('conversations_changes')\r\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'conversations' }, loadChats)\r\n      .subscribe();\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Manipular sele├º├úo de chat\r\n  const handleSelectChat = (chat: Chat) => {\r\n    setSelectedChat(chat);\r\n    \r\n    // Selecionar primeira conversa por padr├úo\r\n    if (chat.conversations.length > 0) {\r\n      setSelectedConversation(chat.conversations[0]);\r\n    } else {\r\n      setSelectedConversation(null);\r\n    }\r\n  };\r\n\r\n  // Manipular sele├º├úo de conversa\r\n  const handleSelectConversation = (conversation: Conversation) => {\r\n    setSelectedConversation(conversation);\r\n  };\r\n\r\n  // Renderizar estado de carregamento\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex h-screen items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n        <span className=\"ml-2\">Carregando chats...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Renderizar mensagem de erro\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex h-screen items-center justify-center\">\r\n        <div className=\"p-4 bg-red-50 text-red-500 rounded-md\">\r\n          <p>{error}</p>\r\n          <button\r\n            className=\"mt-2 px-4 py-2 bg-primary text-white rounded-md\"\r\n            onClick={() => window.location.reload()}\r\n          >\r\n            Tentar novamente\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-screen overflow-hidden\">\r\n      {/* Barra lateral com lista de chats */}\r\n      <div className=\"w-80 border-r\">\r\n        <ChatList\r\n          chats={chats}\r\n          selectedChat={selectedChat}\r\n          onSelectChat={handleSelectChat}\r\n          selectedConversation={selectedConversation}\r\n          onSelectConversation={handleSelectConversation}\r\n        />\r\n      </div>\r\n      \r\n      {/* ├ürea principal de chat otimizada */}\r\n      <div className=\"flex-1\">\r\n        <ChatAreaOptimized\r\n          selectedChat={selectedChat}\r\n          selectedConversation={selectedConversation}\r\n        />\r\n      </div>\r\n      \r\n      {/* Indicador de vers├úo otimizada */}\r\n      <div className=\"absolute bottom-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full\">\r\n        Vers├úo Otimizada\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\contextual-memory-viewer\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[721,724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[721,724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1813,1816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1813,1816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSessions]","fix":{"range":[2088,2090],"text":"[loadSessions]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { ContextualMemoryViewer } from '@/components/ContextualMemoryViewer';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function ContextualMemoryViewerPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sess├Áes\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sess├Áes\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sess├úo por padr├úo\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Erro ao carregar sess├Áes:', err);\r\n      setError(err.message || 'Erro ao carregar sess├Áes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sess├Áes ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Visualizador de Mem├│ria Contextual</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Explore o contexto atual e mem├│rias contextuais das conversas\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas mem├│rias contextuais\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <ContextualMemoryViewer \r\n            sessionId={selectedSessionId} \r\n            autoRefresh={false} \r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\episodic-memory-viewer\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[715,718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[715,718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSessions]","fix":{"range":[2082,2084],"text":"[loadSessions]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { EpisodicMemoryViewer } from '@/components/EpisodicMemoryViewer';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function EpisodicMemoryViewerPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sess├Áes\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sess├Áes\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sess├úo por padr├úo\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Erro ao carregar sess├Áes:', err);\r\n      setError(err.message || 'Erro ao carregar sess├Áes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sess├Áes ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Visualizador de Mem├│ria Epis├│dica</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Explore a linha do tempo e mem├│rias epis├│dicas das conversas\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas mem├│rias epis├│dicas\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <EpisodicMemoryViewer \r\n            sessionId={selectedSessionId} \r\n            autoRefresh={false} \r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\memory-dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[970,973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[970,973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2062,2065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2062,2065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSessions]","fix":{"range":[2337,2339],"text":"[loadSessions]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw, Brain, Clock, BookOpen } from 'lucide-react';\r\nimport { SemanticMemoryViewer } from '@/components/SemanticMemoryViewer';\r\nimport { EpisodicMemoryViewer } from '@/components/EpisodicMemoryViewer';\r\nimport { ContextualMemoryViewer } from '@/components/ContextualMemoryViewer';\r\nimport { MemoryNavigation } from '@/components/MemoryNavigation';\r\n\r\nexport default function MemoryDashboardPage() {\r\n  const [sessions, setSessions] = useState<any[]>([]);\r\n  const [selectedSessionId, setSelectedSessionId] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Carregar conversas existentes como sess├Áes\r\n  const loadSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Buscar conversas existentes\r\n      const { data, error } = await supabase\r\n        .from('conversations')\r\n        .select('id, name, session_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(20);\r\n\r\n      if (error) throw error;\r\n\r\n      // Mapear conversas para sess├Áes\r\n      const sessionData = data.map(conv => ({\r\n        id: conv.session_id || conv.id,\r\n        name: conv.name || `Conversa ${conv.id.substring(0, 8)}`,\r\n        created_at: conv.created_at,\r\n      }));\r\n\r\n      setSessions(sessionData);\r\n\r\n      // Selecionar a primeira sess├úo por padr├úo\r\n      if (sessionData.length > 0 && !selectedSessionId) {\r\n        setSelectedSessionId(sessionData[0].id);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Erro ao carregar sess├Áes:', err);\r\n      setError(err.message || 'Erro ao carregar sess├Áes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carregar sess├Áes ao montar o componente\r\n  useEffect(() => {\r\n    loadSessions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container py-8\">\r\n      <MemoryNavigation />\r\n      <div className=\"flex flex-col space-y-8\">\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Dashboard de Mem├│ria IA</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Visualize e gerencie todos os tipos de mem├│ria da IA em um s├│ lugar\r\n          </p>\r\n        </div>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <CardTitle>Selecionar Conversa</CardTitle>\r\n                <CardDescription>\r\n                  Escolha uma conversa para visualizar suas mem├│rias\r\n                </CardDescription>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={loadSessions} \r\n                disabled={loading}\r\n                title=\"Atualizar lista de conversas\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {loading ? (\r\n              <Skeleton className=\"h-10 w-full\" />\r\n            ) : error ? (\r\n              <div className=\"text-destructive\">{error}</div>\r\n            ) : sessions.length > 0 ? (\r\n              <Select\r\n                value={selectedSessionId}\r\n                onValueChange={setSelectedSessionId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma conversa\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {sessions.map(session => (\r\n                    <SelectItem key={session.id} value={session.id}>\r\n                      {session.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"text-center py-4 text-muted-foreground\">\r\n                Nenhuma conversa encontrada.\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {selectedSessionId && (\r\n          <Tabs defaultValue=\"contextual\" className=\"w-full\">\r\n            <TabsList className=\"grid grid-cols-3 mb-8\">\r\n              <TabsTrigger value=\"contextual\" className=\"flex items-center\">\r\n                <Brain className=\"h-4 w-4 mr-2\" />\r\n                Contextual\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"semantic\" className=\"flex items-center\">\r\n                <BookOpen className=\"h-4 w-4 mr-2\" />\r\n                Sem├óntica\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"episodic\" className=\"flex items-center\">\r\n                <Clock className=\"h-4 w-4 mr-2\" />\r\n                Epis├│dica\r\n              </TabsTrigger>\r\n            </TabsList>\r\n            \r\n            <TabsContent value=\"contextual\">\r\n              <ContextualMemoryViewer \r\n                sessionId={selectedSessionId} \r\n                autoRefresh={false} \r\n              />\r\n            </TabsContent>\r\n            \r\n            <TabsContent value=\"semantic\">\r\n              <SemanticMemoryViewer \r\n                sessionId={selectedSessionId} \r\n              />\r\n            </TabsContent>\r\n            \r\n            <TabsContent value=\"episodic\">\r\n              <EpisodicMemoryViewer \r\n                sessionId={selectedSessionId} \r\n                autoRefresh={false} \r\n              />\r\n            </TabsContent>\r\n          </Tabs>\r\n        )}\r\n\r\n        <div className=\"text-center text-sm text-muted-foreground mt-8\">\r\n          <p>Sistema de Mem├│ria IA Otimizado</p>\r\n          <p>Vers├úo 2.0</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\app\\memory-viewer\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\AIProductPriceTag.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1434,1437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1434,1437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSubscription } from \"@/hooks/useSubscription\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\n\r\n// Define AIProduct interface locally to avoid mock dependency\r\ninterface AIProduct {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: string;\r\n  price: number;\r\n  currency: string;\r\n  features: string[];\r\n  image: string;\r\n  icon: string;\r\n  popular: boolean;\r\n  new: boolean;\r\n  rating: number;\r\n  reviews: number;\r\n}\r\n\r\ninterface AIProductPriceTagProps {\r\n  product: AIProduct;\r\n  showButton?: boolean;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n}\r\n\r\nconst AIProductPriceTag: React.FC<AIProductPriceTagProps> = ({\r\n  product,\r\n  showButton = true,\r\n  size = \"md\",\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const { subscription, getCurrentPlan } = useSubscription();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n  \r\n  const currentPlan = getCurrentPlan();\r\n  const hasAccess = currentPlan?.ai_products?.includes(product.id) || false;\r\n  \r\n  // Use Supabase plans if available\r\n  const availablePlans = supabasePlans || [];\r\n  \r\n  // Find the cheapest plan that includes this AI product\r\n  const cheapestPlan = availablePlans\r\n    .filter(plan => plan.billing_period === \"monthly\" && (plan as any).ai_products?.includes(product.id))\r\n    .sort((a, b) => a.price - b.price)[0];\r\n    \r\n  // Plans are automatically loaded by React Query\r\n  \r\n  const handleClick = () => {\r\n    if (hasAccess) {\r\n      navigate(`/knowledge?aiProduct=${product.id}`);\r\n    } else {\r\n      navigate(\"/pricing\");\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className={`flex ${size === \"sm\" ? \"flex-col items-start gap-1\" : \"items-center justify-between\"}`}>\r\n      <div className=\"flex items-center gap-2\">\r\n        {hasAccess ? (\r\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\">\r\n            Inclu├¡da no seu plano\r\n          </Badge>\r\n        ) : (\r\n          <div className=\"flex items-center gap-1\">\r\n            <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\">\r\n              A partir de R$ {cheapestPlan?.price.toFixed(2) || \"99.90\"}/m├¬s\r\n            </Badge>\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              Plano {cheapestPlan?.name || \"B├ísico\"}\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {showButton && (\r\n        <Button \r\n          onClick={handleClick}\r\n          className={size === \"sm\" ? \"mt-2\" : \"\"}\r\n          variant={hasAccess ? \"default\" : \"outline\"}\r\n          size={size === \"sm\" ? \"sm\" : \"default\"}\r\n        >\r\n          {hasAccess ? \"Acessar\" : \"Ver Planos\"}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIProductPriceTag;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\AppLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ContextualMemoryViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3149,3152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3149,3152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5774,5777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5774,5777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useContextualMemory } from '@/hooks/useContextualMemory';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { Star, StarOff, Clock, AlertCircle, Brain, Layers } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ContextualMemoryViewerProps {\n  sessionId: string;\n  autoRefresh?: boolean;\n}\n\nexport function ContextualMemoryViewer({ sessionId, autoRefresh = false }: ContextualMemoryViewerProps) {\n  const {\n    memories,\n    shortTermMemories,\n    mediumTermMemories,\n    longTermMemories,\n    contextSummary,\n    loading,\n    error,\n    refresh,\n    updateImportance,\n  } = useContextualMemory({\n    sessionId,\n    autoRefresh,\n  });\n\n  // Alternar import├óncia da mem├│ria\n  const handleToggleImportance = async (memoryId: number, currentImportance: number) => {\n    const newImportance = currentImportance >= 3 ? 1 : 5; // Alternar entre 1 e 5\n    await updateImportance(memoryId, newImportance);\n  };\n\n  // Renderizar um item de mem├│ria\n  const renderMemoryItem = (memory: any) => (\n    <Card key={memory.id} className={cn(\n      'mb-4 transition-all duration-200',\n      memory.importance >= 3 ? 'border-amber-400 dark:border-amber-500' : ''\n    )}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-base flex items-center\">\n              <Brain className=\"h-4 w-4 mr-2\" />\n              Mem├│ria Contextual\n              <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                {memory.memory_level === 'short_term' ? 'Curto Prazo' : \n                 memory.memory_level === 'medium_term' ? 'M├®dio Prazo' : 'Longo Prazo'}\n              </Badge>\n            </CardTitle>\n            <CardDescription className=\"text-xs\">\n              {format(new Date(memory.created_at), 'dd MMM yyyy HH:mm:ss', { locale: ptBR })}\n            </CardDescription>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={() => handleToggleImportance(memory.id, memory.importance)}\n            title={memory.importance >= 3 ? \"Remover import├óncia\" : \"Marcar como importante\"}\n          >\n            {memory.importance >= 3 ? \n              <Star className=\"h-4 w-4 text-amber-500\" /> : \n              <StarOff className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm whitespace-pre-wrap\">{memory.message}</p>\n        \n        {memory.entities && memory.entities.length > 0 && (\n          <div className=\"mt-2\">\n            <p className=\"text-xs text-muted-foreground mb-1\">Entidades:</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {memory.entities.map((entity: any, idx: number) => (\n                <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                  {entity.name}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n      {memory.context && Object.keys(memory.context).length > 0 && (\n        <CardFooter className=\"pt-0\">\n          <div className=\"w-full\">\n            <p className=\"text-xs text-muted-foreground mb-1\">Contexto:</p>\n            <div className=\"text-xs bg-muted p-2 rounded-md\">\n              <pre className=\"whitespace-pre-wrap\">\n                {JSON.stringify(memory.context, null, 2)}\n              </pre>\n            </div>\n          </div>\n        </CardFooter>\n      )}\n    </Card>\n  );\n\n  // Renderizar o resumo do contexto\n  const renderContextSummary = () => (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Resumo do Contexto</CardTitle>\n        <CardDescription>\n          Vis├úo consolidada do contexto atual da conversa\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"text-sm font-medium mb-2 flex items-center\">\n              <Layers className=\"h-4 w-4 mr-2\" />\n              Distribui├º├úo de Mem├│rias\n            </h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-xs\">Curto Prazo:</span>\n                <Badge variant=\"secondary\">{contextSummary.short_term_count}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-xs\">M├®dio Prazo:</span>\n                <Badge variant=\"secondary\">{contextSummary.medium_term_count}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-xs\">Longo Prazo:</span>\n                <Badge variant=\"secondary\">{contextSummary.long_term_count}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center pt-1 border-t\">\n                <span className=\"text-xs font-medium\">Total:</span>\n                <Badge>{contextSummary.total_memories}</Badge>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-sm font-medium mb-2\">Entidades Principais</h4>\n            {contextSummary.entities.length > 0 ? (\n              <div className=\"flex flex-wrap gap-1\">\n                {contextSummary.entities.slice(0, 10).map((entity: any, idx: number) => (\n                  <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                    {entity.name}\n                  </Badge>\n                ))}\n                {contextSummary.entities.length > 10 && (\n                  <Badge variant=\"outline\" className=\"text-xs\">+{contextSummary.entities.length - 10}</Badge>\n                )}\n              </div>\n            ) : (\n              <p className=\"text-xs text-muted-foreground\">Nenhuma entidade identificada</p>\n            )}\n          </div>\n        </div>\n        \n        {Object.keys(contextSummary.context).length > 0 && (\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Contexto Consolidado</h4>\n            <div className=\"text-xs bg-muted p-2 rounded-md\">\n              <pre className=\"whitespace-pre-wrap\">\n                {JSON.stringify(contextSummary.context, null, 2)}\n              </pre>\n            </div>\n          </div>\n        )}\n        \n        {contextSummary.most_important && (\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium mb-2 flex items-center\">\n              <Star className=\"h-4 w-4 mr-2 text-amber-500\" />\n              Mem├│ria Mais Importante\n            </h4>\n            <div className=\"text-xs p-2 border rounded-md\">\n              <p className=\"font-medium\">{contextSummary.most_important.message}</p>\n              <p className=\"text-muted-foreground mt-1\">\n                {format(new Date(contextSummary.most_important.created_at), 'dd MMM yyyy HH:mm:ss', { locale: ptBR })}\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (error) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle>Erro ao carregar mem├│rias</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center text-destructive mb-4\">\n            <AlertCircle className=\"h-5 w-5 mr-2\" />\n            <p>{error.message}</p>\n          </div>\n          <Button onClick={refresh} className=\"mt-2\">\n            Tentar novamente\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>Mem├│ria Contextual</CardTitle>\n        <CardDescription>\n          Visualize o contexto atual da conversa e mem├│rias por prazo\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Resumo do Contexto */}\n        {loading ? (\n          <Skeleton className=\"h-40 w-full mb-6\" />\n        ) : (\n          renderContextSummary()\n        )}\n        \n        <Tabs defaultValue=\"all\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"all\">Todas</TabsTrigger>\n            <TabsTrigger value=\"short\">Curto Prazo</TabsTrigger>\n            <TabsTrigger value=\"medium\">M├®dio Prazo</TabsTrigger>\n            <TabsTrigger value=\"long\">Longo Prazo</TabsTrigger>\n          </TabsList>\n          \n          {/* Tab de Todas as Mem├│rias */}\n          <TabsContent value=\"all\">\n            {loading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 w-full\" />\n                ))}\n              </div>\n            ) : memories.length > 0 ? (\n              <div className=\"space-y-2\">\n                {memories.map(renderMemoryItem)}\n              </div>\n            ) : (\n              <p className=\"text-center py-8 text-muted-foreground\">\n                Nenhuma mem├│ria contextual encontrada.\n              </p>\n            )}\n          </TabsContent>\n          \n          {/* Tab de Mem├│rias de Curto Prazo */}\n          <TabsContent value=\"short\">\n            {loading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 2 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 w-full\" />\n                ))}\n              </div>\n            ) : shortTermMemories.length > 0 ? (\n              <div className=\"space-y-2\">\n                {shortTermMemories.map(renderMemoryItem)}\n              </div>\n            ) : (\n              <p className=\"text-center py-8 text-muted-foreground\">\n                Nenhuma mem├│ria de curto prazo encontrada.\n              </p>\n            )}\n          </TabsContent>\n          \n          {/* Tab de Mem├│rias de M├®dio Prazo */}\n          <TabsContent value=\"medium\">\n            {loading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 2 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 w-full\" />\n                ))}\n              </div>\n            ) : mediumTermMemories.length > 0 ? (\n              <div className=\"space-y-2\">\n                {mediumTermMemories.map(renderMemoryItem)}\n              </div>\n            ) : (\n              <p className=\"text-center py-8 text-muted-foreground\">\n                Nenhuma mem├│ria de m├®dio prazo encontrada.\n              </p>\n            )}\n          </TabsContent>\n          \n          {/* Tab de Mem├│rias de Longo Prazo */}\n          <TabsContent value=\"long\">\n            {loading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 2 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-32 w-full\" />\n                ))}\n              </div>\n            ) : longTermMemories.length > 0 ? (\n              <div className=\"space-y-2\">\n                {longTermMemories.map(renderMemoryItem)}\n              </div>\n            ) : (\n              <p className=\"text-center py-8 text-muted-foreground\">\n                Nenhuma mem├│ria de longo prazo encontrada.\n              </p>\n            )}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\DeleteEventDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\DiagnosticPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[875,878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[875,878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runDiagnostics'. Either include it or remove the dependency array.","line":168,"column":6,"nodeType":"ArrayExpression","endLine":168,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [location.pathname, runDiagnostics]","fix":{"range":[5879,5898],"text":"[location.pathname, runDiagnostics]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useThemeSettings } from \"@/context/ThemeSettingsContext\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle, \r\n  Info, \r\n  RefreshCw,\r\n  Bug,\r\n  Database,\r\n  User,\r\n  Settings,\r\n  Navigation\r\n} from \"lucide-react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\n\r\ninterface DiagnosticResult {\r\n  category: string;\r\n  test: string;\r\n  status: 'success' | 'error' | 'warning' | 'info';\r\n  message: string;\r\n  details?: any;\r\n}\r\n\r\nconst DiagnosticPanel: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { user, session, userProfile, isLoading: authLoading, isAdmin } = useAuth();\r\n  const { settings } = useThemeSettings();\r\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [supabaseStatus, setSupabaseStatus] = useState<any>(null);\r\n\r\n  const runDiagnostics = async () => {\r\n    setIsRunning(true);\r\n    const results: DiagnosticResult[] = [];\r\n\r\n    // Test 1: Authentication Status\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'User Authentication',\r\n      status: user ? 'success' : 'error',\r\n      message: user ? 'Usu├írio autenticado' : 'Usu├írio n├úo autenticado',\r\n      details: { user: user?.email, isAdmin, authLoading }\r\n    });\r\n\r\n    // Test 2: Session Status\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'Session Status',\r\n      status: session ? 'success' : 'warning',\r\n      message: session ? 'Sess├úo ativa' : 'Sem sess├úo ativa',\r\n      details: { sessionExists: !!session }\r\n    });\r\n\r\n    // Test 3: User Profile\r\n    results.push({\r\n      category: 'Auth',\r\n      test: 'User Profile',\r\n      status: userProfile ? 'success' : 'warning',\r\n      message: userProfile ? 'Perfil carregado' : 'Perfil n├úo carregado',\r\n      details: userProfile\r\n    });\r\n\r\n    // Test 4: Theme Settings\r\n    results.push({\r\n      category: 'Theme',\r\n      test: 'Theme Configuration',\r\n      status: settings ? 'success' : 'error',\r\n      message: settings ? 'Configura├º├Áes de tema carregadas' : 'Erro nas configura├º├Áes de tema',\r\n      details: settings\r\n    });\r\n\r\n    // Test 5: Current Route\r\n    results.push({\r\n      category: 'Navigation',\r\n      test: 'Current Route',\r\n      status: 'info',\r\n      message: `Rota atual: ${location.pathname}`,\r\n      details: { pathname: location.pathname, search: location.search, hash: location.hash }\r\n    });\r\n\r\n    // Test 6: Supabase Connection - Fixed to use correct table name\r\n    try {\r\n      const { data, error } = await supabase.from('contacts').select('count', { count: 'exact', head: true });\r\n      results.push({\r\n        category: 'Database',\r\n        test: 'Supabase Connection',\r\n        status: error ? 'error' : 'success',\r\n        message: error ? `Erro de conex├úo: ${error.message}` : 'Conex├úo com Supabase OK',\r\n        details: { error, count: data }\r\n      });\r\n      setSupabaseStatus({ connected: !error, error });\r\n    } catch (err) {\r\n      results.push({\r\n        category: 'Database',\r\n        test: 'Supabase Connection',\r\n        status: 'error',\r\n        message: `Erro de conex├úo: ${err}`,\r\n        details: { error: err }\r\n      });\r\n      setSupabaseStatus({ connected: false, error: err });\r\n    }\r\n\r\n    // Test 7: Environment Variables\r\n    const envVars = {\r\n      VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,\r\n      VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '***HIDDEN***' : undefined,\r\n      VITE_ENV: import.meta.env.VITE_ENV\r\n    };\r\n    \r\n    results.push({\r\n      category: 'Environment',\r\n      test: 'Environment Variables',\r\n      status: envVars.VITE_SUPABASE_URL && envVars.VITE_SUPABASE_ANON_KEY ? 'success' : 'error',\r\n      message: envVars.VITE_SUPABASE_URL && envVars.VITE_SUPABASE_ANON_KEY ? 'Vari├íveis de ambiente OK' : 'Vari├íveis de ambiente faltando',\r\n      details: envVars\r\n    });\r\n\r\n    // Test 8: Local Storage\r\n    const mockAuthData = localStorage.getItem('mockAuthData');\r\n    results.push({\r\n      category: 'Storage',\r\n      test: 'Local Storage',\r\n      status: mockAuthData ? 'info' : 'warning',\r\n      message: mockAuthData ? 'Dados de auth mock encontrados' : 'Sem dados de auth mock',\r\n      details: { hasMockAuth: !!mockAuthData }\r\n    });\r\n\r\n    setDiagnostics(results);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const testNavigation = (path: string) => {\r\n    try {\r\n      navigate(path);\r\n    } catch (error) {\r\n      console.error('Erro na navega├º├úo:', error);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'success': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'error': return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'warning': return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      default: return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'success': return 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800';\r\n      case 'error': return 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800';\r\n      case 'warning': return 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800';\r\n      default: return 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    runDiagnostics();\r\n  }, [location.pathname]);\r\n\r\n  const groupedDiagnostics = diagnostics.reduce((acc, diagnostic) => {\r\n    if (!acc[diagnostic.category]) {\r\n      acc[diagnostic.category] = [];\r\n    }\r\n    acc[diagnostic.category].push(diagnostic);\r\n    return acc;\r\n  }, {} as Record<string, DiagnosticResult[]>);\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Bug className=\"h-5 w-5\" />\r\n          Painel de Diagn├│stico - Comunica├º├úo entre P├íginas\r\n        </CardTitle>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge variant=\"outline\">Rota: {location.pathname}</Badge>\r\n          <Badge variant={user ? 'default' : 'destructive'}>\r\n            {user ? 'Autenticado' : 'N├úo autenticado'}\r\n          </Badge>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"diagnostics\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"diagnostics\">Diagn├│sticos</TabsTrigger>\r\n            <TabsTrigger value=\"navigation\">Navega├º├úo</TabsTrigger>\r\n            <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"diagnostics\" className=\"space-y-4\">\r\n            <div className=\"flex gap-2 mb-4\">\r\n              <Button \r\n                onClick={runDiagnostics} \r\n                disabled={isRunning}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                {isRunning ? (\r\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n                ) : (\r\n                  <RefreshCw className=\"h-4 w-4\" />\r\n                )}\r\n                {isRunning ? 'Executando...' : 'Executar Diagn├│sticos'}\r\n              </Button>\r\n            </div>\r\n\r\n            {Object.entries(groupedDiagnostics).map(([category, tests]) => (\r\n              <div key={category} className=\"space-y-2\">\r\n                <h3 className=\"font-semibold flex items-center gap-2\">\r\n                  {category === 'Auth' && <User className=\"h-4 w-4\" />}\r\n                  {category === 'Database' && <Database className=\"h-4 w-4\" />}\r\n                  {category === 'Navigation' && <Navigation className=\"h-4 w-4\" />}\r\n                  {category === 'Theme' && <Settings className=\"h-4 w-4\" />}\r\n                  {category}\r\n                </h3>\r\n                {tests.map((test, index) => (\r\n                  <div \r\n                    key={index}\r\n                    className={`p-3 rounded border ${getStatusColor(test.status)}`}\r\n                  >\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      {getStatusIcon(test.status)}\r\n                      <span className=\"font-medium\">{test.test}</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{test.message}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"navigation\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\r\n              {[\r\n                { path: '/dashboard', name: 'Dashboard' },\r\n                { path: '/metrics', name: 'M├®tricas' },\r\n                { path: '/chats', name: 'Chats' },\r\n                { path: '/knowledge', name: 'Conhecimento' },\r\n                { path: '/clients', name: 'Clientes' },\r\n                { path: '/evolution', name: 'Evolu├º├úo' },\r\n                { path: '/schedule', name: 'Agenda' },\r\n                { path: '/admin', name: 'Admin' },\r\n                { path: '/subscription', name: 'Assinatura' },\r\n              ].map((route) => (\r\n                <Button\r\n                  key={route.path}\r\n                  variant={location.pathname === route.path ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => testNavigation(route.path)}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {route.name}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"details\" className=\"space-y-4\">\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Estado da Autentica├º├úo</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify({ user: user?.email, isAdmin, authLoading, hasSession: !!session }, null, 2)}\r\n                </pre>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Configura├º├Áes de Tema</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify(settings, null, 2)}\r\n                </pre>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold mb-2\">Status do Supabase</h3>\r\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-auto\">\r\n                  {JSON.stringify(supabaseStatus, null, 2)}\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DiagnosticPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\EpisodicMemoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\EventFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ForgotPasswordForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\MemoryNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\NavigationTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\PageTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\PauseDurationDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\SemanticMemoryViewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEntities'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadEntities, sessionId]","fix":{"range":[1449,1460],"text":"[loadEntities, sessionId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Brain, Search, RefreshCw } from 'lucide-react';\r\n\r\ninterface SemanticEntity {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  confidence: number;\r\n  relationships: string[];\r\n}\r\n\r\ninterface SemanticMemoryViewerProps {\r\n  sessionId?: string;\r\n}\r\n\r\nexport function SemanticMemoryViewer({ sessionId }: SemanticMemoryViewerProps) {\r\n  const [entities, setEntities] = useState<SemanticEntity[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const mockEntities: SemanticEntity[] = [\r\n    {\r\n      id: '1',\r\n      name: 'Cliente Jo├úo Silva',\r\n      type: 'PERSON',\r\n      confidence: 0.95,\r\n      relationships: ['empresa_abc', 'projeto_x'],\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Empresa ABC',\r\n      type: 'ORGANIZATION',\r\n      confidence: 0.88,\r\n      relationships: ['cliente_joao', 'contrato_123'],\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Projeto X',\r\n      type: 'PROJECT',\r\n      confidence: 0.92,\r\n      relationships: ['cliente_joao', 'deadline_31'],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadEntities();\r\n  }, [sessionId]);\r\n\r\n  const loadEntities = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simular carregamento\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setEntities(mockEntities);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar entidades:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredEntities = entities.filter(entity =>\r\n    entity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    entity.type.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const getTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'PERSON':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'ORGANIZATION':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'PROJECT':\r\n        return 'bg-purple-100 text-purple-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Brain className=\"h-5 w-5 text-primary\" />\r\n              Mem├│ria Sem├óntica\r\n            </CardTitle>\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={loadEntities}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center gap-2 mb-4\">\r\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder=\"Buscar entidades...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"flex-1\"\r\n            />\r\n          </div>\r\n\r\n          <ScrollArea className=\"h-96\">\r\n            <div className=\"space-y-4\">\r\n              {filteredEntities.map((entity) => (\r\n                <Card key={entity.id} className=\"p-4\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <h3 className=\"font-medium\">{entity.name}</h3>\r\n                        <Badge className={getTypeColor(entity.type)}>\r\n                          {entity.type}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        Confian├ºa: {(entity.confidence * 100).toFixed(1)}%\r\n                      </div>\r\n                      {entity.relationships.length > 0 && (\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"text-xs font-medium text-muted-foreground\">\r\n                            Relacionamentos:\r\n                          </div>\r\n                          <div className=\"flex flex-wrap gap-1\">\r\n                            {entity.relationships.map((rel, index) => (\r\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\r\n                                {rel}\r\n                              </Badge>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n\r\n              {filteredEntities.length === 0 && !loading && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  {searchTerm \r\n                    ? 'Nenhuma entidade encontrada para a busca.'\r\n                    : 'Nenhuma entidade sem├óntica dispon├¡vel.'\r\n                  }\r\n                </div>\r\n              )}\r\n\r\n              {loading && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  Carregando entidades...\r\n                </div>\r\n              )}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\SignupForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AIAccessTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Bot, Users, TrendingUp } from \"lucide-react\";\r\nimport { User } from \"@/types/user\";\r\n\r\ninterface AIAccessTabProps {\r\n  users: User[];\r\n  aiProducts: any[];\r\n}\r\n\r\nexport const AIAccessTab: React.FC<AIAccessTabProps> = ({\r\n  users,\r\n  aiProducts,\r\n}) => {\r\n  // Calculate AI usage statistics\r\n  const aiUsageStats = aiProducts\r\n    .map((product) => {\r\n      const usersWithAccess = users.filter((user) =>\r\n        user.ai_access.includes(product.id),\r\n      );\r\n      const percentage =\r\n        users.length > 0 ? (usersWithAccess.length / users.length) * 100 : 0;\r\n\r\n      return {\r\n        id: product.id,\r\n        name: product.name,\r\n        description: product.description,\r\n        category: product.category,\r\n        usersCount: usersWithAccess.length,\r\n        percentage: Math.round(percentage),\r\n        users: usersWithAccess,\r\n      };\r\n    })\r\n    .sort((a, b) => b.usersCount - a.usersCount);\r\n\r\n  const totalAIAccess = users.reduce(\r\n    (acc, user) => acc + user.ai_access.length,\r\n    0,\r\n  );\r\n  const averageAIPerUser =\r\n    users.length > 0 ? Math.round((totalAIAccess / users.length) * 10) / 10 : 0;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Bot className=\"h-5 w-5 text-primary\" />\r\n              IAs Dispon├¡veis\r\n            </CardTitle>\r\n            <CardDescription>Total de IAs no sistema</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold\">{aiProducts.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Users className=\"h-5 w-5 text-chart-2\" />\r\n              Total de Acessos\r\n            </CardTitle>\r\n            <CardDescription>Acessos distribu├¡dos</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold\">{totalAIAccess}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <TrendingUp className=\"h-5 w-5 text-chart-4\" />\r\n              M├®dia por Usu├írio\r\n            </CardTitle>\r\n            <CardDescription>IAs por usu├írio</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-3xl font-bold\">{averageAIPerUser}</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* AI Usage Details */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Bot className=\"h-5 w-5 text-primary\" />\r\n            Uso das IAs por Usu├írios\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Estat├¡sticas de acesso ├ás IAs dispon├¡veis no sistema\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {aiUsageStats.length === 0 ? (\r\n              <div className=\"text-center py-8 text-muted-foreground\">\r\n                Nenhuma IA encontrada no sistema\r\n              </div>\r\n            ) : (\r\n              aiUsageStats.map((ai) => (\r\n                <div key={ai.id} className=\"space-y-3\">\r\n                  <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <div className=\"bg-primary/10 p-2 rounded-lg\">\r\n                        <Bot className=\"h-5 w-5 text-primary\" />\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"font-semibold\">{ai.name}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {ai.description || \"IA sem descri├º├úo\"}\r\n                        </p>\r\n                        {ai.category && (\r\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\r\n                            {ai.category}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <div className=\"text-2xl font-bold\">{ai.usersCount}</div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        usu├írios ({ai.percentage}%)\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <Progress value={ai.percentage} className=\"h-2\" />\r\n\r\n                  {ai.users.length > 0 && (\r\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                      {ai.users.slice(0, 5).map((user) => (\r\n                        <Badge\r\n                          key={user.id}\r\n                          variant=\"secondary\"\r\n                          className=\"text-xs\"\r\n                        >\r\n                          {user.full_name || user.email}\r\n                        </Badge>\r\n                      ))}\r\n                      {ai.users.length > 5 && (\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          +{ai.users.length - 5} mais\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AdminHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\r\nimport { ArrowLeft, ShipWheel, LogOut } from \"lucide-react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface AdminHeaderProps {\r\n  user: any;\r\n  settings: any;\r\n  onSignOut: () => void;\r\n}\r\n\r\nexport const AdminHeader: React.FC<AdminHeaderProps> = ({\r\n  user,\r\n  settings,\r\n  onSignOut,\r\n}) => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <header\r\n      className=\"text-white shadow-md transition-colors duration-300 rounded-b-xl\"\r\n      style={{ backgroundColor: settings.primaryColor }}\r\n    >\r\n      <div className=\"flex flex-row items-center justify-between min-h-[64px] w-full px-4 sm:px-6 py-0\">\r\n        <div className=\"flex items-center gap-2 sm:gap-4\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => navigate(\"/dashboard\")}\r\n            className=\"text-white hover:bg-white/20 focus-visible:ring-white\"\r\n          >\r\n            <ArrowLeft className=\"h-5 w-5\" />\r\n          </Button>\r\n          {settings.logo ? (\r\n            <img\r\n              src={settings.logo}\r\n              alt=\"Logo\"\r\n              className=\"h-8 w-8 object-contain\"\r\n            />\r\n          ) : (\r\n            <ShipWheel\r\n              className=\"h-8 w-8\"\r\n              style={{ color: settings.secondaryColor }}\r\n            />\r\n          )}\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:gap-2\">\r\n            <h1 className=\"text-lg sm:text-2xl font-bold\">\r\n              {settings.brandName}\r\n            </h1>\r\n            <span className=\"text-sm sm:text-lg\">Administra├º├úo</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center gap-2 sm:gap-3\">\r\n          <Badge\r\n            variant=\"outline\"\r\n            className=\"bg-white/10 text-white border-0 px-2 sm:px-3 py-1 hidden sm:inline\"\r\n          >\r\n            {user?.user_metadata?.name || user?.email}\r\n          </Badge>\r\n          <ThemeToggle />\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={onSignOut}\r\n            className=\"border-white text-white bg-transparent hover:bg-white/20\"\r\n            style={{ height: 40, borderRadius: 8, borderWidth: 1.4 }}\r\n          >\r\n            <LogOut className=\"h-4 w-4 sm:mr-2\" />\r\n            <span className=\"hidden sm:inline\">Sair</span>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\AdminStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Users, Shield, Bot, Settings } from \"lucide-react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { User } from \"@/types/user\";\r\n\r\ninterface AdminStatsProps {\r\n  users: User[];\r\n  aiProducts: any[];\r\n}\r\n\r\nexport const AdminStats: React.FC<AdminStatsProps> = ({\r\n  users,\r\n  aiProducts,\r\n}) => {\r\n  const navigate = useNavigate();\r\n\r\n  const adminCount = users.filter((u) => u.role === \"admin\").length;\r\n  const uniqueAICount = Array.from(\r\n    new Set(users.flatMap((u) => u.ai_access)),\r\n  ).length;\r\n\r\n  const stats = [\r\n    {\r\n      title: \"Usu├írios\",\r\n      description: \"Total de usu├írios no sistema\",\r\n      value: users.length,\r\n      icon: Users,\r\n      color: \"text-primary\",\r\n    },\r\n    {\r\n      title: \"Administradores\",\r\n      description: \"Usu├írios com acesso admin\",\r\n      value: adminCount,\r\n      icon: Shield,\r\n      color: \"text-accent-foreground\",\r\n    },\r\n    {\r\n      title: \"IAs Ativas\",\r\n      description: \"IAs em uso pelos usu├írios\",\r\n      value: uniqueAICount,\r\n      icon: Bot,\r\n      color: \"text-chart-2\",\r\n    },\r\n    {\r\n      title: \"Configura├º├Áes\",\r\n      description: \"Op├º├Áes do sistema\",\r\n      value: null,\r\n      icon: Settings,\r\n      color: \"text-chart-4\",\r\n      action: () => navigate(\"/theme-settings\"),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\r\n      {stats.map((stat, index) => (\r\n        <Card\r\n          key={index}\r\n          className=\"transition-all duration-200 hover:shadow-md\"\r\n        >\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <stat.icon className={`h-5 w-5 ${stat.color}`} />\r\n              {stat.title}\r\n            </CardTitle>\r\n            <CardDescription>{stat.description}</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {stat.value !== null ? (\r\n              <div className=\"text-3xl font-bold\">{stat.value}</div>\r\n            ) : (\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"w-full\"\r\n                onClick={stat.action}\r\n              >\r\n                <Settings className=\"h-4 w-4 mr-2\" />\r\n                Configura├º├Áes de Tema\r\n              </Button>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\PermissionsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\UserDialogs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1145,1148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1145,1148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { User, UserFormData } from \"@/types/user\";\r\n\r\ninterface UserDialogsProps {\r\n  // Add User Dialog\r\n  isAddUserDialogOpen: boolean;\r\n  setIsAddUserDialogOpen: (open: boolean) => void;\r\n  newUser: UserFormData;\r\n  setNewUser: (user: UserFormData) => void;\r\n  handleAddUser: () => void;\r\n\r\n  // Edit User Dialog\r\n  isEditUserDialogOpen: boolean;\r\n  setIsEditUserDialogOpen: (open: boolean) => void;\r\n  selectedUser: User | null;\r\n  handleEditUser: () => void;\r\n\r\n  // Delete User Dialog\r\n  isDeleteUserDialogOpen: boolean;\r\n  setIsDeleteUserDialogOpen: (open: boolean) => void;\r\n  handleDeleteUser: () => void;\r\n\r\n  // AI Products\r\n  aiProducts: any[];\r\n}\r\n\r\nexport const UserDialogs: React.FC<UserDialogsProps> = ({\r\n  isAddUserDialogOpen,\r\n  setIsAddUserDialogOpen,\r\n  newUser,\r\n  setNewUser,\r\n  handleAddUser,\r\n  isEditUserDialogOpen,\r\n  setIsEditUserDialogOpen,\r\n  selectedUser,\r\n  handleEditUser,\r\n  isDeleteUserDialogOpen,\r\n  setIsDeleteUserDialogOpen,\r\n  handleDeleteUser,\r\n  aiProducts,\r\n}) => {\r\n  return (\r\n    <>\r\n      {/* Add User Dialog */}\r\n      <Dialog open={isAddUserDialogOpen} onOpenChange={setIsAddUserDialogOpen}>\r\n        <DialogContent className=\"sm:max-w-[500px]\">\r\n          <DialogHeader>\r\n            <DialogTitle>Adicionar Novo Usu├írio</DialogTitle>\r\n            <DialogDescription>\r\n              Preencha os dados do novo usu├írio do sistema.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"email\" className=\"text-right\">\r\n                Email\r\n              </Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                value={newUser.email}\r\n                onChange={(e) =>\r\n                  setNewUser({ ...newUser, email: e.target.value })\r\n                }\r\n                className=\"col-span-3\"\r\n                placeholder=\"usuario@empresa.com\"\r\n              />\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"password\" className=\"text-right\">\r\n                Senha\r\n              </Label>\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                value={newUser.password}\r\n                onChange={(e) =>\r\n                  setNewUser({ ...newUser, password: e.target.value })\r\n                }\r\n                className=\"col-span-3\"\r\n                placeholder=\"********\"\r\n              />\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"full_name\" className=\"text-right\">\r\n                Nome\r\n              </Label>\r\n              <Input\r\n                id=\"full_name\"\r\n                value={newUser.full_name}\r\n                onChange={(e) =>\r\n                  setNewUser({ ...newUser, full_name: e.target.value })\r\n                }\r\n                className=\"col-span-3\"\r\n                placeholder=\"Nome completo\"\r\n              />\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"role\" className=\"text-right\">\r\n                Papel\r\n              </Label>\r\n              <Select\r\n                value={newUser.role}\r\n                onValueChange={(value: \"admin\" | \"user\") =>\r\n                  setNewUser({ ...newUser, role: value })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"col-span-3\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"user\">Usu├írio</SelectItem>\r\n                  <SelectItem value=\"admin\">Administrador</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-start gap-4\">\r\n              <Label className=\"text-right mt-2\">IAs</Label>\r\n              <div className=\"col-span-3 space-y-2 max-h-32 overflow-y-auto\">\r\n                {aiProducts.map((product) => (\r\n                  <div key={product.id} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id={product.id}\r\n                      checked={newUser.ai_access.includes(product.id)}\r\n                      onCheckedChange={(checked) => {\r\n                        const updatedAccess = checked\r\n                          ? [...newUser.ai_access, product.id]\r\n                          : newUser.ai_access.filter((id) => id !== product.id);\r\n                        setNewUser({ ...newUser, ai_access: updatedAccess });\r\n                      }}\r\n                    />\r\n                    <Label htmlFor={product.id} className=\"text-sm\">\r\n                      {product.name}\r\n                    </Label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <DialogFooter>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setIsAddUserDialogOpen(false)}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={handleAddUser}>Adicionar</Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit User Dialog */}\r\n      <Dialog\r\n        open={isEditUserDialogOpen}\r\n        onOpenChange={setIsEditUserDialogOpen}\r\n      >\r\n        <DialogContent className=\"sm:max-w-[500px]\">\r\n          <DialogHeader>\r\n            <DialogTitle>Editar Usu├írio</DialogTitle>\r\n            <DialogDescription>\r\n              Modifique os dados do usu├írio selecionado.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"edit_full_name\" className=\"text-right\">\r\n                Nome\r\n              </Label>\r\n              <Input\r\n                id=\"edit_full_name\"\r\n                value={newUser.full_name}\r\n                onChange={(e) =>\r\n                  setNewUser({ ...newUser, full_name: e.target.value })\r\n                }\r\n                className=\"col-span-3\"\r\n              />\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-center gap-4\">\r\n              <Label htmlFor=\"edit_role\" className=\"text-right\">\r\n                Papel\r\n              </Label>\r\n              <Select\r\n                value={newUser.role}\r\n                onValueChange={(value: \"admin\" | \"user\") =>\r\n                  setNewUser({ ...newUser, role: value })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"col-span-3\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"user\">Usu├írio</SelectItem>\r\n                  <SelectItem value=\"admin\">Administrador</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"grid grid-cols-4 items-start gap-4\">\r\n              <Label className=\"text-right mt-2\">IAs</Label>\r\n              <div className=\"col-span-3 space-y-2 max-h-32 overflow-y-auto\">\r\n                {aiProducts.map((product) => (\r\n                  <div key={product.id} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id={`edit_${product.id}`}\r\n                      checked={newUser.ai_access.includes(product.id)}\r\n                      onCheckedChange={(checked) => {\r\n                        const updatedAccess = checked\r\n                          ? [...newUser.ai_access, product.id]\r\n                          : newUser.ai_access.filter((id) => id !== product.id);\r\n                        setNewUser({ ...newUser, ai_access: updatedAccess });\r\n                      }}\r\n                    />\r\n                    <Label htmlFor={`edit_${product.id}`} className=\"text-sm\">\r\n                      {product.name}\r\n                    </Label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <DialogFooter>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setIsEditUserDialogOpen(false)}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={handleEditUser}>Salvar</Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Delete User Dialog */}\r\n      <Dialog\r\n        open={isDeleteUserDialogOpen}\r\n        onOpenChange={setIsDeleteUserDialogOpen}\r\n      >\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Confirmar Exclus├úo</DialogTitle>\r\n            <DialogDescription>\r\n              Tem certeza que deseja excluir o usu├írio{\" \"}\r\n              {selectedUser?.full_name || selectedUser?.email}? Esta a├º├úo n├úo\r\n              pode ser desfeita.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <DialogFooter>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setIsDeleteUserDialogOpen(false)}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button variant=\"destructive\" onClick={handleDeleteUser}>\r\n              Excluir\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\admin\\UserManagementTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[584,587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[584,587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Users, UserPlus, Search, RefreshCw, Edit, Trash2 } from \"lucide-react\";\r\nimport { User } from \"@/types/user\";\r\n\r\ninterface UserManagementTabProps {\r\n  users: User[];\r\n  aiProducts: any[];\r\n  loading: boolean;\r\n  onAddUser: () => void;\r\n  onEditUser: (user: User) => void;\r\n  onDeleteUser: (user: User) => void;\r\n  onRefresh: () => void;\r\n}\r\n\r\nexport const UserManagementTab: React.FC<UserManagementTabProps> = ({\r\n  users,\r\n  aiProducts,\r\n  loading,\r\n  onAddUser,\r\n  onEditUser,\r\n  onDeleteUser,\r\n  onRefresh,\r\n}) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const filteredUsers = users.filter(\r\n    (user) =>\r\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      (user.full_name &&\r\n        user.full_name.toLowerCase().includes(searchTerm.toLowerCase())),\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Users className=\"h-5 w-5 text-primary\" />\r\n            Gerenciamento de Usu├írios\r\n          </CardTitle>\r\n          <Button\r\n            onClick={onAddUser}\r\n            className=\"bg-chart-2 hover:bg-chart-2/90 text-white w-full sm:w-auto\"\r\n          >\r\n            <UserPlus className=\"h-4 w-4 mr-2\" />\r\n            Novo Usu├írio\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"mb-4 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n          <div className=\"relative w-full sm:max-w-sm\">\r\n            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder=\"Buscar usu├írios...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-8\"\r\n            />\r\n          </div>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={onRefresh}\r\n            disabled={loading}\r\n            className=\"flex items-center gap-2 w-full sm:w-auto\"\r\n          >\r\n            <RefreshCw className={`h-4 w-4 ${loading ? \"animate-spin\" : \"\"}`} />\r\n            {loading ? \"Carregando...\" : \"Atualizar\"}\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"rounded-md border overflow-x-auto\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Nome</TableHead>\r\n                <TableHead>Email</TableHead>\r\n                <TableHead>Papel</TableHead>\r\n                <TableHead className=\"hidden md:table-cell\">\r\n                  IAs Acess├¡veis\r\n                </TableHead>\r\n                <TableHead className=\"hidden lg:table-cell\">\r\n                  Criado em\r\n                </TableHead>\r\n                <TableHead className=\"text-right\">A├º├Áes</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {loading ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center py-8\">\r\n                    <div className=\"flex justify-center items-center\">\r\n                      <RefreshCw className=\"h-6 w-6 animate-spin text-muted-foreground\" />\r\n                      <span className=\"ml-2 text-muted-foreground\">\r\n                        Carregando usu├írios...\r\n                      </span>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : filteredUsers.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center py-8\">\r\n                    <span className=\"text-muted-foreground\">\r\n                      Nenhum usu├írio encontrado\r\n                    </span>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                filteredUsers.map((user) => (\r\n                  <TableRow key={user.id}>\r\n                    <TableCell className=\"font-medium\">\r\n                      {user.full_name || \"Sem nome\"}\r\n                    </TableCell>\r\n                    <TableCell>{user.email}</TableCell>\r\n                    <TableCell>\r\n                      <Badge\r\n                        variant={\r\n                          user.role === \"admin\" ? \"default\" : \"secondary\"\r\n                        }\r\n                      >\r\n                        {user.role === \"admin\" ? \"Admin\" : \"Usu├írio\"}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell className=\"hidden md:table-cell\">\r\n                      <div className=\"flex flex-wrap gap-1\">\r\n                        {user.ai_access.length > 0 ? (\r\n                          user.ai_access.length > 3 ? (\r\n                            <>\r\n                              {user.ai_access.slice(0, 2).map((aiId) => {\r\n                                const ai = aiProducts.find(\r\n                                  (p) => p.id === aiId,\r\n                                );\r\n                                return (\r\n                                  <Badge\r\n                                    key={aiId}\r\n                                    variant=\"outline\"\r\n                                    className=\"text-xs\"\r\n                                  >\r\n                                    {ai ? ai.name : aiId}\r\n                                  </Badge>\r\n                                );\r\n                              })}\r\n                              <Badge variant=\"outline\" className=\"text-xs\">\r\n                                +{user.ai_access.length - 2} mais\r\n                              </Badge>\r\n                            </>\r\n                          ) : (\r\n                            user.ai_access.map((aiId) => {\r\n                              const ai = aiProducts.find((p) => p.id === aiId);\r\n                              return (\r\n                                <Badge\r\n                                  key={aiId}\r\n                                  variant=\"outline\"\r\n                                  className=\"text-xs\"\r\n                                >\r\n                                  {ai ? ai.name : aiId}\r\n                                </Badge>\r\n                              );\r\n                            })\r\n                          )\r\n                        ) : (\r\n                          <span className=\"text-muted-foreground text-sm\">\r\n                            Nenhuma\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell className=\"hidden lg:table-cell\">\r\n                      {new Date(user.created_at).toLocaleDateString(\"pt-BR\")}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex justify-end gap-2\">\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => onEditUser(user)}\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          className=\"text-destructive hover:text-destructive\"\r\n                          onClick={() => onDeleteUser(user)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AgendaBookingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AgendaTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\AvailabilityCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\agenda\\TimeSlotSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarDay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\CalendarLegend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\calendar\\EventSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatAreaOptimized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatConversationHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatHeader.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'advancedSearch'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [searchTerm, advancedSearch.setSearchTerm, advancedSearch]","fix":{"range":[1587,1629],"text":"[searchTerm, advancedSearch.setSearchTerm, advancedSearch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { ShipWheel, LogOut, ArrowLeft, Filter, Search } from \"lucide-react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useThemeSettings } from \"@/context/ThemeSettingsContext\";\r\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\r\nimport { useAdvancedSearch, SearchResult } from \"@/hooks/useAdvancedSearch\";\r\nimport SearchModeSelector from \"./SearchModeSelector\";\r\nimport SearchResults from \"./SearchResults\";\r\nimport { useDebouncedCallback } from \"@/hooks/useDebouncedCallback\";\r\n\r\ninterface ChatHeaderProps {\r\n  signOut: () => void;\r\n  searchTerm: string;\r\n  onSearchChange: (value: string) => void;\r\n  onOpenFilters: () => void;\r\n  hasActiveFilters: boolean;\r\n  onSearchResultClick?: (result: SearchResult) => void;\r\n}\r\n\r\nconst ChatHeader = ({ \r\n  signOut, \r\n  searchTerm, \r\n  onSearchChange, \r\n  onOpenFilters, \r\n  hasActiveFilters,\r\n  onSearchResultClick\r\n}: ChatHeaderProps) => {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { settings } = useThemeSettings();\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n  \r\n  const advancedSearch = useAdvancedSearch();\r\n\r\n  const handleBackToDashboard = () => {\r\n    navigate(\"/dashboard\");\r\n  };\r\n\r\n  // Sincronizar com o search term do header\r\n  useEffect(() => {\r\n    advancedSearch.setSearchTerm(searchTerm);\r\n  }, [searchTerm, advancedSearch.setSearchTerm]);\r\n\r\n  // Realizar busca com debounce\r\n  const debouncedSearch = useDebouncedCallback(() => {\r\n    if (searchTerm.trim()) {\r\n      advancedSearch.performSearch();\r\n      setShowSearchResults(true);\r\n    } else {\r\n      setShowSearchResults(false);\r\n    }\r\n  }, 300);\r\n\r\n  useEffect(() => {\r\n    debouncedSearch();\r\n  }, [searchTerm, advancedSearch.searchMode, debouncedSearch]);\r\n\r\n  const handleSearchChange = (value: string) => {\r\n    onSearchChange(value);\r\n    if (!value.trim()) {\r\n      setShowSearchResults(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchResultClick = (result: SearchResult) => {\r\n    setShowSearchResults(false);\r\n    if (onSearchResultClick) {\r\n      onSearchResultClick(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"text-white shadow-md transition-colors duration-300 rounded-b-xl\"\r\n      style={{ backgroundColor: settings.primaryColor }}\r\n    >\r\n      <div className=\"flex flex-row items-center justify-between min-h-[64px] w-full px-6 py-0\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={handleBackToDashboard}\r\n            className=\"text-white hover:bg-white/20 focus-visible:ring-white\"\r\n          >\r\n            <ArrowLeft className=\"h-5 w-5\" />\r\n          </Button>\r\n          {settings.logo ? (\r\n            <img\r\n              src={settings.logo}\r\n              alt=\"Logo\"\r\n              className=\"h-8 w-8 object-contain\"\r\n            />\r\n          ) : (\r\n            <ShipWheel\r\n              className=\"h-8 w-8\"\r\n              style={{ color: settings.secondaryColor }}\r\n            />\r\n          )}\r\n          <h1 className=\"text-2xl font-bold\">{settings.brandName}</h1>\r\n          <span className=\"text-lg ml-2\">Conversas</span>\r\n        </div>\r\n        \r\n        {/* Search and Filter Controls */}\r\n        <div className=\"flex items-center gap-3 flex-1 max-w-md mx-6\">\r\n          <SearchModeSelector \r\n            searchMode={advancedSearch.searchMode}\r\n            onSearchModeChange={advancedSearch.setSearchMode}\r\n          />\r\n          <div className=\"relative flex-1\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white/60\" />\r\n            <Input\r\n              placeholder={`Buscar ${\r\n                advancedSearch.searchMode === \"conversations\" ? \"conversas\" :\r\n                advancedSearch.searchMode === \"notes\" ? \"anota├º├Áes\" : \"conversas e anota├º├Áes\"\r\n              }...`}\r\n              value={searchTerm}\r\n              onChange={(e) => handleSearchChange(e.target.value)}\r\n              className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-white/40\"\r\n            />\r\n            {showSearchResults && (\r\n              <SearchResults\r\n                results={advancedSearch.searchResults}\r\n                isSearching={advancedSearch.isSearching}\r\n                onResultClick={handleSearchResultClick}\r\n              />\r\n            )}\r\n          </div>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={onOpenFilters}\r\n            className={`border-white/20 text-white bg-transparent hover:bg-white/20 ${\r\n              hasActiveFilters ? 'bg-white/20 border-white' : ''\r\n            }`}\r\n          >\r\n            <Filter className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-3\">\r\n          <Badge\r\n            variant=\"outline\"\r\n            className=\"bg-white/10 text-white border-0 px-3 py-1\"\r\n          >\r\n            {user?.user_metadata?.name || user?.email}\r\n          </Badge>\r\n          <ThemeToggle />\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={signOut}\r\n            className=\"border-white text-white bg-transparent hover:bg-white/20\"\r\n            style={{ height: 40, borderRadius: 8, borderWidth: 1.4 }}\r\n          >\r\n            <LogOut className=\"mr-2 h-4 w-4\" />\r\n            Sair\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default ChatHeader;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ChatList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ClientHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ClientInfoPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Conversation } from \"@/types/chat\";\r\nimport { useDynamicFields } from \"@/hooks/useDynamicFields\";\r\nimport { useContactsQuery } from \"@/hooks/useContactsQuery\";\r\nimport { useClientDataFetch } from \"@/hooks/useClientDataFetch\";\r\nimport TagsField from \"./TagsField\";\r\nimport NotesField from \"./NotesField\";\r\nimport ClientInfo from \"@/components/clients/ClientInfo\";\r\nimport ClientHeader from \"./ClientHeader\";\r\nimport EmptyClientState from \"./EmptyClientState\";\r\nimport LoadingClientState from \"./LoadingClientState\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\ninterface ClientInfoPanelProps {\r\n  selectedChat: string | null;\r\n  selectedConversation: Conversation | undefined;\r\n}\r\n\r\nconst ClientInfoPanel = ({\r\n  selectedChat,\r\n  selectedConversation,\r\n}: ClientInfoPanelProps) => {\r\n  const { data: contacts = [] } = useContactsQuery();\r\n  \r\n  // Custom hook for client data fetching\r\n  const { clientData, loading } = useClientDataFetch(selectedConversation, contacts);\r\n\r\n  // Use the enhanced dynamic fields hook with validation\r\n  const {\r\n    dynamicFields,\r\n    loading: dynamicFieldsLoading,\r\n    updateField,\r\n    validationErrors,\r\n  } = useDynamicFields(selectedConversation?.sessionId || null);\r\n\r\n\r\n\r\n  const handleFieldUpdate = (fieldId: string, newValue: any) => {\r\n    updateField(fieldId, newValue);\r\n    console.log(`Field ${fieldId} updated with value:`, newValue);\r\n\r\n    // Show validation error if exists\r\n    if (validationErrors[fieldId]) {\r\n      console.warn(\r\n        `Validation error for field ${fieldId}:`,\r\n        validationErrors[fieldId],\r\n      );\r\n    }\r\n  };\r\n\r\n  if (!selectedChat) {\r\n    return (\r\n      <EmptyClientState\r\n        message=\"Informa├º├Áes do Cliente\"\r\n        subtitle=\"Selecione uma conversa para ver as informa├º├Áes do cliente\"\r\n      />\r\n    );\r\n  }\r\n\r\n  if (loading || dynamicFieldsLoading) {\r\n    return <LoadingClientState />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      <ClientHeader clientData={clientData} selectedConversation={selectedConversation} />\r\n\r\n      <ScrollArea className=\"flex-1\">\r\n        <div className=\"p-4 space-y-6\">\r\n          {/* Tags Field */}\r\n          <TagsField selectedChat={selectedChat} />\r\n\r\n          {/* Painel de Informa├º├Áes */}\r\n          <ClientInfo\r\n            clientData={clientData}\r\n            dynamicFields={{\r\n              basic: dynamicFields.basic,\r\n              commercial: dynamicFields.commercial,\r\n              personalized: dynamicFields.personalized,\r\n              documents: dynamicFields.documents,\r\n            }}\r\n            onFieldUpdate={handleFieldUpdate}\r\n            context=\"chat\"\r\n          />\r\n\r\n          {/* Notes Field */}\r\n          <div className=\"mt-2\">\r\n            <NotesField selectedChat={selectedChat} />\r\n          </div>\r\n\r\n          {/* Display validation errors if any */}\r\n          <ValidationErrors validationErrors={validationErrors} />\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientInfoPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationFilterDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ConversationQuickFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\EmptyClientState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\LoadingClientState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageItemOptimized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\NoSelectedChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\NotesField.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNotes'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadNotes, selectedChat]","fix":{"range":[967,981],"text":"[loadNotes, selectedChat]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Plus, X } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\n\r\ninterface Note {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n}\r\n\r\ninterface NotesFieldProps {\r\n  selectedChat: string | null;\r\n}\r\n\r\nconst NotesField = ({ selectedChat }: NotesFieldProps) => {\r\n  const [notes, setNotes] = useState<Note[]>([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  // Carregar notas do banco de dados\r\n  useEffect(() => {\r\n    if (selectedChat) {\r\n      loadNotes();\r\n    }\r\n  }, [selectedChat]);\r\n\r\n  const loadNotes = async () => {\r\n    if (!selectedChat) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // Primeiro buscar o session_id pela conversa\r\n      const { data: conversationData, error: conversationError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"session_id\")\r\n        .eq(\"id\", selectedChat)\r\n        .single();\r\n\r\n      if (conversationError && conversationError.code !== \"PGRST116\") {\r\n        throw conversationError;\r\n      }\r\n\r\n      if (conversationData?.session_id) {\r\n        // Buscar as notas na tabela contacts\r\n        const { data: contactData, error: contactError } = await supabase\r\n          .from(\"contacts\")\r\n          .select(\"notes\")\r\n          .eq(\"session_id\", conversationData.session_id)\r\n          .single();\r\n\r\n        if (contactError && contactError.code !== \"PGRST116\") {\r\n          throw contactError;\r\n        }\r\n\r\n        if (contactData?.notes) {\r\n          try {\r\n            // Se as notas j├í est├úo em JSON, parsear\r\n            const parsedNotes = typeof contactData.notes === \"string\" \r\n              ? JSON.parse(contactData.notes) \r\n              : contactData.notes;\r\n            \r\n            setNotes(Array.isArray(parsedNotes) ? parsedNotes : []);\r\n          } catch (parseError) {\r\n            console.error(\"Error parsing notes:\", parseError);\r\n            // Se n├úo conseguir parsear, tratar como string simples\r\n            setNotes([{\r\n              id: Date.now().toString(),\r\n              content: contactData.notes,\r\n              timestamp: new Date().toLocaleString(\"pt-BR\"),\r\n            }]);\r\n          }\r\n        } else {\r\n          setNotes([]);\r\n        }\r\n      } else {\r\n        setNotes([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading notes:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar anota├º├Áes\",\r\n        description: \"N├úo foi poss├¡vel carregar as anota├º├Áes.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveNotes = async (updatedNotes: Note[]) => {\r\n    if (!selectedChat) return;\r\n    \r\n    setSaving(true);\r\n    try {\r\n      // Primeiro buscar o session_id pela conversa\r\n      const { data: conversationData, error: conversationError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"session_id\")\r\n        .eq(\"id\", selectedChat)\r\n        .single();\r\n\r\n      if (conversationError) {\r\n        throw conversationError;\r\n      }\r\n\r\n      if (conversationData?.session_id) {\r\n        // Salvar na tabela contacts\r\n        const { error } = await supabase\r\n          .from(\"contacts\")\r\n          .update({ notes: JSON.stringify(updatedNotes) })\r\n          .eq(\"session_id\", conversationData.session_id);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving notes:\", error);\r\n      toast({\r\n        title: \"Erro ao salvar anota├º├Áes\",\r\n        description: \"N├úo foi poss├¡vel salvar as anota├º├Áes.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const addNote = async () => {\r\n    if (!newNote.trim()) return;\r\n\r\n    const note: Note = {\r\n      id: Date.now().toString(),\r\n      content: newNote.trim(),\r\n      timestamp: new Date().toLocaleString(\"pt-BR\"),\r\n    };\r\n\r\n    const updatedNotes = [note, ...notes];\r\n    setNotes(updatedNotes);\r\n    setNewNote(\"\");\r\n    \r\n    await saveNotes(updatedNotes);\r\n  };\r\n\r\n  const removeNote = async (noteId: string) => {\r\n    const updatedNotes = notes.filter((note) => note.id !== noteId);\r\n    setNotes(updatedNotes);\r\n    \r\n    await saveNotes(updatedNotes);\r\n  };\r\n\r\n  if (!selectedChat) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 mb-3\">\r\n        Anota├º├Áes\r\n      </h3>\r\n\r\n      {/* Add new note */}\r\n      <div className=\"mb-4\">\r\n        <Textarea\r\n          placeholder=\"Adicionar nova anota├º├úo...\"\r\n          value={newNote}\r\n          onChange={(e) => setNewNote(e.target.value)}\r\n          className=\"min-h-[80px] mb-2\"\r\n        />\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={addNote}\r\n          className=\"w-full\"\r\n          disabled={saving || !newNote.trim()}\r\n        >\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          {saving ? \"Salvando...\" : \"Adicionar Anota├º├úo\"}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Notes list */}\r\n      <ScrollArea className=\"h-64\">\r\n        <div className=\"space-y-3\">\r\n          {notes.map((note) => (\r\n            <div\r\n              key={note.id}\r\n              className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-gray-50 dark:bg-gray-800\"\r\n            >\r\n              <div className=\"flex justify-between items-start mb-2\">\r\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                  {note.timestamp}\r\n                </span>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"xs\"\r\n                  onClick={() => removeNote(note.id)}\r\n                  className=\"h-6 w-6 p-0 text-gray-400 hover:text-red-500\"\r\n                >\r\n                  <X className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n              <p className=\"text-sm whitespace-pre-wrap break-words\">\r\n                {note.content}\r\n              </p>\r\n            </div>\r\n          ))}\r\n\r\n          {notes.length === 0 && (\r\n            <p className=\"text-center text-sm text-gray-500 dark:text-gray-400 py-8\">\r\n              Nenhuma anota├º├úo ainda\r\n            </p>\r\n          )}\r\n        </div>\r\n      </ScrollArea>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NotesField;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\SearchModeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\SearchResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\TagsField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\chat\\ValidationErrors.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\AddClientDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2277,2280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2277,2280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCustomFields'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCustomFields]","fix":{"range":[2513,2521],"text":"[isOpen, loadCustomFields]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogTrigger,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n} from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { UserPlus } from \"lucide-react\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { useCustomFields } from \"@/hooks/useCustomFields\";\r\nimport { useAddClientFormLogic } from \"@/hooks/useAddClientFormLogic\";\r\nimport { DynamicCategory } from \"./DynamicCategoryManager\";\r\nimport TagsManager from \"./TagsManager\";\r\nimport ConsultationStageSelector from \"./ConsultationStageSelector\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport ValidationErrorAlert from \"./ValidationErrorAlert\";\r\nimport BasicInfoFields from \"./BasicInfoFields\";\r\nimport CompanyInfoFields from \"./CompanyInfoFields\";\r\nimport DialogTabsContent from \"./DialogTabsContent\";\r\n\r\ninterface AddClientDialogProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  newContact: Partial<Contact>;\r\n  setNewContact: (contact: Partial<Contact>) => void;\r\n  handleAddContact: () => Promise<string | undefined>;\r\n}\r\n\r\nconst AddClientDialog = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  newContact,\r\n  setNewContact,\r\n  handleAddContact,\r\n}: AddClientDialogProps) => {\r\n  const { customFields, fetchCustomFields, saveClientCustomValues } = useCustomFields();\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  // Use custom hook for form logic\r\n  const {\r\n    validationErrors,\r\n    activeTab,\r\n    setActiveTab,\r\n    customValues,\r\n    handleInputChange: baseHandleInputChange,\r\n    validateForm,\r\n    resetForm,\r\n    handleCustomFieldChange,\r\n  } = useAddClientFormLogic();\r\n\r\n  // State for dynamic categories per tab\r\n  const [basicCategories, setBasicCategories] = useState<DynamicCategory[]>([]);\r\n  const [commercialCategories, setCommercialCategories] = useState<DynamicCategory[]>([]);\r\n  const [documentsCategories, setDocumentsCategories] = useState<DynamicCategory[]>([]);\r\n\r\n  // Wrapper for input change to pass required parameters\r\n  const handleInputChange = (field: keyof Contact, value: any) => {\r\n    baseHandleInputChange(field, value, newContact, setNewContact);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      loadCustomFields();\r\n      console.log(\"AddClientDialog opened, loading custom fields\");\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const loadCustomFields = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await fetchCustomFields();\r\n      console.log(\"Custom fields loaded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error loading custom fields:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!validateForm(newContact)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get newly created contact ID\r\n      const newContactId = await handleAddContact();\r\n\r\n      // Save custom field values if we have them and a contact ID\r\n      if (newContactId && Object.keys(customValues).length > 0) {\r\n        try {\r\n          const customValuesArray = Object.entries(customValues).map(\r\n            ([fieldId, value]) => ({ fieldId, value })\r\n          );\r\n          await saveClientCustomValues(newContactId, customValuesArray);\r\n        } catch (customFieldError) {\r\n          console.error(\"Error saving custom fields:\", customFieldError);\r\n        }\r\n      }\r\n\r\n      // Reset form and categories\r\n      resetForm();\r\n      setBasicCategories([]);\r\n      setCommercialCategories([]);\r\n      setDocumentsCategories([]);\r\n\r\n      toast({\r\n        title: \"Cliente adicionado\",\r\n        description: \"Cliente foi adicionado com sucesso ao sistema.\",\r\n      });\r\n\r\n      onOpenChange(false);\r\n    } catch (error) {\r\n      console.error(\"Error saving client:\", error);\r\n      toast({\r\n        title: \"Erro ao salvar\",\r\n        description: \"N├úo foi poss├¡vel salvar o cliente. Tente novamente.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  console.log(\r\n    \"AddClientDialog render - isOpen:\",\r\n    isOpen,\r\n    \"activeTab:\",\r\n    activeTab,\r\n  );\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\r\n      <DialogTrigger asChild>\r\n        <Button className=\"h-9 bg-green-500 hover:bg-green-600 text-white\">\r\n          <UserPlus className=\"mr-2 h-4 w-4\" />\r\n          Novo Cliente\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"text-lg flex items-center gap-2\">\r\n            <UserPlus className=\"h-5 w-5 text-green-500\" />\r\n            Adicionar Novo Cliente N├íutico\r\n          </DialogTitle>\r\n          <DialogDescription className=\"text-gray-600 dark:text-gray-300\">\r\n            Preencha as informa├º├Áes para adicionar um novo cliente n├íutico ao\r\n            seu CRM.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <ValidationErrorAlert errors={validationErrors} />\r\n\r\n        {/* Tags Section */}\r\n        <div className=\"mb-4\">\r\n          <Label className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">\r\n            ADICIONAR TAGS\r\n          </Label>\r\n          <TagsManager\r\n            tags={newContact.tags || []}\r\n            onChange={(tags) => handleInputChange(\"tags\", tags)}\r\n          />\r\n        </div>\r\n\r\n        {/* Consultation Stage Section */}\r\n        <div className=\"mb-6\">\r\n          <ConsultationStageSelector\r\n            value={newContact.consultationStage || \"Nova consulta\"}\r\n            onChange={(stage) => handleInputChange(\"consultationStage\", stage)}\r\n          />\r\n        </div>\r\n\r\n        <Tabs defaultValue=\"principal\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger\r\n              value=\"principal\"\r\n              onClick={() => setActiveTab(\"basico\")}\r\n            >\r\n              Principal\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"utm\">UTM</TabsTrigger>\r\n            <TabsTrigger value=\"midia\">M├¡dia</TabsTrigger>\r\n            <TabsTrigger value=\"produtos\">Produtos</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"principal\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-6\">\r\n              <BasicInfoFields \r\n                newContact={newContact}\r\n                validationErrors={validationErrors}\r\n                onInputChange={handleInputChange}\r\n              />\r\n              <CompanyInfoFields \r\n                newContact={newContact}\r\n                validationErrors={validationErrors}\r\n                onInputChange={handleInputChange}\r\n              />\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <DialogTabsContent newContact={newContact} />\r\n        </Tabs>\r\n\r\n        <DialogFooter className=\"mt-6\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mr-auto\">\r\n            * Campos obrigat├│rios\r\n          </div>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            onClick={() => onOpenChange(false)}\r\n          >\r\n            Cancelar\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={handleSave}\r\n            className=\"bg-green-500 hover:bg-green-600 text-white\"\r\n          >\r\n            Adicionar Cliente\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddClientDialog;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\BasicInfoFields.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[385,388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[385,388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface BasicInfoFieldsProps {\r\n  newContact: Partial<Contact>;\r\n  validationErrors: { [key: string]: string };\r\n  onInputChange: (field: keyof Contact, value: any) => void;\r\n}\r\n\r\nconst BasicInfoFields = React.memo(({ newContact, validationErrors, onInputChange }: BasicInfoFieldsProps) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <Label htmlFor=\"name\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Nome Completo *\r\n        </Label>\r\n        <Input\r\n          id=\"name\"\r\n          value={newContact.name || \"\"}\r\n          onChange={(e) => onInputChange(\"name\", e.target.value)}\r\n          placeholder=\"Digite o nome completo\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.name ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.name && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.name}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"email\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Email\r\n        </Label>\r\n        <Input\r\n          id=\"email\"\r\n          type=\"email\"\r\n          value={newContact.email || \"\"}\r\n          onChange={(e) => onInputChange(\"email\", e.target.value)}\r\n          placeholder=\"email@exemplo.com\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.email ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.email && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.email}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"phone\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Telefone *\r\n        </Label>\r\n        <Input\r\n          id=\"phone\"\r\n          value={newContact.phone || \"\"}\r\n          onChange={(e) => onInputChange(\"phone\", e.target.value)}\r\n          placeholder=\"(00) 00000-0000\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.phone ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.phone && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.phone}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"address\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Endere├ºo\r\n        </Label>\r\n        <Input\r\n          id=\"address\"\r\n          value={newContact.address || \"\"}\r\n          onChange={(e) => onInputChange(\"address\", e.target.value)}\r\n          placeholder=\"Rua, n├║mero, bairro, cidade, estado\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"responsible-user\">Usu├írio respons├ível</Label>\r\n        <Input\r\n          id=\"responsible-user\"\r\n          value={newContact.responsibleUser || \"\"}\r\n          onChange={(e) => onInputChange(\"responsibleUser\", e.target.value)}\r\n          placeholder=\"Gabriel Calebe\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"notes\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Observa├º├Áes\r\n        </Label>\r\n        <Textarea\r\n          id=\"notes\"\r\n          value={newContact.notes || \"\"}\r\n          onChange={(e) => onInputChange(\"notes\", e.target.value)}\r\n          placeholder=\"Observa├º├Áes sobre o cliente\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 min-h-[80px]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nBasicInfoFields.displayName = 'BasicInfoFields';\r\n\r\nexport default BasicInfoFields;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[308,311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[308,311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[362,365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[362,365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport CustomFieldsTab from \"./CustomFieldsTab\";\r\nimport ClientFilesTab from \"./ClientFilesTab\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientActionsProps {\r\n  clientData: Contact | null;\r\n  customFields: any[];\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  readOnly: boolean;\r\n  section: \"custom\" | \"docs\";\r\n}\r\n\r\nconst ClientActions: React.FC<ClientActionsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  onFieldUpdate,\r\n  readOnly,\r\n  section,\r\n}) => {\r\n  if (section === \"custom\") {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <CustomFieldsTab\r\n          clientId={clientData?.id}\r\n          onFieldUpdate={onFieldUpdate}\r\n          readOnly={readOnly}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <ClientFilesTab\r\n        clientId={clientData?.id}\r\n        onFileUpdate={(files) => {\r\n          console.log('Arquivos atualizados:', files);\r\n        }}\r\n        readOnly={readOnly}\r\n      />\r\n      {customFields\r\n        .filter((field) => field.visibility_settings?.visible_in_tabs?.docs)\r\n        .map((field) => (\r\n          <div key={field.id}>\r\n            <CustomFieldRenderer\r\n              field={field}\r\n              value={clientData?.customValues?.[field.id]}\r\n              onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n            />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientActions;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[988,991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[988,991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Edit2,\n  MessageSquare,\n  Phone,\n  Mail,\n  ShipWheel,\n  Tag,\n  AlertCircle,\n  DollarSign,\n  Target,\n} from \"lucide-react\";\nimport { Contact } from \"@/types/client\";\nimport { cn } from \"@/lib/utils\";\nimport { useClientNavigation } from \"@/utils/navigationUtils\";\n\ninterface ClientCardProps {\n  contact: Contact;\n  onClick: (contact: Contact) => void;\n  onEditClick: (contact: Contact) => void;\n  displayConfig?: {\n    showTags?: boolean;\n    showConsultationStage?: boolean;\n    showCommercialInfo?: boolean;\n    showCustomFields?: boolean;\n    isCompact?: boolean;\n  };\n  className?: string;\n  dragHandleProps?: any;\n  draggableProps?: any;\n  innerRef?: (element: HTMLElement | null) => void;\n  snapshot?: any;\n}\n\n// Mapeamento de cores para os est├ígios do kanban\nconst STAGE_HEADER_COLORS: { [key: string]: string } = {\n  Entraram: \"text-gray-500 dark:text-gray-400\",\n  Conversaram: \"text-blue-500 dark:text-blue-400\",\n  Agendaram: \"text-yellow-500 dark:text-yellow-400\",\n  Compareceram: \"text-green-500 dark:text-green-400\",\n  Negociaram: \"text-purple-500 dark:text-purple-400\",\n  Postergaram: \"text-orange-500 dark:text-orange-400\",\n  Converteram: \"text-emerald-500 dark:text-emerald-400\",\n};\nconst DEFAULT_STAGE_HEADER_COLOR = \"text-gray-500 dark:text-gray-400\";\n\n// Fun├º├úo para obter a cor da borda com base no est├ígio\nfunction getBorderLeftColor(stage: string) {\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"blue\")) return \"#3b82f6\";\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"yellow\")) return \"#f59e0b\";\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"green\")) return \"#22c55e\";\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"purple\")) return \"#8b5cf6\";\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"orange\")) return \"#f97316\";\n  if (STAGE_HEADER_COLORS[stage]?.includes(\"emerald\")) return \"#10b981\";\n  return \"#64748b\";\n}\n\nexport const ClientCard: React.FC<ClientCardProps> = ({\n  contact,\n  onClick,\n  onEditClick,\n  displayConfig = {\n    showTags: true,\n    showConsultationStage: true,\n    showCommercialInfo: false,\n    showCustomFields: false,\n    isCompact: false,\n  },\n  className,\n  dragHandleProps,\n  draggableProps,\n  innerRef,\n  snapshot,\n}) => {\n  const { navigateToClientChat } = useClientNavigation();\n  const { isCompact } = displayConfig;\n\n  const handleWhatsAppClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    const chatId = contact.sessionId || contact.id.toString();\n    navigateToClientChat(chatId);\n  };\n\n  const isCancelledProject =\n    contact.consultationStage === \"Projeto cancelado ÔÇô perdido\";\n\n  return (\n    <div\n      ref={innerRef}\n      {...draggableProps}\n      {...dragHandleProps}\n      className={cn(\"px-1\", className)}\n    >\n      <Card\n        className={cn(\n          `mb-2 cursor-pointer transition-all duration-200 hover:shadow-lg dark:hover:shadow-blue-500/20 relative border-l-4`,\n          snapshot?.isDragging ? \"shadow-xl rotate-1 scale-105\" : \"shadow-sm\",\n          \"bg-card\",\n          isCancelledProject && \"relative overflow-hidden\",\n        )}\n        style={{\n          borderLeftColor: getBorderLeftColor(contact.kanbanStage),\n        }}\n        onClick={() => onClick(contact)}\n      >\n        {/* Red overlay for cancelled projects */}\n        {isCancelledProject && (\n          <div className=\"absolute inset-0 bg-red-500/10 z-10 pointer-events-none\" />\n        )}\n\n        <CardContent\n          className={cn(\"p-3 text-sm relative z-30\", isCompact && \"py-1.5\")}\n        >\n          <div className=\"flex items-start justify-between mb-1\">\n            <span\n              className=\"font-semibold text-gray-800 dark:text-gray-100 pr-2 truncate\"\n              title={contact.name}\n            >\n              {contact.name}\n            </span>\n          </div>\n\n          {/* Tags */}\n          {displayConfig.showTags &&\n            contact.tags &&\n            contact.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mb-2\">\n                <Tag className=\"h-3 w-3 text-gray-500 mr-1\" />\n                {contact.tags.slice(0, isCompact ? 1 : 3).map((tag, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"outline\"\n                    className=\"text-xs py-0 px-1\"\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n                {contact.tags.length > (isCompact ? 1 : 3) && (\n                  <Badge variant=\"outline\" className=\"text-xs py-0 px-1\">\n                    +{contact.tags.length - (isCompact ? 1 : 3)}\n                  </Badge>\n                )}\n              </div>\n            )}\n\n          {/* Consultation Stage */}\n          {displayConfig.showConsultationStage && contact.consultationStage && (\n            <div className=\"flex items-center gap-1 mb-2 text-xs\">\n              <AlertCircle className=\"h-3 w-3 text-gray-500\" />\n              <span\n                className={cn(\n                  \"text-gray-600 dark:text-gray-300\",\n                  isCancelledProject &&\n                    \"text-red-600 dark:text-red-400 font-medium\",\n                )}\n              >\n                {contact.consultationStage}\n              </span>\n            </div>\n          )}\n\n          {/* Client Name/Company */}\n          {!isCompact && contact.clientName && (\n            <div className=\"flex items-center gap-1 mb-2 text-xs text-gray-500 dark:text-gray-400\">\n              <ShipWheel className=\"h-3 w-3 flex-shrink-0\" />\n              <span className=\"truncate\">{contact.clientName}</span>\n            </div>\n          )}\n\n          {/* Commercial Info */}\n          {displayConfig.showCommercialInfo && (\n            <div className=\"grid grid-cols-2 gap-x-2 gap-y-1 mb-2 text-xs\">\n              {contact.budget && (\n                <div className=\"flex items-center gap-1\">\n                  <DollarSign className=\"h-3 w-3 text-gray-500\" />\n                  <span className=\"text-gray-600 dark:text-gray-300\">\n                    R$ {contact.budget.toFixed(2)}\n                  </span>\n                </div>\n              )}\n              {contact.clientObjective && (\n                <div className=\"flex items-center gap-1\">\n                  <Target className=\"h-3 w-3 text-gray-500\" />\n                  <span className=\"text-gray-600 dark:text-gray-300 truncate\">\n                    {contact.clientObjective}\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Contact Info */}\n          <div className=\"flex flex-col gap-1 mb-2\">\n            {contact.phone && (\n              <div className=\"flex items-center gap-1 text-xs\">\n                <Phone className=\"h-3 w-3 text-gray-500\" />\n                <span className=\"text-gray-600 dark:text-gray-300\">\n                  {contact.phone}\n                </span>\n              </div>\n            )}\n            {!isCompact && contact.email && (\n              <div className=\"flex items-center gap-1 text-xs\">\n                <Mail className=\"h-3 w-3 text-gray-500\" />\n                <span className=\"text-gray-600 dark:text-gray-300 truncate\">\n                  {contact.email}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-between items-center mt-1\">\n            <div className=\"text-xs text-gray-400 dark:text-gray-500 truncate\">\n              {contact.lastContact}\n            </div>\n            <div className=\"flex items-center -mr-2\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEditClick(contact);\n                    }}\n                    className=\"h-7 w-7\"\n                  >\n                    <Edit2 className=\"h-3.5 w-3.5 text-gray-500\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Editar Cliente</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={handleWhatsAppClick}\n                    className=\"h-7 w-7\"\n                  >\n                    <svg\n                      className=\"h-4 w-4 text-green-500\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"currentColor\"\n                    >\n                      <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\" />\n                    </svg>\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Abrir no WhatsApp</p>\n                </TooltipContent>\n              </Tooltip>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ClientCard;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientDetailSheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport EditableField from \"./EditableField\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientDetailsProps {\r\n  clientData: Contact | null;\r\n  customFields: any[];\r\n  clientTypeOptions: string[];\r\n  clientSizeOptions: string[];\r\n  fieldVisibility: Record<string, boolean>;\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange: (fieldId: string, visible: boolean) => void;\r\n  readOnly: boolean;\r\n}\r\n\r\nconst ClientDetails: React.FC<ClientDetailsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  clientTypeOptions,\r\n  clientSizeOptions,\r\n  fieldVisibility,\r\n  onFieldUpdate,\r\n  onVisibilityChange,\r\n  readOnly,\r\n}) => (\r\n  <div className=\"space-y-4\">\r\n    <EditableField\r\n      label=\"Nome\"\r\n      value={clientData?.name}\r\n      fieldId=\"name\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.name !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Email\"\r\n      value={clientData?.email}\r\n      fieldId=\"email\"\r\n      type=\"email\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.email !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Telefone\"\r\n      value={clientData?.phone}\r\n      fieldId=\"phone\"\r\n      type=\"tel\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.phone !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Nome do Cliente\"\r\n      value={clientData?.clientName}\r\n      fieldId=\"clientName\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientName !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Tipo de Cliente\"\r\n      value={clientData?.clientType}\r\n      fieldId=\"clientType\"\r\n      type=\"select\"\r\n      options={clientTypeOptions}\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientType !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Tamanho do Cliente\"\r\n      value={clientData?.clientSize}\r\n      fieldId=\"clientSize\"\r\n      type=\"select\"\r\n      options={clientSizeOptions}\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.clientSize !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"CPF/CNPJ\"\r\n      value={clientData?.cpfCnpj}\r\n      fieldId=\"cpfCnpj\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.cpfCnpj !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    <EditableField\r\n      label=\"Endere├ºo\"\r\n      value={clientData?.address}\r\n      fieldId=\"address\"\r\n      type=\"textarea\"\r\n      readOnly={readOnly}\r\n      onChange={onFieldUpdate}\r\n      onVisibilityChange={onVisibilityChange}\r\n      isVisible={fieldVisibility.address !== false}\r\n      showVisibilityControl={!readOnly}\r\n    />\r\n    {customFields\r\n      .filter((field) => field.visibility_settings?.visible_in_tabs?.basic)\r\n      .map((field) => (\r\n        <CustomFieldRenderer\r\n          key={field.id}\r\n          field={field}\r\n          value={clientData?.customValues?.[field.id]}\r\n          onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n        />\r\n      ))}\r\n  </div>\r\n);\r\n\r\nexport default ClientDetails;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFilesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFilesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientFormValidation.tsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":40,"column":31,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":32,"suggestions":[{"messageId":"removeEscape","fix":{"range":[957,958],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[957,957],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":40,"column":33,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":34,"suggestions":[{"messageId":"removeEscape","fix":{"range":[959,960],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[959,959],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":40,"column":37,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":40,"endColumn":38,"suggestions":[{"messageId":"removeEscape","fix":{"range":[963,964],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[963,963],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":68,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":68,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Contact } from \"@/types/client\";\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: { [key: string]: string };\n}\n\n// Fun├º├Áes auxiliares de valida├º├úo para reduzir complexidade cognitiva\nconst validateRequiredFields = (\n  contact: Partial<Contact>,\n  errors: { [key: string]: string }\n): void => {\n  if (!contact.name?.trim()) {\n    errors.name = \"Nome ├® obrigat├│rio\";\n  }\n\n  if (!contact.phone?.trim()) {\n    errors.phone = \"Telefone ├® obrigat├│rio\";\n  }\n};\n\nconst validateEmail = (\n  email: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (email && email.trim()) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      errors.email = \"Email deve ter um formato v├ílido\";\n    }\n  }\n};\n\nconst validatePhone = (\n  phone: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (phone && phone.trim()) {\n    const phoneRegex = /^[\\d\\s\\(\\)\\-\\+]+$/;\n    if (!phoneRegex.test(phone)) {\n      errors.phone = \"Telefone deve conter apenas n├║meros e caracteres v├ílidos\";\n    }\n  }\n};\n\nconst validateCpfCnpj = (\n  cpfCnpj: string | undefined,\n  errors: { [key: string]: string }\n): void => {\n  if (cpfCnpj && cpfCnpj.trim()) {\n    const cleanCpfCnpj = cpfCnpj.replace(/\\D/g, \"\");\n    if (cleanCpfCnpj.length !== 11 && cleanCpfCnpj.length !== 14) {\n      errors.cpfCnpj = \"CPF deve ter 11 d├¡gitos ou CNPJ deve ter 14 d├¡gitos\";\n    }\n  }\n};\n\nconst validateBudget = (\n  budget: number | undefined | null,\n  errors: { [key: string]: string }\n): void => {\n  if (budget !== undefined && budget !== null && budget < 0) {\n    errors.budget = \"Or├ºamento n├úo pode ser negativo\";\n  }\n};\n\nexport const validateClientForm = (\n  contact: Partial<Contact>,\n): ValidationResult => {\n  const errors: { [key: string]: string } = {};\n\n  // Aplicar valida├º├Áes separadas\n  validateRequiredFields(contact, errors);\n  validateEmail(contact.email, errors);\n  validatePhone(contact.phone, errors);\n  validateCpfCnpj(contact.cpfCnpj, errors);\n  validateBudget(contact.budget, errors);\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n};\n\ninterface ClientFormValidationProps {\n  errors: { [key: string]: string };\n  fieldName: string;\n  children: React.ReactNode;\n}\n\nconst ClientFormValidation: React.FC<ClientFormValidationProps> = ({\n  errors,\n  fieldName,\n  children,\n}) => {\n  const hasError = errors[fieldName];\n\n  return (\n    <div className=\"space-y-1\">\n      {children}\n      {hasError && (\n        <p className=\"text-sm text-red-600 font-medium\">{hasError}</p>\n      )}\n    </div>\n  );\n};\n\nexport default ClientFormValidation;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from \"react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Contact } from \"@/types/client\";\r\nimport UnifiedClientInfo from \"./UnifiedClientInfo\";\r\nimport { DynamicCategory } from \"./DynamicCategoryManager\";\r\n\r\ninterface ClientInfoProps {\r\n  clientData: Contact | null;\r\n  dynamicFields?: {\r\n    basic: DynamicCategory[];\r\n    commercial: DynamicCategory[];\r\n    personalized: DynamicCategory[];\r\n    documents: DynamicCategory[];\r\n  };\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  context: \"chat\" | \"table\" | \"details\" | \"edit\";\r\n  compact?: boolean;\r\n}\r\n\r\n/**\r\n * Componente para exibir informa├º├Áes do cliente em diferentes contextos\r\n * Este componente serve como um wrapper para o UnifiedClientInfo, configurando-o\r\n * de acordo com o contexto em que est├í sendo usado.\r\n */\r\nconst ClientInfo: React.FC<ClientInfoProps> = ({\r\n  clientData,\r\n  dynamicFields = {\r\n    basic: [],\r\n    commercial: [],\r\n    personalized: [],\r\n    documents: [],\r\n  },\r\n  onFieldUpdate,\r\n  context,\r\n  compact = false,\r\n}) => {\r\n  // Configura├º├Áes espec├¡ficas para cada contexto\r\n  const contextConfig = {\r\n    chat: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: true,\r\n      compact: true,\r\n      className: \"h-[500px] max-h-[500px]\"\r\n    },\r\n    table: {\r\n      showTabs: [\"basic\", \"commercial\"],\r\n      readOnly: true,\r\n      compact: true,\r\n      className: \"max-h-96\"\r\n    },\r\n    details: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: true,\r\n      compact: false,\r\n      className: \"min-h-[600px]\"\r\n    },\r\n    edit: {\r\n      showTabs: [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n      readOnly: false,\r\n      compact: false,\r\n      className: \"min-h-[600px]\"\r\n    },\r\n  };\r\n\r\n  const config = contextConfig[context];\r\n\r\n  return (\r\n    <Card className={`w-full overflow-hidden bg-background border-border ${config.className}`}>\r\n      <CardContent className=\"p-0 h-full bg-background\">\r\n        <UnifiedClientInfo\r\n          clientData={clientData}\r\n          dynamicFields={dynamicFields}\r\n          onFieldUpdate={onFieldUpdate}\r\n          readOnly={config.readOnly}\r\n          compact={compact || config.compact}\r\n          showTabs={config.showTabs}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ClientInfo;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientProductsTab.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadClientProducts'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [client, loadClientProducts]","fix":{"range":[1220,1228],"text":"[client, loadClientProducts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useProducts } from \"@/hooks/useProducts\";\nimport { Contact } from \"@/types/client\";\nimport { Product } from \"@/types/product\";\n\ninterface ClientProductsTabProps {\n  client: Contact;\n  onUpdate?: () => void;\n}\n\nconst ClientProductsTab: React.FC<ClientProductsTabProps> = ({ client, onUpdate }) => {\n  const { toast } = useToast();\n  const { fetchClientProducts, addProductToClient, removeProductFromClient } = useProducts();\n  const [clientProducts, setClientProducts] = useState<Product[]>([]);\n  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);\n  const [selectedProduct, setSelectedProduct] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // Fetch client products and available products\n  useEffect(() => {\n    if (client?.id) {\n      loadClientProducts();\n    }\n  }, [client]);\n\n  // Load client products - this function now returns different values based on the client\n  const loadClientProducts = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch products associated with this client\n      const { clientProducts, availableProducts } = await fetchClientProducts(client.id);\n      setClientProducts(clientProducts || []);\n      setAvailableProducts(availableProducts || []);\n    } catch (error) {\n      console.error(\"Error loading client products:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"N├úo foi poss├¡vel carregar os produtos do cliente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add product to client\n  const handleAddProduct = async () => {\n    if (!selectedProduct) {\n      toast({\n        title: \"Selecione um produto\",\n        description: \"Por favor, selecione um produto para adicionar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await addProductToClient(client.id, selectedProduct);\n      toast({\n        title: \"Produto adicionado\",\n        description: \"Produto adicionado com sucesso ao cliente.\",\n      });\n      setSelectedProduct(\"\");\n      loadClientProducts();\n      if (onUpdate) onUpdate();\n    } catch (error) {\n      console.error(\"Error adding product to client:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"N├úo foi poss├¡vel adicionar o produto ao cliente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Remove product from client\n  const handleRemoveProduct = async (productId: string) => {\n    setIsLoading(true);\n    try {\n      await removeProductFromClient(client.id, productId);\n      toast({\n        title: \"Produto removido\",\n        description: \"Produto removido com sucesso do cliente.\",\n      });\n      loadClientProducts();\n      if (onUpdate) onUpdate();\n    } catch (error) {\n      console.error(\"Error removing product from client:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"N├úo foi poss├¡vel remover o produto do cliente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Calculate total value of client products - returns different values based on products\n  const calculateTotalValue = () => {\n    return clientProducts.reduce((total, product) => total + (product.price || 0), 0);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Produtos do Cliente</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Add product form */}\n          <div className=\"flex items-end gap-2\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"product-select\">Adicionar Produto</Label>\n              <select\n                id=\"product-select\"\n                className=\"w-full p-2 border rounded-md\"\n                value={selectedProduct}\n                onChange={(e) => setSelectedProduct(e.target.value)}\n                disabled={isLoading}\n              >\n                <option value=\"\">Selecione um produto</option>\n                {availableProducts.map((product) => (\n                  <option key={product.id} value={product.id}>\n                    {product.name} - R$ {product.price?.toFixed(2)}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button onClick={handleAddProduct} disabled={isLoading || !selectedProduct}>\n              Adicionar\n            </Button>\n          </div>\n\n          {/* Client products list */}\n          {clientProducts.length === 0 ? (\n            <div className=\"text-center py-4 text-gray-500\">\n              Este cliente n├úo possui produtos associados.\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {clientProducts.map((product) => (\n                <div\n                  key={product.id}\n                  className=\"flex items-center justify-between p-3 border rounded-md\"\n                >\n                  <div>\n                    <div className=\"font-medium\">{product.name}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      R$ {product.price?.toFixed(2)}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleRemoveProduct(product.id)}\n                    disabled={isLoading}\n                  >\n                    Remover\n                  </Button>\n                </div>\n              ))}\n\n              <div className=\"flex justify-between pt-4 font-medium\">\n                <span>Total:</span>\n                <span>R$ {calculateTotalValue().toFixed(2)}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ClientProductsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport ClientUTMData from \"./ClientUTMData\";\r\nimport EditableField from \"./EditableField\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientStatsProps {\r\n  clientData: Contact | null;\r\n  customFields: any[];\r\n  consultationStageOptions: string[];\r\n  fieldVisibility: Record<string, boolean>;\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange: (fieldId: string, visible: boolean) => void;\r\n  readOnly: boolean;\r\n  section: \"commercial\" | \"utm\";\r\n}\r\n\r\nconst ClientStats: React.FC<ClientStatsProps> = ({\r\n  clientData,\r\n  customFields,\r\n  consultationStageOptions,\r\n  fieldVisibility,\r\n  onFieldUpdate,\r\n  onVisibilityChange,\r\n  readOnly,\r\n  section,\r\n}) => {\r\n  if (section === \"utm\") {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {clientData?.id ? (\r\n          <>\r\n            <ClientUTMData\r\n              contactId={clientData.id}\r\n              readOnly={readOnly}\r\n              onFieldUpdate={onFieldUpdate}\r\n              onVisibilityChange={onVisibilityChange}\r\n              showVisibilityControl={!readOnly}\r\n            />\r\n            {customFields\r\n              .filter((field) => field.visibility_settings?.visible_in_tabs?.utm)\r\n              .map((field) => (\r\n                <CustomFieldRenderer\r\n                  key={field.id}\r\n                  field={field}\r\n                  value={clientData?.customValues?.[field.id]}\r\n                  onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n                />\r\n              ))}\r\n          </>\r\n        ) : (\r\n          <p className=\"text-muted-foreground text-center py-8\">\r\n            Dados UTM n├úo dispon├¡veis para este cliente.\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <EditableField\r\n        label=\"Status\"\r\n        value={clientData?.status}\r\n        fieldId=\"status\"\r\n        type={readOnly ? \"badge\" : \"select\"}\r\n        options={[\"Active\", \"Inactive\"]}\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.status !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Etapa da Consulta\"\r\n        value={clientData?.consultationStage}\r\n        fieldId=\"consultationStage\"\r\n        type={readOnly ? \"badge\" : \"select\"}\r\n        options={consultationStageOptions}\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.consultationStage !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Setor do Cliente\"\r\n        value={clientData?.clientSector}\r\n        fieldId=\"clientSector\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.clientSector !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Usu├írio Respons├ível\"\r\n        value={clientData?.responsibleUser}\r\n        fieldId=\"responsibleUser\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.responsibleUser !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Vendas\"\r\n        value={clientData?.sales}\r\n        fieldId=\"sales\"\r\n        type=\"money\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.sales !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Or├ºamento\"\r\n        value={clientData?.budget}\r\n        fieldId=\"budget\"\r\n        type=\"money\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.budget !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"M├®todo de Pagamento\"\r\n        value={clientData?.paymentMethod}\r\n        fieldId=\"paymentMethod\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.paymentMethod !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Objetivo do Cliente\"\r\n        value={clientData?.clientObjective}\r\n        fieldId=\"clientObjective\"\r\n        type=\"textarea\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.clientObjective !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Motivo de Perda\"\r\n        value={clientData?.lossReason}\r\n        fieldId=\"lossReason\"\r\n        type=\"textarea\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.lossReason !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"N├║mero de Contrato\"\r\n        value={clientData?.contractNumber}\r\n        fieldId=\"contractNumber\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.contractNumber !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Data de Contrato\"\r\n        value={clientData?.contractDate}\r\n        fieldId=\"contractDate\"\r\n        type=\"text\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.contractDate !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      <EditableField\r\n        label=\"Pagamento\"\r\n        value={clientData?.payment}\r\n        fieldId=\"payment\"\r\n        readOnly={readOnly}\r\n        onChange={onFieldUpdate}\r\n        onVisibilityChange={onVisibilityChange}\r\n        isVisible={fieldVisibility.payment !== false}\r\n        showVisibilityControl={!readOnly}\r\n      />\r\n      {customFields\r\n        .filter((field) => field.visibility_settings?.visible_in_tabs?.commercial)\r\n        .map((field) => (\r\n          <CustomFieldRenderer\r\n            key={field.id}\r\n            field={field}\r\n            value={clientData?.customValues?.[field.id]}\r\n            onChange={(value) => onFieldUpdate?.(`custom_${field.id}`, value)}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientStats;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientTableRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientUTMData.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsCompactToggler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsDashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1624,1627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1624,1627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1666,1669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1666,1669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ArrowLeft, ShipWheel, Filter } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useThemeSettings } from \"@/context/ThemeSettingsContext\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport FilterDialog from \"@/components/clients/FilterDialog\";\r\nimport AddClientDialog from \"@/components/clients/AddClientDialog\";\r\nimport ClientsCompactToggler from \"./ClientsCompactToggler\";\r\nimport ClientsViewToggler from \"./ClientsViewToggler\";\r\nimport ClientsRefreshButton from \"./ClientsRefreshButton\";\r\nimport { KanbanSettings } from \"./KanbanSettings\";\r\n\r\nimport { CustomFieldFilter } from \"@/hooks/useClientsFilters\";\r\n\r\ninterface ClientsHeaderProps {\r\n  searchTerm: string;\r\n  setSearchTerm: (term: string) => void;\r\n  isFilterDialogOpen: boolean;\r\n  setIsFilterDialogOpen: (isOpen: boolean) => void;\r\n  statusFilter: string;\r\n  segmentFilter: string;\r\n  lastContactFilter: string;\r\n  customFieldFilters: CustomFieldFilter[];\r\n  onStatusFilterChange: (value: string) => void;\r\n  onSegmentFilterChange: (value: string) => void;\r\n  onLastContactFilterChange: (value: string) => void;\r\n  onAddCustomFieldFilter: (filter: CustomFieldFilter) => void;\r\n  onRemoveCustomFieldFilter: (fieldId: string) => void;\r\n  onClearFilters: () => void;\r\n  onClearCustomFieldFilters: () => void;\r\n  hasActiveFilters: boolean;\r\n  isAddContactOpen: boolean;\r\n  onAddContactOpenChange: (open: boolean) => void;\r\n  newContact: Partial<any>;\r\n  setNewContact: (contact: Partial<any>) => void;\r\n  handleAddContact: () => Promise<string>;\r\n  viewMode: \"table\" | \"kanban\";\r\n  setViewMode: (v: \"table\" | \"kanban\") => void;\r\n  isCompactView: boolean;\r\n  setIsCompactView: (val: boolean) => void;\r\n  refreshing: boolean;\r\n  handleRefresh: () => void;\r\n}\r\n\r\nconst ClientsHeader = ({\r\n  searchTerm,\r\n  setSearchTerm,\r\n  isFilterDialogOpen,\r\n  setIsFilterDialogOpen,\r\n  statusFilter,\r\n  segmentFilter,\r\n  lastContactFilter,\r\n  customFieldFilters,\r\n  onStatusFilterChange,\r\n  onSegmentFilterChange,\r\n  onLastContactFilterChange,\r\n  onAddCustomFieldFilter,\r\n  onRemoveCustomFieldFilter,\r\n  onClearFilters,\r\n  onClearCustomFieldFilters,\r\n  hasActiveFilters,\r\n  isAddContactOpen,\r\n  onAddContactOpenChange,\r\n  newContact,\r\n  setNewContact,\r\n  handleAddContact,\r\n  viewMode,\r\n  setViewMode,\r\n  isCompactView,\r\n  setIsCompactView,\r\n  refreshing,\r\n  handleRefresh,\r\n}: ClientsHeaderProps) => {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { settings } = useThemeSettings();\r\n\r\n  const handleAddContactWrapper = async () => {\r\n    return await handleAddContact();\r\n  };\r\n\r\n  // Fun├º├úo para exibir o nome do status de forma amig├ível\r\n  const getStatusDisplayName = (status: string) => {\r\n    switch (status) {\r\n      case \"Ganhos\":\r\n        return \"Ganhos\";\r\n      case \"Perdidos\":\r\n        return \"Perdidos\";\r\n      case \"all\":\r\n        return \"Todos\";\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"shadow-md transition-colors duration-300 rounded-b-xl\"\r\n      style={{ backgroundColor: settings.primaryColor }}\r\n    >\r\n      <div className=\"flex flex-row items-center justify-between min-h-[64px] w-full px-6 py-0\">\r\n        {/* Branding e t├¡tulo */}\r\n        <div className=\"flex items-center gap-4 min-w-0 h-full\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => navigate(\"/dashboard\")}\r\n            className=\"text-white hover:bg-white/20 focus-visible:ring-white\"\r\n            aria-label=\"Voltar ao dashboard\"\r\n          >\r\n            <ArrowLeft className=\"h-5 w-5\" />\r\n          </Button>\r\n          {settings.logo ? (\r\n            <img\r\n              src={settings.logo}\r\n              alt=\"Logo\"\r\n              className=\"h-8 w-8 object-contain\"\r\n            />\r\n          ) : (\r\n            <ShipWheel\r\n              className=\"h-8 w-8\"\r\n              style={{ color: settings.secondaryColor }}\r\n            />\r\n          )}\r\n          <h1 className=\"text-xl font-bold text-white\">\r\n            {\" \"}\r\n            {settings.brandName}{\" \"}\r\n          </h1>\r\n          <span className=\"text-base ml-1 opacity-80 text-white\">\r\n            Clientes\r\n          </span>\r\n        </div>\r\n\r\n        {/* Grupo principal: filtros, novo cliente e controles */}\r\n        <div className=\"flex flex-row items-center gap-3 h-full\">\r\n          {/* Filtros */}\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setIsFilterDialogOpen(true)}\r\n            className=\"text-white hover:bg-white/20 focus-visible:ring-white flex items-center gap-1\"\r\n          >\r\n            <Filter className=\"h-4 w-4\" />\r\n            Filtros\r\n            {hasActiveFilters && (\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"ml-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\r\n              >\r\n                !\r\n              </Badge>\r\n            )}\r\n          </Button>\r\n\r\n          <FilterDialog\r\n            isOpen={isFilterDialogOpen}\r\n            onOpenChange={setIsFilterDialogOpen}\r\n            statusFilter={statusFilter}\r\n            segmentFilter={segmentFilter}\r\n            lastContactFilter={lastContactFilter}\r\n            customFieldFilters={customFieldFilters}\r\n            onStatusFilterChange={onStatusFilterChange}\r\n            onSegmentFilterChange={onSegmentFilterChange}\r\n            onLastContactFilterChange={onLastContactFilterChange}\r\n            onAddCustomFieldFilter={onAddCustomFieldFilter}\r\n            onRemoveCustomFieldFilter={onRemoveCustomFieldFilter}\r\n            onClearFilters={onClearFilters}\r\n            onClearCustomFieldFilters={onClearCustomFieldFilters}\r\n            hasActiveFilters={hasActiveFilters}\r\n          />\r\n\r\n          {/* Add Cliente */}\r\n          <AddClientDialog\r\n            isOpen={isAddContactOpen}\r\n            onOpenChange={onAddContactOpenChange}\r\n            newContact={newContact}\r\n            setNewContact={setNewContact}\r\n            handleAddContact={handleAddContactWrapper}\r\n          />\r\n\r\n          {/* Divisor */}\r\n          <div className=\"h-7 w-px bg-white/30 mx-2 hidden md:block\"></div>\r\n\r\n          {/* Controles de Kanban/Table/Compact */}\r\n          <div className=\"flex items-center gap-1 bg-white/10 rounded-md px-1\">\r\n            {viewMode === \"kanban\" && (\r\n              <ClientsCompactToggler\r\n                isCompactView={isCompactView}\r\n                setIsCompactView={setIsCompactView}\r\n                visible\r\n              />\r\n            )}\r\n            <ClientsViewToggler viewMode={viewMode} setViewMode={setViewMode} />\r\n          </div>\r\n\r\n          {/* Bot├úo atualizar */}\r\n          <ClientsRefreshButton\r\n            handleRefresh={handleRefresh}\r\n            refreshing={refreshing}\r\n          />\r\n\r\n          {/* Divisor */}\r\n          <div className=\"h-7 w-px bg-white/30 mx-2 hidden md:block\"></div>\r\n\r\n          {/* Usu├írio e config */}\r\n          <div className=\"flex items-center gap-2 min-w-fit\">\r\n            <Badge\r\n              variant=\"outline\"\r\n              className=\"bg-white/10 text-white border border-white/40 px-3 py-1 font-normal rounded-md\"\r\n            >\r\n              {user?.user_metadata?.name || user?.email}\r\n            </Badge>\r\n            <KanbanSettings />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Status filter indicator */}\r\n      {statusFilter !== \"all\" && (\r\n        <div className=\"bg-white/10 py-1 px-6 text-white text-sm flex items-center\">\r\n          <span className=\"mr-2\">Filtro ativo:</span>\r\n          <Badge className=\"bg-blue-500 text-white\">\r\n            Status: {getStatusDisplayName(statusFilter)}\r\n          </Badge>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default ClientsHeader;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsModals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsRefreshButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsTableVirtualized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ClientsViewToggler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ColumnConfigDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2672,2675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2672,2675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { GripVertical, Eye, EyeOff } from \"lucide-react\";\nimport { ColumnConfig, defaultColumnConfig, saveColumnConfig } from \"@/config/columnConfig\";\n\ninterface DraggableColumnItemProps {\n  column: ColumnConfig;\n  provided: any;\n  toggleColumnVisibility: (id: string) => void;\n}\n\n// Componente extra├¡do para reduzir o aninhamento de fun├º├Áes\nconst DraggableColumnItem: React.FC<DraggableColumnItemProps> = ({ column, provided, toggleColumnVisibility }) => {\n  return (\n    <div\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md border\"\n    >\n      <div className=\"flex items-center gap-3\">\n        <div\n          {...provided.dragHandleProps}\n          className=\"cursor-grab\"\n        >\n          <GripVertical className=\"h-5 w-5 text-gray-400\" />\n        </div>\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium\">\n            {column.label}\n          </span>\n          <span className=\"text-xs text-gray-500\">\n            {column.isVisible ? (\n              <span className=\"flex items-center gap-1\">\n                <Eye className=\"h-3 w-3\" /> Vis├¡vel\n              </span>\n            ) : (\n              <span className=\"flex items-center gap-1\">\n                <EyeOff className=\"h-3 w-3\" /> Oculto\n              </span>\n            )}\n          </span>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Switch\n          id={`column-${column.id}`}\n          checked={column.isVisible}\n          onCheckedChange={() =>\n            toggleColumnVisibility(column.id)\n          }\n        />\n        <Label\n          htmlFor={`column-${column.id}`}\n          className=\"sr-only\"\n        >\n          {column.label}\n        </Label>\n      </div>\n    </div>\n  );\n};\n\ninterface ColumnConfigDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  columnConfig: ColumnConfig[];\n  onColumnConfigChange: (config: ColumnConfig[]) => void;\n}\n\nconst ColumnConfigDialog: React.FC<ColumnConfigDialogProps> = ({\n  isOpen,\n  onOpenChange,\n  columnConfig,\n  onColumnConfigChange,\n}) => {\n  const [columns, setColumns] = useState<ColumnConfig[]>(columnConfig);\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const items = Array.from(columns);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    // Atualiza a prioridade com base na nova ordem\n    const updatedItems = items.map((item, index) => ({\n      ...item,\n      priority: index + 1,\n    }));\n\n    setColumns(updatedItems);\n  };\n\n  const toggleColumnVisibility = (id: string) => {\n    const updatedColumns = columns.map((column) => {\n      if (column.id === id) {\n        return { ...column, isVisible: !column.isVisible };\n      }\n      return column;\n    });\n    setColumns(updatedColumns);\n  };\n\n  const handleSave = () => {\n    onColumnConfigChange(columns);\n    saveColumnConfig(columns);\n    onOpenChange(false);\n  };\n\n  const handleReset = () => {\n    setColumns(defaultColumnConfig);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Configurar Colunas</DialogTitle>\n          <DialogDescription>\n            Arraste para reordenar ou ative/desative colunas para personalizar a\n            tabela de clientes.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"py-4\">\n          <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"columns\">\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"space-y-2\"\n                >\n                  {columns.map((column, index) => (\n                    <Draggable\n                      key={column.id}\n                      draggableId={column.id}\n                      index={index}\n                    >\n                      {(provided) => (\n                        <DraggableColumnItem \n                          column={column} \n                          provided={provided} \n                          toggleColumnVisibility={toggleColumnVisibility} \n                        />\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n\n        <DialogFooter className=\"flex justify-between\">\n          <Button variant=\"outline\" onClick={handleReset}>\n            Restaurar Padr├úo\n          </Button>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancelar\n            </Button>\n            <Button onClick={handleSave}>Salvar Configura├º├úo</Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ColumnConfigDialog;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CompanyInfoFields.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface CompanyInfoFieldsProps {\r\n  newContact: Partial<Contact>;\r\n  validationErrors: { [key: string]: string };\r\n  onInputChange: (field: keyof Contact, value: any) => void;\r\n}\r\n\r\nconst CompanyInfoFields = React.memo(({ newContact, validationErrors, onInputChange }: CompanyInfoFieldsProps) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <Label htmlFor=\"clientName\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Nome da Empresa\r\n        </Label>\r\n        <Input\r\n          id=\"clientName\"\r\n          value={newContact.clientName || \"\"}\r\n          onChange={(e) => onInputChange(\"clientName\", e.target.value)}\r\n          placeholder=\"Nome da empresa\"\r\n          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"client-type\">Tipo de cliente</Label>\r\n        <Select\r\n          value={newContact.clientType || \"\"}\r\n          onValueChange={(value) => onInputChange(\"clientType\", value)}\r\n        >\r\n          <SelectTrigger>\r\n            <SelectValue placeholder=\"Selecione\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"pessoa-fisica\">Pessoa F├¡sica</SelectItem>\r\n            <SelectItem value=\"pessoa-juridica\">Pessoa Jur├¡dica</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"clientSize\" className=\"text-gray-700 dark:text-gray-300\">\r\n          Tamanho do Cliente\r\n        </Label>\r\n        <Select\r\n          value={newContact.clientSize || \"\"}\r\n          onValueChange={(value) => onInputChange(\"clientSize\", value)}\r\n        >\r\n          <SelectTrigger>\r\n            <SelectValue placeholder=\"Selecione\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"pequeno\">Pequeno</SelectItem>\r\n            <SelectItem value=\"medio\">M├®dio</SelectItem>\r\n            <SelectItem value=\"grande\">Grande</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"cpfCnpj\" className=\"text-gray-700 dark:text-gray-300\">\r\n          CPF/CNPJ\r\n        </Label>\r\n        <Input\r\n          id=\"cpfCnpj\"\r\n          value={newContact.cpfCnpj || \"\"}\r\n          onChange={(e) => onInputChange(\"cpfCnpj\", e.target.value)}\r\n          placeholder=\"000.000.000-00 ou 00.000.000/0000-00\"\r\n          className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\r\n            validationErrors.cpfCnpj ? \"border-red-500 focus:border-red-500\" : \"\"\r\n          }`}\r\n        />\r\n        {validationErrors.cpfCnpj && (\r\n          <p className=\"text-sm text-red-500 mt-1\">{validationErrors.cpfCnpj}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nCompanyInfoFields.displayName = 'CompanyInfoFields';\r\n\r\nexport default CompanyInfoFields;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ConsultationStageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ContactStageHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CreateCustomFieldDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[444,447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[444,447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":79,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2546,3918],"text":"{ const selectedValues = Array.isArray(value) ? value : [];\n        \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            onChange([...selectedValues, option]);\n          } else {\n            onChange(selectedValues.filter((v: string) => v !== option));\n          }\n        };\n        \n        return (\n          <div\n            className={`space-y-2 ${\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\n            }`}\n          >\n            {field.field_options &&\n              Array.isArray(field.field_options) &&\n              field.field_options.map((option) => (\n                <label key={option} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedValues.includes(option)}\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\n                  />\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\n                    {option}\n                  </span>\n                </label>\n              ))}\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":82,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":88,"endColumn":11,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2546,3918],"text":"{ const selectedValues = Array.isArray(value) ? value : [];\n        \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            onChange([...selectedValues, option]);\n          } else {\n            onChange(selectedValues.filter((v: string) => v !== option));\n          }\n        };\n        \n        return (\n          <div\n            className={`space-y-2 ${\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\n            }`}\n          >\n            {field.field_options &&\n              Array.isArray(field.field_options) &&\n              field.field_options.map((option) => (\n                <label key={option} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedValues.includes(option)}\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\n                  />\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\n                    {option}\n                  </span>\n                </label>\n              ))}\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { CustomFieldWithValue } from \"@/types/customFields\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface CustomFieldRendererProps {\n  field: CustomFieldWithValue;\n  value: any;\n  onChange: (value: any) => void;\n  validationError?: string;\n}\n\nconst CustomFieldRenderer = ({\n  field,\n  value,\n  onChange,\n  validationError,\n}: CustomFieldRendererProps) => {\n  const renderField = () => {\n    switch (field.field_type) {\n      case \"text\":\n        return (\n          <Input\n            value={value || \"\"}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder={`Digite ${field.field_name.toLowerCase()}`}\n            className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 ${\n              validationError ? \"border-red-500 focus:border-red-500\" : \"\"\n            }`}\n          />\n        );\n\n      case \"single_select\":\n        return (\n          <Select\n            value={value || \"none\"}\n            onValueChange={(val) => onChange(val === \"none\" ? null : val)}\n          >\n            <SelectTrigger\n              className={`bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white ${\n                validationError ? \"border-red-500 focus:border-red-500\" : \"\"\n              }`}\n            >\n              <SelectValue\n                placeholder={`Selecione ${field.field_name.toLowerCase()}`}\n              />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\">\n              <SelectItem\n                value=\"none\"\n                className=\"text-gray-900 dark:text-white\"\n              >\n                Nenhum\n              </SelectItem>\n              {field.field_options &&\n                Array.isArray(field.field_options) &&\n                field.field_options.map((option) => (\n                  <SelectItem\n                    key={option}\n                    value={option}\n                    className=\"text-gray-900 dark:text-white\"\n                  >\n                    {option}\n                  </SelectItem>\n                ))}\n            </SelectContent>\n          </Select>\n        );\n\n      case \"multi_select\":\n        const selectedValues = Array.isArray(value) ? value : [];\n        \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleCheckboxChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            onChange([...selectedValues, option]);\n          } else {\n            onChange(selectedValues.filter((v: string) => v !== option));\n          }\n        };\n        \n        return (\n          <div\n            className={`space-y-2 ${\n              validationError ? \"p-2 border border-red-500 rounded\" : \"\"\n            }`}\n          >\n            {field.field_options &&\n              Array.isArray(field.field_options) &&\n              field.field_options.map((option) => (\n                <label key={option} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedValues.includes(option)}\n                    onChange={(e) => handleCheckboxChange(option, e.target.checked)}\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 dark:bg-gray-700\"\n                  />\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\n                    {option}\n                  </span>\n                </label>\n              ))}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2\">\n        {field.field_name}\n        {field.is_required && <span className=\"text-red-500 ml-1\">*</span>}\n        {validationError && <AlertCircle className=\"h-4 w-4 text-red-500\" />}\n      </Label>\n      {renderField()}\n      {validationError && (\n        <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\">\n          <AlertCircle className=\"h-3 w-3\" />\n          {validationError}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CustomFieldRenderer;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\CustomFieldsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1018,1021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1018,1021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1504,1507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1504,1507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2973,2976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2973,2976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Plus, Trash2 } from \"lucide-react\";\r\nimport { useCustomFields } from \"@/hooks/useCustomFields\";\r\nimport { CustomFieldWithValue } from \"@/types/customFields\";\r\nimport CustomFieldRenderer from \"./CustomFieldRenderer\";\r\nimport CreateCustomFieldDialog from \"./CreateCustomFieldDialog\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\ninterface CustomFieldsTabProps {\r\n  clientId?: string;\r\n  onFieldUpdate?: (fieldId: string, value: any) => void;\r\n  readOnly?: boolean;\r\n}\r\n\r\nconst CustomFieldsTab: React.FC<CustomFieldsTabProps> = ({\r\n  clientId,\r\n  onFieldUpdate,\r\n  readOnly = false,\r\n}) => {\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [customFieldsWithValues, setCustomFieldsWithValues] = useState<CustomFieldWithValue[]>([]);\r\n  const { customFields, loading, deleteCustomField, updateCustomField } = useCustomFields();\r\n\r\n  const handleFieldChange = (fieldId: string, value: any) => {\r\n    if (onFieldUpdate) {\r\n      onFieldUpdate(`custom_${fieldId}`, value);\r\n    }\r\n  };\r\n\r\n  const handleDeleteField = async (fieldId: string) => {\r\n    try {\r\n      await deleteCustomField(fieldId);\r\n    } catch (error) {\r\n      console.error(\"Erro ao excluir campo:\", error);\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = async (fieldId: string, visible: boolean) => {\r\n    try {\r\n      await updateCustomField(fieldId, { \r\n        visibility_settings: { visible_in_client_info: visible }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar visibilidade:\", error);\r\n    }\r\n  };\r\n\r\n  const handleTabSelectionChange = async (fieldId: string, selectedTab: string) => {\r\n    const field = customFields.find(f => f.id === fieldId);\r\n    if (!field) return;\r\n\r\n    const currentSettings = field.visibility_settings || {};\r\n    \r\n    // Reset all tabs to false, then set the selected one to true\r\n    const newTabSettings = {\r\n      basic: false,\r\n      commercial: false,\r\n      utm: false,\r\n      docs: false,\r\n      [selectedTab]: true\r\n    };\r\n    \r\n    try {\r\n      await updateCustomField(fieldId, {\r\n        visibility_settings: {\r\n          ...currentSettings,\r\n          visible_in_tabs: newTabSettings\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar aba do campo:\", error);\r\n    }\r\n  };\r\n\r\n  // Helper function to get the currently selected tab for a field\r\n  const getSelectedTab = (field: any) => {\r\n    const tabSettings = field.visibility_settings?.visible_in_tabs || {};\r\n    if (tabSettings.basic) return 'basic';\r\n    if (tabSettings.commercial) return 'commercial';\r\n    if (tabSettings.utm) return 'utm';\r\n    if (tabSettings.docs) return 'docs';\r\n    return 'basic'; // default\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"text-gray-500\">Carregando campos personalizados...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {!readOnly && (\r\n        <div className=\"flex justify-between items-center\">\r\n          <h3 className=\"text-lg font-semibold\">Campos Personalizados</h3>\r\n          <Button\r\n            onClick={() => setIsCreateDialogOpen(true)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n            Adicionar Campo\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {customFields.length === 0 ? (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500 mb-4\">\r\n            Nenhum campo personalizado configurado ainda.\r\n          </p>\r\n          {!readOnly && (\r\n            <Button\r\n              onClick={() => setIsCreateDialogOpen(true)}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Plus className=\"h-4 w-4\" />\r\n              Criar Primeiro Campo\r\n            </Button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          {customFields.map((field) => (\r\n            <Card key={field.id} className=\"p-4\">\r\n              <div className=\"space-y-4\">\r\n                {/* Campo em si */}\r\n                <div className=\"flex-1\">\r\n                  <CustomFieldRenderer\r\n                    field={field}\r\n                    value={customFieldsWithValues.find(f => f.id === field.id)?.value}\r\n                    onChange={(value) => handleFieldChange(field.id, value)}\r\n                  />\r\n                </div>\r\n\r\n                {/* Controles de visibilidade e exclus├úo */}\r\n                {!readOnly && (\r\n                  <div className=\"border-t pt-4 space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={`visible-${field.id}`}\r\n                          checked={field.visibility_settings?.visible_in_client_info !== false}\r\n                          onCheckedChange={(checked) => \r\n                            handleVisibilityChange(field.id, checked as boolean)\r\n                          }\r\n                        />\r\n                        <Label htmlFor={`visible-${field.id}`} className=\"text-sm\">\r\n                          Exibir nas informa├º├Áes do cliente\r\n                        </Label>\r\n                      </div>\r\n\r\n                      <AlertDialog>\r\n                        <AlertDialogTrigger asChild>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            className=\"text-red-600 hover:text-red-700\"\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </AlertDialogTrigger>\r\n                        <AlertDialogContent>\r\n                          <AlertDialogHeader>\r\n                            <AlertDialogTitle>Excluir Campo Personalizado</AlertDialogTitle>\r\n                            <AlertDialogDescription>\r\n                              Tem certeza que deseja excluir o campo \"{field.field_name}\"? \r\n                              Esta a├º├úo n├úo pode ser desfeita e todos os dados associados ser├úo perdidos.\r\n                            </AlertDialogDescription>\r\n                          </AlertDialogHeader>\r\n                          <AlertDialogFooter>\r\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n                            <AlertDialogAction\r\n                              onClick={() => handleDeleteField(field.id)}\r\n                              className=\"bg-red-600 hover:bg-red-700\"\r\n                            >\r\n                              Excluir\r\n                            </AlertDialogAction>\r\n                          </AlertDialogFooter>\r\n                        </AlertDialogContent>\r\n                      </AlertDialog>\r\n                    </div>\r\n\r\n                    {/* Configura├º├úo de aba - agora como dropdown ├║nico */}\r\n                    <div className=\"space-y-2\">\r\n                      <Label className=\"text-sm font-medium\">Exibir na aba:</Label>\r\n                      <Select\r\n                        value={getSelectedTab(field)}\r\n                        onValueChange={(value) => handleTabSelectionChange(field.id, value)}\r\n                      >\r\n                        <SelectTrigger className=\"w-full\">\r\n                          <SelectValue placeholder=\"Selecione uma aba\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"basic\">B├ísico</SelectItem>\r\n                          <SelectItem value=\"commercial\">Comercial</SelectItem>\r\n                          <SelectItem value=\"utm\">UTM</SelectItem>\r\n                          <SelectItem value=\"docs\">Arquivos</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <CreateCustomFieldDialog\r\n        isOpen={isCreateDialogOpen}\r\n        onClose={() => setIsCreateDialogOpen(false)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomFieldsTab;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\DialogTabsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\DynamicCategoryManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[667,670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[667,670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2919,2922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2919,2922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":147,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4204,5388],"text":"{ const selectedValues = Array.isArray(category.value)\n          ? category.value\n          : [];\n          \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            updateCategoryValue(category.id, [\n              ...selectedValues,\n              option,\n            ]);\n          } else {\n            updateCategoryValue(\n              category.id,\n              selectedValues.filter((v: string) => v !== option),\n            );\n          }\n        };\n        \n        return (\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\n            {category.options?.map((option) => (\n              <label key={option} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedValues.includes(option)}\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <span className=\"text-sm\">{option}</span>\n              </label>\n            ))}\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":164,"endColumn":11,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4204,5388],"text":"{ const selectedValues = Array.isArray(category.value)\n          ? category.value\n          : [];\n          \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            updateCategoryValue(category.id, [\n              ...selectedValues,\n              option,\n            ]);\n          } else {\n            updateCategoryValue(\n              category.id,\n              selectedValues.filter((v: string) => v !== option),\n            );\n          }\n        };\n        \n        return (\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\n            {category.options?.map((option) => (\n              <label key={option} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedValues.includes(option)}\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <span className=\"text-sm\">{option}</span>\n              </label>\n            ))}\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Trash2, X } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport interface DynamicCategory {\n  id: string;\n  name: string;\n  type: \"text\" | \"single_select\" | \"multi_select\";\n  options?: string[];\n  value?: any;\n}\n\ninterface DynamicCategoryManagerProps {\n  tabName: string;\n  categories: DynamicCategory[];\n  onCategoriesChange: (categories: DynamicCategory[]) => void;\n}\n\nconst DynamicCategoryManager = ({\n  tabName,\n  categories,\n  onCategoriesChange,\n}: DynamicCategoryManagerProps) => {\n  const [isAddingCategory, setIsAddingCategory] = useState(false);\n  const [newCategory, setNewCategory] = useState({\n    name: \"\",\n    type: \"text\" as \"text\" | \"single_select\" | \"multi_select\",\n    options: [] as string[],\n  });\n  const [newOption, setNewOption] = useState(\"\");\n\n  console.log(`DynamicCategoryManager for ${tabName}:`, {\n    categories,\n    isAddingCategory,\n  });\n\n  const addCategory = () => {\n    if (!newCategory.name.trim()) {\n      toast({\n        title: \"Nome obrigat├│rio\",\n        description: \"Por favor, digite um nome para a categoria.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const category: DynamicCategory = {\n      id: `${Date.now()}-${Math.random()}`,\n      name: newCategory.name,\n      type: newCategory.type,\n      options: newCategory.type !== \"text\" ? newCategory.options : undefined,\n      value: newCategory.type === \"multi_select\" ? [] : \"\",\n    };\n\n    onCategoriesChange([...categories, category]);\n    setNewCategory({ name: \"\", type: \"text\", options: [] });\n    setNewOption(\"\");\n    setIsAddingCategory(false);\n\n    toast({\n      title: \"Categoria adicionada\",\n      description: `Categoria \"${category.name}\" foi adicionada ├á aba ${tabName}.`,\n    });\n  };\n\n  const removeCategory = (categoryId: string) => {\n    onCategoriesChange(categories.filter((cat) => cat.id !== categoryId));\n    toast({\n      title: \"Categoria removida\",\n      description: \"Categoria foi removida com sucesso.\",\n    });\n  };\n\n  const addOption = () => {\n    if (newOption.trim() && !newCategory.options.includes(newOption.trim())) {\n      setNewCategory({\n        ...newCategory,\n        options: [...newCategory.options, newOption.trim()],\n      });\n      setNewOption(\"\");\n    }\n  };\n\n  const removeOption = (option: string) => {\n    setNewCategory({\n      ...newCategory,\n      options: newCategory.options.filter((opt) => opt !== option),\n    });\n  };\n\n  const updateCategoryValue = (categoryId: string, value: any) => {\n    onCategoriesChange(\n      categories.map((cat) =>\n        cat.id === categoryId ? { ...cat, value } : cat,\n      ),\n    );\n  };\n\n  const renderCategoryInput = (category: DynamicCategory) => {\n    switch (category.type) {\n      case \"text\":\n        return (\n          <Input\n            value={category.value || \"\"}\n            onChange={(e) => updateCategoryValue(category.id, e.target.value)}\n            placeholder={`Digite ${category.name.toLowerCase()}`}\n          />\n        );\n\n      case \"single_select\":\n        return (\n          <Select\n            value={category.value || \"none\"}\n            onValueChange={(val) =>\n              updateCategoryValue(category.id, val === \"none\" ? null : val)\n            }\n          >\n            <SelectTrigger>\n              <SelectValue\n                placeholder={`Selecione ${category.name.toLowerCase()}`}\n              />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"none\">Nenhum</SelectItem>\n              {category.options?.map((option) => (\n                <SelectItem key={option} value={option}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n\n      case \"multi_select\":\n        const selectedValues = Array.isArray(category.value)\n          ? category.value\n          : [];\n          \n        // Fun├º├úo extra├¡da para reduzir o aninhamento\n        const handleMultiSelectChange = (option: string, isChecked: boolean) => {\n          if (isChecked) {\n            updateCategoryValue(category.id, [\n              ...selectedValues,\n              option,\n            ]);\n          } else {\n            updateCategoryValue(\n              category.id,\n              selectedValues.filter((v: string) => v !== option),\n            );\n          }\n        };\n        \n        return (\n          <div className=\"space-y-2 max-h-24 overflow-y-auto\">\n            {category.options?.map((option) => (\n              <label key={option} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedValues.includes(option)}\n                  onChange={(e) => handleMultiSelectChange(option, e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <span className=\"text-sm\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4 max-h-96 flex flex-col\">\n      {/* Header with add button */}\n      <div className=\"flex items-center justify-between flex-shrink-0\">\n        <h4 className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">\n          Categorias Personalizadas\n        </h4>\n        {!isAddingCategory && (\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsAddingCategory(true)}\n            className=\"text-green-600 hover:text-green-700 border-green-200 hover:border-green-300\"\n          >\n            <Plus className=\"h-3 w-3 mr-1\" />\n            Nova Categoria\n          </Button>\n        )}\n      </div>\n\n      {/* Scrollable content area */}\n      <div className=\"flex-1 overflow-y-auto space-y-3\">\n        {/* Add new category form */}\n        {isAddingCategory && (\n          <Card className=\"border-green-200\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-sm\">Nova Categoria</CardTitle>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setIsAddingCategory(false);\n                    setNewCategory({ name: \"\", type: \"text\", options: [] });\n                    setNewOption(\"\");\n                  }}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"category-name\" className=\"text-xs\">\n                  Nome da Categoria\n                </Label>\n                <Input\n                  id=\"category-name\"\n                  value={newCategory.name}\n                  onChange={(e) =>\n                    setNewCategory({ ...newCategory, name: e.target.value })\n                  }\n                  placeholder=\"Ex: Tipo de Empresa\"\n                  className=\"text-sm\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"category-type\" className=\"text-xs\">\n                  Tipo de Campo\n                </Label>\n                <Select\n                  value={newCategory.type}\n                  onValueChange={(\n                    value: \"text\" | \"single_select\" | \"multi_select\",\n                  ) =>\n                    setNewCategory({ ...newCategory, type: value, options: [] })\n                  }\n                >\n                  <SelectTrigger className=\"text-sm\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"text\">Texto</SelectItem>\n                    <SelectItem value=\"single_select\">Sele├º├úo ├Ünica</SelectItem>\n                    <SelectItem value=\"multi_select\">\n                      Sele├º├úo M├║ltipla\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {(newCategory.type === \"single_select\" ||\n                newCategory.type === \"multi_select\") && (\n                <div>\n                  <Label className=\"text-xs\">Op├º├Áes</Label>\n                  <div className=\"flex gap-2 mb-2\">\n                    <Input\n                      value={newOption}\n                      onChange={(e) => setNewOption(e.target.value)}\n                      placeholder=\"Nova op├º├úo\"\n                      onKeyPress={(e) => e.key === \"Enter\" && addOption()}\n                      className=\"text-sm\"\n                    />\n                    <Button\n                      onClick={addOption}\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-1 max-h-16 overflow-y-auto\">\n                    {newCategory.options.map((option) => (\n                      <Badge\n                        key={option}\n                        variant=\"secondary\"\n                        className=\"text-xs flex items-center gap-1\"\n                      >\n                        {option}\n                        <button\n                          onClick={() => removeOption(option)}\n                          className=\"ml-1\"\n                        >\n                          <X className=\"h-2 w-2\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-2\">\n                <Button onClick={addCategory} size=\"sm\" className=\"text-xs\">\n                  Adicionar\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsAddingCategory(false)}\n                  className=\"text-xs\"\n                >\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Existing categories */}\n        {categories.map((category) => (\n          <Card key={category.id} className=\"border-gray-200\">\n            <CardContent className=\"p-3\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Label className=\"text-sm font-medium\">\n                      {category.name}\n                    </Label>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {category.type === \"text\"\n                        ? \"Texto\"\n                        : category.type === \"single_select\"\n                          ? \"Sele├º├úo ├Ünica\"\n                          : \"Sele├º├úo M├║ltipla\"}\n                    </Badge>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeCategory(category.id)}\n                    className=\"text-red-600 hover:text-red-700 h-6 w-6 p-0\"\n                  >\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n                {renderCategoryInput(category)}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {categories.length === 0 && !isAddingCategory && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p className=\"text-sm\">Nenhuma categoria personalizada criada.</p>\n            <p className=\"text-xs mt-1\">\n              Clique em \"Nova Categoria\" para come├ºar.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DynamicCategoryManager;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditClientForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1230,1233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1230,1233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { useDynamicFields } from \"@/hooks/useDynamicFields\";\r\nimport ClientInfo from \"./ClientInfo\";\r\n\r\ninterface EditClientFormProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedContact: Contact | null;\r\n  onSave: (updatedContact: Contact) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Componente para edi├º├úo de cliente\r\n */\r\nconst EditClientForm: React.FC<EditClientFormProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedContact,\r\n  onSave,\r\n}) => {\r\n  const [contact, setContact] = useState<Contact | null>(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const { dynamicFields, refetch } = useDynamicFields(selectedContact?.sessionId || null);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && selectedContact) {\r\n      console.log(\"Setting contact data for editing:\", selectedContact);\r\n      setContact({ ...selectedContact });\r\n      refetch();\r\n    }\r\n  }, [isOpen, selectedContact, refetch]);\r\n\r\n  const handleFieldUpdate = (fieldId: string, newValue: any) => {\r\n    if (!contact) return;\r\n\r\n    console.log(\"Field updated:\", fieldId, newValue);\r\n\r\n    // Verifica se ├® um campo personalizado ou um campo padr├úo\r\n    if (fieldId.startsWith(\"custom_\")) {\r\n      const actualFieldId = fieldId.replace(\"custom_\", \"\");\r\n      setContact({\r\n        ...contact,\r\n        customValues: {\r\n          ...contact.customValues,\r\n          [actualFieldId]: newValue,\r\n        },\r\n      });\r\n    } else {\r\n      setContact({\r\n        ...contact,\r\n        [fieldId]: newValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!contact) return;\r\n\r\n    try {\r\n      setIsSaving(true);\r\n      console.log(\"Saving contact:\", contact);\r\n      await onSave(contact);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Erro ao salvar cliente:\", error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setContact(null);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}>\r\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>Editar Cliente: {selectedContact?.name}</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"py-4\">\r\n          {contact && (\r\n            <ClientInfo\r\n              clientData={contact}\r\n              dynamicFields={dynamicFields}\r\n              onFieldUpdate={handleFieldUpdate}\r\n              context=\"edit\"\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={handleClose}>\r\n            Cancelar\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={isSaving}>\r\n            {isSaving ? \"Salvando...\" : \"Salvar Altera├º├Áes\"}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditClientForm;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\EditableField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport FieldVisibilityControl from \"./FieldVisibilityControl\";\r\n\r\ninterface EditableFieldProps {\r\n  label: string;\r\n  value?: string | number | null;\r\n  fieldId: string;\r\n  type?: \"text\" | \"email\" | \"tel\" | \"textarea\" | \"select\" | \"badge\" | \"money\";\r\n  options?: string[];\r\n  readOnly?: boolean;\r\n  onChange?: (fieldId: string, newValue: any) => void;\r\n  onVisibilityChange?: (fieldId: string, visible: boolean) => void;\r\n  isVisible?: boolean;\r\n  showVisibilityControl?: boolean;\r\n}\r\n\r\nconst EditableField: React.FC<EditableFieldProps> = ({\r\n  label,\r\n  value,\r\n  fieldId,\r\n  type = \"text\",\r\n  options = [],\r\n  readOnly = false,\r\n  onChange,\r\n  onVisibilityChange,\r\n  isVisible = true,\r\n  showVisibilityControl = false,\r\n}) => {\r\n  const [localValue, setLocalValue] = useState(value || \"\");\r\n\r\n  const handleChange = (newValue: any) => {\r\n    setLocalValue(newValue);\r\n    if (onChange) {\r\n      onChange(fieldId, newValue);\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = (fieldId: string, visible: boolean) => {\r\n    if (onVisibilityChange) {\r\n      onVisibilityChange(fieldId, visible);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number | string) => {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n    if (isNaN(numValue)) return \"R$ 0,00\";\r\n    \r\n    return new Intl.NumberFormat('pt-BR', {\r\n      style: 'currency',\r\n      currency: 'BRL'\r\n    }).format(numValue);\r\n  };\r\n\r\n  const renderField = () => {\r\n    if (readOnly) {\r\n      switch (type) {\r\n        case \"badge\":\r\n          return value ? (\r\n            <Badge variant=\"secondary\" className=\"text-sm\">\r\n              {value}\r\n            </Badge>\r\n          ) : (\r\n            <span className=\"text-gray-500 text-sm\">-</span>\r\n          );\r\n        case \"money\":\r\n          return (\r\n            <span className=\"text-sm font-medium\">\r\n              {value ? formatCurrency(value) : \"R$ 0,00\"}\r\n            </span>\r\n          );\r\n        case \"textarea\":\r\n          return (\r\n            <div className=\"text-sm whitespace-pre-wrap\">\r\n              {value || <span className=\"text-gray-500\">-</span>}\r\n            </div>\r\n          );\r\n        default:\r\n          return (\r\n            <span className=\"text-sm\">\r\n              {value || <span className=\"text-gray-500\">-</span>}\r\n            </span>\r\n          );\r\n      }\r\n    }\r\n\r\n    switch (type) {\r\n      case \"textarea\":\r\n        return (\r\n          <Textarea\r\n            value={localValue}\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            className=\"min-h-[60px] resize-none\"\r\n            placeholder={`Digite ${label.toLowerCase()}`}\r\n          />\r\n        );\r\n      case \"select\":\r\n        return (\r\n          <Select value={localValue as string} onValueChange={handleChange}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder={`Selecione ${label.toLowerCase()}`} />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {options.map((option) => (\r\n                <SelectItem key={option} value={option}>\r\n                  {option}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n      case \"money\":\r\n        return (\r\n          <Input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={localValue}\r\n            onChange={(e) => handleChange(parseFloat(e.target.value) || 0)}\r\n            placeholder=\"0,00\"\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <Input\r\n            type={type}\r\n            value={localValue}\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            placeholder={`Digite ${label.toLowerCase()}`}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-1\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <Label htmlFor={fieldId} className=\"text-sm font-medium\">\r\n          {label}\r\n        </Label>\r\n        {showVisibilityControl && onVisibilityChange && (\r\n          <FieldVisibilityControl\r\n            fieldId={fieldId}\r\n            fieldLabel={label}\r\n            isVisible={isVisible}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        )}\r\n      </div>\r\n      {renderField()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditableField;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\FieldVisibilityControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\FilterDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanClientCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[362,365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[362,365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Contact } from \"@/types/client\";\nimport { cn } from \"@/lib/utils\";\nimport ClientCard from \"./ClientCard\";\n\ninterface KanbanClientCardProps {\n  contact: Contact;\n  onClick: (contact: Contact) => void;\n  onEditClick: (contact: Contact) => void;\n  index: number;\n  isCompact: boolean;\n  dragHandleProps?: any;\n  draggableProps?: any;\n  innerRef?: (element: HTMLElement | null) => void;\n  snapshot?: any;\n}\n\nexport const KanbanClientCard: React.FC<KanbanClientCardProps> = ({\n  contact,\n  onClick,\n  onEditClick,\n  index,\n  isCompact,\n  dragHandleProps,\n  draggableProps,\n  innerRef,\n  snapshot,\n}) => {\n  return (\n    <ClientCard\n      contact={contact}\n      onClick={onClick}\n      onEditClick={onEditClick}\n      displayConfig={{\n        showTags: true,\n        showConsultationStage: true,\n        showCommercialInfo: false,\n        showCustomFields: false,\n        isCompact,\n      }}\n      dragHandleProps={dragHandleProps}\n      draggableProps={draggableProps}\n      innerRef={innerRef}\n      snapshot={snapshot}\n      className={cn(snapshot?.isDragging ? \"shadow-xl rotate-1 scale-105\" : \"\")}\n    />\n  );\n};\n\nexport default KanbanClientCard;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanStageColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\KanbanView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2404,2407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2404,2407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useRef, useState, useCallback } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport KanbanStageColumn from \"./KanbanStageColumn\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { KanbanStage } from \"@/hooks/useKanbanStages\";\r\nimport { useContactsByKanbanStage } from \"@/hooks/useContactsByKanbanStage\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\ninterface KanbanViewProps {\r\n  contacts: Contact[];\r\n  onContactClick: (contact: Contact) => void;\r\n  onStageChange: (contactId: string, newStageId: string) => void;\r\n  searchTerm: string;\r\n  onEditClick: (contact: Contact) => void;\r\n  isCompact: boolean;\r\n  stages: KanbanStage[];\r\n  onStageEdit?: (stage: KanbanStage) => void;\r\n}\r\n\r\nconst KanbanView = ({\r\n  contacts,\r\n  onContactClick,\r\n  onStageChange,\r\n  searchTerm,\r\n  onEditClick,\r\n  isCompact,\r\n  stages,\r\n  onStageEdit,\r\n}: KanbanViewProps) => {\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [startX, setStartX] = useState(0);\r\n  const [scrollLeft, setScrollLeft] = useState(0);\r\n  const [dragStartTime, setDragStartTime] = useState<number | null>(null);\r\n\r\n  // Filtragem de contatos\r\n  const filteredContacts = contacts.filter(\r\n    (contact) =>\r\n      contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      (contact.email &&\r\n        contact.email.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (contact.clientName &&\r\n        contact.clientName.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (contact.phone && contact.phone.includes(searchTerm)),\r\n  );\r\n\r\n  // Agrupamento de contatos por est├ígio usando hook refatorado\r\n  const contactsByStage = useContactsByKanbanStage(filteredContacts, stages);\r\n\r\n  // Log para diagnosticar dados recebidos\r\n  React.useEffect(() => {\r\n    console.log(\r\n      \"[KanbanView] Stages dispon├¡veis:\",\r\n      stages.map((s) => ({ id: s.id, title: s.title })),\r\n    );\r\n    console.log(\r\n      \"[KanbanView] Total de contatos filtrados:\",\r\n      filteredContacts.length,\r\n    );\r\n    console.log(\"[KanbanView] Agrupamento final:\", contactsByStage);\r\n  }, [filteredContacts, stages, contactsByStage]);\r\n\r\n  const handleDragStart = useCallback(() => {\r\n    setDragStartTime(Date.now());\r\n    console.log(\"[KanbanView] Drag started\");\r\n  }, []);\r\n\r\n  const handleDragEnd = useCallback((result: any) => {\r\n    const dragEndTime = Date.now();\r\n    const dragDuration = dragStartTime ? dragEndTime - dragStartTime : 0;\r\n    \r\n    console.log(\"[KanbanView] Drag ended:\", result);\r\n    console.log(\"[KanbanView] Drag duration:\", dragDuration, \"ms\");\r\n    \r\n    setDragStartTime(null);\r\n\r\n    if (!result.destination) {\r\n      console.log(\"[KanbanView] No destination - drag cancelled\");\r\n      return;\r\n    }\r\n\r\n    const { source, destination, draggableId } = result;\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      console.log(\"[KanbanView] Same column - no action needed\");\r\n      return;\r\n    }\r\n\r\n    // Find the source and destination stages\r\n    const sourceStage = stages.find(stage => stage.id === source.droppableId);\r\n    const destinationStage = stages.find(stage => stage.id === destination.droppableId);\r\n    \r\n    if (!sourceStage || !destinationStage) {\r\n      console.error(\"[KanbanView] Could not find source or destination stage\");\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"N├úo foi poss├¡vel encontrar os est├ígios de origem ou destino.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log(`[KanbanView] Moving contact ${draggableId} from ${sourceStage.title} to ${destinationStage.title}`);\r\n    \r\n    // Call the stage change handler with the destination stage ID\r\n    onStageChange(draggableId, destination.droppableId);\r\n  }, [stages, onStageChange, dragStartTime]);\r\n\r\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\r\n    if (!scrollContainerRef.current) return;\r\n\r\n    if (\r\n      e.target === scrollContainerRef.current ||\r\n      (e.target as Element).closest(\".kanban-drag-area\")\r\n    ) {\r\n      setIsDragging(true);\r\n      setStartX(e.pageX - scrollContainerRef.current.offsetLeft);\r\n      setScrollLeft(scrollContainerRef.current.scrollLeft);\r\n      e.preventDefault();\r\n    }\r\n  }, []);\r\n\r\n  const handleMouseMove = useCallback(\r\n    (e: React.MouseEvent) => {\r\n      if (!isDragging || !scrollContainerRef.current) return;\r\n\r\n      e.preventDefault();\r\n      const x = e.pageX - scrollContainerRef.current.offsetLeft;\r\n      const walk = (x - startX) * 2;\r\n      scrollContainerRef.current.scrollLeft = scrollLeft - walk;\r\n    },\r\n    [isDragging, startX, scrollLeft],\r\n  );\r\n\r\n  const handleMouseUp = useCallback(() => {\r\n    setIsDragging(false);\r\n  }, []);\r\n\r\n  const handleMouseLeave = useCallback(() => {\r\n    setIsDragging(false);\r\n  }, []);\r\n\r\n  return (\r\n    <DragDropContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>\r\n      <div\r\n        ref={scrollContainerRef}\r\n        className={`overflow-x-auto overflow-y-hidden h-full select-none transition-all duration-200 ${\r\n          isDragging ? \"cursor-grabbing\" : \"cursor-grab\"\r\n        } [&::-webkit-scrollbar]:hidden`}\r\n        style={{\r\n          scrollbarWidth: \"none\",\r\n          msOverflowStyle: \"none\",\r\n        }}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        <div className=\"flex gap-3 min-w-max p-1 md:p-2 kanban-drag-area h-full\">\r\n          {stages.map((stage) => (\r\n            <KanbanStageColumn\r\n              key={stage.id}\r\n              stage={stage}\r\n              contacts={contactsByStage[stage.title] || []}\r\n              onContactClick={onContactClick}\r\n              onEditClick={onEditClick}\r\n              isCompact={isCompact}\r\n              onStageEdit={onStageEdit}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default KanbanView;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\SendMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\TagsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\UnifiedClientInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { DynamicCategory } from \"@/components/clients/DynamicCategoryManager\";\r\nimport ClientDetails from \"./ClientDetails\";\r\nimport ClientStats from \"./ClientStats\";\r\nimport ClientActions from \"./ClientActions\";\r\nimport { useUnifiedClientInfo } from \"@/hooks/useUnifiedClientInfo\";\r\n\r\ninterface UnifiedClientInfoProps {\r\n  clientData: Contact | null;\r\n  dynamicFields?: {\r\n    basic: DynamicCategory[];\r\n    commercial: DynamicCategory[];\r\n    personalized: DynamicCategory[];\r\n    documents: DynamicCategory[];\r\n  };\r\n  onFieldUpdate?: (fieldId: string, newValue: any) => void;\r\n  readOnly?: boolean;\r\n  compact?: boolean;\r\n  showTabs?: string[];\r\n}\r\n\r\nconst UnifiedClientInfo: React.FC<UnifiedClientInfoProps> = ({\r\n  clientData,\r\n  dynamicFields = {\r\n    basic: [],\r\n    commercial: [],\r\n    personalized: [],\r\n    documents: [],\r\n  },\r\n  onFieldUpdate,\r\n  readOnly = true,\r\n  compact = false,\r\n  showTabs = [\"basic\", \"commercial\", \"utm\", \"custom\", \"docs\"],\r\n}) => {\r\n  const {\r\n    activeTab,\r\n    setActiveTab,\r\n    fieldVisibility,\r\n    setFieldVisibility,\r\n    tabsScrollRef,\r\n    customFields,\r\n    consultationStageOptions,\r\n    clientTypeOptions,\r\n    clientSizeOptions,\r\n  } = useUnifiedClientInfo(showTabs);\r\n\r\n  const tabConfig = {\r\n    basic: { label: \"B├ísico\", icon: \"­ƒæñ\" },\r\n    commercial: { label: \"Comercial\", icon: \"­ƒÆ╝\" },\r\n    utm: { label: \"UTM\", icon: \"­ƒôè\" },\r\n    custom: { label: \"Personalizado\", icon: \"ÔÜÖ´©Å\" },\r\n    docs: { label: \"Arquivos\", icon: \"­ƒôü\" }\r\n  };\r\n\r\n  const scrollTabs = (direction: 'left' | 'right') => {\r\n    if (tabsScrollRef.current) {\r\n      const scrollAmount = 150;\r\n      const newScrollLeft = tabsScrollRef.current.scrollLeft +\r\n        (direction === 'right' ? scrollAmount : -scrollAmount);\r\n      \r\n      tabsScrollRef.current.scrollTo({\r\n        left: newScrollLeft,\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleVisibilityChange = (fieldId: string, visible: boolean) => {\r\n    setFieldVisibility(prev => ({\r\n      ...prev,\r\n      [fieldId]: visible,\r\n    }));\r\n  };\r\n\r\n  const renderTabContent = () => {\r\n    switch (activeTab) {\r\n      case \"basic\":\r\n        return (\r\n          <ClientDetails\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            clientTypeOptions={clientTypeOptions}\r\n            clientSizeOptions={clientSizeOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"commercial\":\r\n        return (\r\n          <ClientStats\r\n            section=\"commercial\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            consultationStageOptions={consultationStageOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"utm\":\r\n        return (\r\n          <ClientStats\r\n            section=\"utm\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            consultationStageOptions={consultationStageOptions}\r\n            fieldVisibility={fieldVisibility}\r\n            onFieldUpdate={onFieldUpdate}\r\n            onVisibilityChange={handleVisibilityChange}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"custom\":\r\n        return (\r\n          <ClientActions\r\n            section=\"custom\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            onFieldUpdate={onFieldUpdate}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      case \"docs\":\r\n        return (\r\n          <ClientActions\r\n            section=\"docs\"\r\n            clientData={clientData}\r\n            customFields={customFields}\r\n            onFieldUpdate={onFieldUpdate}\r\n            readOnly={readOnly}\r\n          />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full bg-background\">\r\n      {/* Carousel Tab Navigation */}\r\n      <div className=\"relative border-b border-border bg-background flex-shrink-0\">\r\n        {/* Left scroll button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"absolute left-0 top-0 z-10 h-full rounded-none shadow-md bg-background/80 backdrop-blur-sm\"\r\n          onClick={() => scrollTabs('left')}\r\n        >\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n\r\n        {/* Scrollable tabs container */}\r\n        <div\r\n          ref={tabsScrollRef}\r\n          className=\"flex overflow-x-auto scrollbar-hide mx-8 py-2\"\r\n          style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\r\n        >\r\n          <div className=\"flex space-x-2 min-w-max\">\r\n            {showTabs.map((tab) => (\r\n              <button\r\n                key={tab}\r\n                onClick={() => setActiveTab(tab)}\r\n                className={`\r\n                  inline-flex items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium \r\n                  transition-all duration-200 min-w-[120px]\r\n                  ${activeTab === tab\r\n                    ? 'bg-primary text-primary-foreground shadow-sm'\r\n                    : 'text-muted-foreground hover:bg-muted hover:text-foreground'\r\n                  }\r\n                `}\r\n              >\r\n                <span className=\"mr-2 text-base\">\r\n                  {tabConfig[tab as keyof typeof tabConfig]?.icon}\r\n                </span>\r\n                {tabConfig[tab as keyof typeof tabConfig]?.label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right scroll button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"absolute right-0 top-0 z-10 h-full rounded-none shadow-md bg-background/80 backdrop-blur-sm\"\r\n          onClick={() => scrollTabs('right')}\r\n        >\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Tab Content with fixed height and scroll */}\r\n      <div className=\"flex-1 overflow-hidden min-h-0 bg-background\">\r\n        <div className=\"h-full overflow-y-auto bg-background\">\r\n          <div className=\"p-4 bg-background\">\r\n            {renderTabContent()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnifiedClientInfo;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\ValidationErrorAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\FilterGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\FilterRule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\QuickFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\SavedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\filters\\filterConstants.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2158,2161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2158,2161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Lista est├ítica de propriedades do cliente para filtros\r\nexport const clientProperties = [\r\n  { id: \"name\", name: \"Nome\", type: \"text\" },\r\n  { id: \"email\", name: \"Email\", type: \"text\" },\r\n  { id: \"phone\", name: \"Telefone\", type: \"text\" },\r\n  {\r\n    id: \"status\",\r\n    name: \"Status\",\r\n    type: \"select\",\r\n    options: [\"Ganhos\", \"Perdidos\"],\r\n  },\r\n  {\r\n    id: \"consultationStage\",\r\n    name: \"Etapa da Consulta\",\r\n    type: \"select\",\r\n    options: [\"Agendada\", \"Realizada\", \"Cancelada\"],\r\n  },\r\n  { id: \"source\", name: \"Origem\", type: \"text\" },\r\n  { id: \"city\", name: \"Cidade\", type: \"text\" },\r\n  { id: \"state\", name: \"Estado\", type: \"text\" },\r\n  { id: \"lastContact\", name: \"├Ültimo Contato\", type: \"date\" },\r\n  { id: \"nextContact\", name: \"Pr├│ximo Contato\", type: \"date\" },\r\n];\r\n\r\n// Lista de tags dispon├¡veis\r\nexport const availableTags = [\r\n  \"Entraram\",\r\n  \"Conversaram\",\r\n  \"Agendaram\",\r\n  \"Compareceram\",\r\n  \"Negociaram\",\r\n  \"Postergaram\",\r\n  \"Converteram\",\r\n];\r\n\r\n// Operadores de compara├º├úo dispon├¡veis por tipo de campo\r\nexport const operatorsByType = {\r\n  text: [\r\n    { id: \"equals\", name: \"├® igual a\" },\r\n    { id: \"contains\", name: \"cont├®m\" },\r\n    { id: \"startsWith\", name: \"come├ºa com\" },\r\n    { id: \"endsWith\", name: \"termina com\" },\r\n    { id: \"notEquals\", name: \"n├úo ├® igual a\" },\r\n    { id: \"notContains\", name: \"n├úo cont├®m\" },\r\n  ],\r\n  select: [\r\n    { id: \"equals\", name: \"├® igual a\" },\r\n    { id: \"notEquals\", name: \"n├úo ├® igual a\" },\r\n  ],\r\n  date: [\r\n    { id: \"equals\", name: \"├® igual a\" },\r\n    { id: \"before\", name: \"├® antes de\" },\r\n    { id: \"after\", name: \"├® depois de\" },\r\n    { id: \"between\", name: \"est├í entre\" },\r\n  ],\r\n};\r\n\r\n// Tipos de condi├º├úo para grupos\r\nexport type ConditionType = \"AND\" | \"OR\";\r\n\r\n// Simple interface that avoids complex type inference\r\nexport interface ClientRecord {\r\n  asaas_customer_id?: string | null;\r\n  client_name?: string | null;\r\n  client_size?: string | null;\r\n  client_type?: string | null;\r\n  cpf_cnpj?: string | null;\r\n  created_at?: string;\r\n  email?: string | null;\r\n  id: number;\r\n  kanban_stage?: string | null;\r\n  nome?: string | null;\r\n  nome_pet?: string | null;\r\n  payments?: any;\r\n  porte_pet?: string | null;\r\n  raca_pet?: string | null;\r\n  session_id?: string | null;\r\n  telefone?: string | null;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableBody.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\clients\\table\\ClientsTableStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\AIStoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\AccountManagementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ChatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ClientsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\EvolutionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\KnowledgeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\NotificationsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\ScheduleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\SubscriptionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\dashboard\\UserAIAccessCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\AttendanceSelectionTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[546,549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[546,549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[577,580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[577,580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3416,3419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3416,3419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { X, Plus } from \"lucide-react\";\r\nimport { useAgendaServiceTypes } from \"@/hooks/useAgendaServiceTypes\";\r\n\r\ninterface AttendanceSelectionTabProps {\r\n  state: any;\r\n  updateState: (updates: any) => void;\r\n  constants: any;\r\n  addTag: () => void;\r\n  removeTag: (id: string) => void;\r\n  onPrevious: () => void;\r\n  selectedAgendaId?: string;\r\n}\r\n\r\nexport function AttendanceSelectionTab({\r\n  state,\r\n  updateState,\r\n  constants,\r\n  addTag,\r\n  removeTag,\r\n  onPrevious,\r\n  selectedAgendaId,\r\n}: AttendanceSelectionTabProps) {\r\n  const { serviceTypes, loading } = useAgendaServiceTypes(selectedAgendaId);\r\n  return (\r\n    <>\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"attendanceType\">Tipo de Atendimento</Label>\r\n        <Select \r\n          value={state.attendanceType} \r\n          onValueChange={(value) => updateState({ attendanceType: value })}\r\n        >\r\n          <SelectTrigger id=\"attendanceType\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {loading ? (\r\n              <SelectItem value=\"loading\" disabled>\r\n                Carregando tipos de atendimento...\r\n              </SelectItem>\r\n            ) : serviceTypes.length > 0 ? (\r\n              serviceTypes.map((type) => (\r\n                <SelectItem key={type.value} value={type.value}>\r\n                  {type.label}\r\n                </SelectItem>\r\n              ))\r\n            ) : (\r\n              <SelectItem value=\"no-types\" disabled>\r\n                Nenhum tipo de atendimento dispon├¡vel\r\n              </SelectItem>\r\n            )}\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n      \r\n      {state.attendanceType === \"presencial\" ? (\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"location\">Local do Atendimento *</Label>\r\n          <Input\r\n            id=\"location\"\r\n            value={state.location}\r\n            onChange={(e) => updateState({ location: e.target.value })}\r\n            placeholder=\"Endere├ºo ou local do atendimento\"\r\n            className={state.errors.location ? \"border-destructive\" : \"\"}\r\n          />\r\n          {state.errors.location && (\r\n            <p className=\"text-sm text-destructive\">{state.errors.location}</p>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"meetingLink\">Link da Reuni├úo *</Label>\r\n          <Input\r\n            id=\"meetingLink\"\r\n            value={state.meetingLink}\r\n            onChange={(e) => updateState({ meetingLink: e.target.value })}\r\n            placeholder=\"https://meet.google.com/abc-def-ghi\"\r\n            className={state.errors.meetingLink ? \"border-destructive\" : \"\"}\r\n          />\r\n          {state.errors.meetingLink && (\r\n            <p className=\"text-sm text-destructive\">{state.errors.meetingLink}</p>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label>Tags Personalizadas</Label>\r\n        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n          {(state.tags || []).map((tag: any) => (\r\n            <Badge \r\n              key={tag.id} \r\n              style={{backgroundColor: tag.color}}\r\n              className=\"text-white flex items-center gap-1\"\r\n            >\r\n              {tag.text}\r\n              <button \r\n                type=\"button\" \r\n                onClick={() => removeTag(tag.id)}\r\n                className=\"ml-1 hover:bg-white/20 rounded-full\"\r\n              >\r\n                <X className=\"h-3 w-3\" />\r\n              </button>\r\n            </Badge>\r\n          ))}\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <div className=\"flex-1 flex gap-2\">\r\n            <Input\r\n              placeholder=\"Nova tag...\"\r\n              value={state.newTag}\r\n              onChange={(e) => updateState({ newTag: e.target.value })}\r\n              onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\r\n            />\r\n            <input\r\n              type=\"color\"\r\n              value={state.newTagColor}\r\n              onChange={(e) => updateState({ newTagColor: e.target.value })}\r\n              className=\"w-10 h-10 rounded border cursor-pointer\"\r\n            />\r\n          </div>\r\n          <Button type=\"button\" onClick={addTag} size=\"sm\">\r\n            <Plus className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"eventDescription\">Observa├º├Áes (opcional)</Label>\r\n        <Textarea\r\n          id=\"eventDescription\"\r\n          value={state.eventDescription}\r\n          onChange={(e) => updateState({ eventDescription: e.target.value })}\r\n          placeholder=\"Informa├º├Áes adicionais sobre o evento...\"\r\n          className=\"min-h-[80px]\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center pt-2\">\r\n        <Button type=\"button\" variant=\"outline\" onClick={onPrevious}>\r\n          Anterior\r\n        </Button>\r\n        \r\n        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n          Pronto para salvar\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\BlockedDateForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3019,3022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3019,3022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { X, Plus } from \"lucide-react\";\r\n\r\ninterface BlockedDateFormProps {\r\n  state: any;\r\n  updateState: (updates: any) => void;\r\n  constants: any;\r\n  addTag: () => void;\r\n  removeTag: (id: string) => void;\r\n}\r\n\r\nexport function BlockedDateForm({\r\n  state,\r\n  updateState,\r\n  constants,\r\n  addTag,\r\n  removeTag,\r\n}: BlockedDateFormProps) {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"block-startDateTime\">Data e Hora de In├¡cio *</Label>\r\n        <Input\r\n          id=\"block-startDateTime\"\r\n          type=\"datetime-local\"\r\n          value={state.startDateTime}\r\n          onChange={(e) => updateState({ startDateTime: e.target.value })}\r\n          className={state.errors.startDateTime ? \"border-destructive\" : \"\"}\r\n        />\r\n        {state.errors.startDateTime && (\r\n          <p className=\"text-sm text-destructive\">{state.errors.startDateTime}</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"block-endDateTime\">Data e Hora de T├®rmino</Label>\r\n        <Input\r\n          id=\"block-endDateTime\"\r\n          type=\"datetime-local\"\r\n          value={state.endDateTime}\r\n          onChange={(e) => updateState({ endDateTime: e.target.value })}\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"block-reason\">Motivo do Bloqueio *</Label>\r\n        <Input\r\n          id=\"block-reason\"\r\n          value={state.blockReason}\r\n          onChange={(e) => updateState({ blockReason: e.target.value })}\r\n          placeholder=\"Ex: Feriado, Manuten├º├úo, etc.\"\r\n          className={state.errors.blockReason ? \"border-destructive\" : \"\"}\r\n        />\r\n        {state.errors.blockReason && (\r\n          <p className=\"text-sm text-destructive\">{state.errors.blockReason}</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label>Cor do Evento</Label>\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {constants.COLORS.map((color: string) => (\r\n            <button\r\n              type=\"button\"\r\n              key={color}\r\n              className={cn(\r\n                \"h-8 w-8 rounded-full cursor-pointer transition-transform transform hover:scale-110\",\r\n                state.selectedColor === color &&\r\n                  \"ring-2 ring-offset-2 ring-primary\",\r\n              )}\r\n              style={{ backgroundColor: color }}\r\n              onClick={() => updateState({ selectedColor: color })}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label>Tags Personalizadas</Label>\r\n        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n          {state.tags.map((tag: any) => (\r\n            <Badge \r\n              key={tag.id} \r\n              style={{backgroundColor: tag.color}}\r\n              className=\"text-white flex items-center gap-1\"\r\n            >\r\n              {tag.text}\r\n              <button \r\n                type=\"button\" \r\n                onClick={() => removeTag(tag.id)}\r\n                className=\"ml-1 hover:bg-white/20 rounded-full\"\r\n              >\r\n                <X className=\"h-3 w-3\" />\r\n              </button>\r\n            </Badge>\r\n          ))}\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <div className=\"flex-1 flex gap-2\">\r\n            <Input\r\n              placeholder=\"Nova tag...\"\r\n              value={state.newTag}\r\n              onChange={(e) => updateState({ newTag: e.target.value })}\r\n              onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\r\n            />\r\n            <input\r\n              type=\"color\"\r\n              value={state.newTagColor}\r\n              onChange={(e) => updateState({ newTagColor: e.target.value })}\r\n              className=\"w-10 h-10 rounded border cursor-pointer\"\r\n            />\r\n          </div>\r\n          <Button type=\"button\" onClick={addTag} size=\"sm\">\r\n            <Plus className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"block-notes\">Observa├º├Áes (opcional)</Label>\r\n        <Textarea\r\n          id=\"block-notes\"\r\n          value={state.eventDescription}\r\n          onChange={(e) => updateState({ eventDescription: e.target.value })}\r\n          placeholder=\"Observa├º├Áes adicionais sobre o bloqueio...\"\r\n          className=\"min-h-[80px]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\ClientSelectionTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[296,299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[296,299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Contact } from \"@/types/client\";\r\n\r\ninterface ClientSelectionTabProps {\r\n  state: any;\r\n  updateState: (updates: any) => void;\r\n  filteredContacts: Contact[];\r\n  onSelectClient: (contact: Contact) => void;\r\n  onNewClient: () => void;\r\n  onSaveNewClient: () => void;\r\n  onNext: () => void;\r\n}\r\n\r\nexport function ClientSelectionTab({\r\n  state,\r\n  updateState,\r\n  filteredContacts,\r\n  onSelectClient,\r\n  onNewClient,\r\n  onSaveNewClient,\r\n  onNext,\r\n}: ClientSelectionTabProps) {\r\n  if (!state.isNewClient) {\r\n    return (\r\n      <>\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"client-search\">Buscar Cliente</Label>\r\n          <Input\r\n            id=\"client-search\"\r\n            placeholder=\"Digite nome, email ou telefone\"\r\n            value={state.searchTerm}\r\n            onChange={(e) => updateState({ searchTerm: e.target.value })}\r\n            className={state.errors.client ? \"border-destructive\" : \"\"}\r\n          />\r\n          {state.errors.client && (\r\n            <p className=\"text-sm text-destructive\">{state.errors.client}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"max-h-60 overflow-y-auto border rounded-md\">\r\n          {(filteredContacts || []).length > 0 ? (\r\n            <div className=\"divide-y\">\r\n              {(filteredContacts || []).map((contact) => (\r\n                <div \r\n                  key={contact.id}\r\n                  className=\"p-3 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer\"\r\n                  onClick={() => onSelectClient(contact)}\r\n                >\r\n                  <div className=\"font-medium\">{contact.name}</div>\r\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    {contact.phone}\r\n                    {contact.email && ` ÔÇó ${contact.email}`}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : state.searchTerm ? (\r\n            <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\r\n              Nenhum cliente encontrado\r\n            </div>\r\n          ) : (\r\n            <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\r\n              Digite para buscar clientes\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"flex justify-between items-center pt-2\">\r\n          <Button type=\"button\" variant=\"outline\" onClick={onNewClient}>\r\n            + Novo Cliente\r\n          </Button>\r\n          \r\n          <Button \r\n            type=\"button\" \r\n            onClick={onNext}\r\n            disabled={!state.selectedClient}\r\n          >\r\n            Pr├│ximo\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-4\">\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"new-client-name\">Nome do Cliente *</Label>\r\n          <Input\r\n            id=\"new-client-name\"\r\n            value={state.newClientData.name}\r\n            onChange={(e) => updateState({ \r\n              newClientData: { ...state.newClientData, name: e.target.value }\r\n            })}\r\n            className={state.errors.newClientName ? \"border-destructive\" : \"\"}\r\n          />\r\n          {state.errors.newClientName && (\r\n            <p className=\"text-sm text-destructive\">{state.errors.newClientName}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"new-client-email\">Email</Label>\r\n          <Input\r\n            id=\"new-client-email\"\r\n            type=\"email\"\r\n            value={state.newClientData.email}\r\n            onChange={(e) => updateState({ \r\n              newClientData: { ...state.newClientData, email: e.target.value }\r\n            })}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"new-client-phone\">Telefone *</Label>\r\n          <Input\r\n            id=\"new-client-phone\"\r\n            value={state.newClientData.phone}\r\n            onChange={(e) => updateState({ \r\n              newClientData: { ...state.newClientData, phone: e.target.value }\r\n            })}\r\n            className={state.errors.newClientPhone ? \"border-destructive\" : \"\"}\r\n          />\r\n          {state.errors.newClientPhone && (\r\n            <p className=\"text-sm text-destructive\">{state.errors.newClientPhone}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center pt-2\">\r\n        <Button \r\n          type=\"button\" \r\n          variant=\"outline\" \r\n          onClick={() => {\r\n            updateState({ \r\n              isNewClient: false,\r\n              newClientData: { name: \"\", email: \"\", phone: \"\" }\r\n            });\r\n          }}\r\n        >\r\n          Voltar\r\n        </Button>\r\n        \r\n        <Button \r\n          type=\"button\" \r\n          onClick={onSaveNewClient}\r\n        >\r\n          Pr├│ximo\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\DateTimeSelectionTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[364,367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[364,367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[395,398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[395,398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1977,1980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1977,1980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DateTimeSelectionTabProps {\r\n  state: any;\r\n  updateState: (updates: any) => void;\r\n  constants: any;\r\n  onNext: () => void;\r\n  onPrevious: () => void;\r\n}\r\n\r\nexport function DateTimeSelectionTab({\r\n  state,\r\n  updateState,\r\n  constants,\r\n  onNext,\r\n  onPrevious,\r\n}: DateTimeSelectionTabProps) {\r\n  return (\r\n    <>\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"startDateTime\">Data e Hora de In├¡cio *</Label>\r\n        <Input\r\n          id=\"startDateTime\"\r\n          type=\"datetime-local\"\r\n          value={state.startDateTime}\r\n          onChange={(e) => updateState({ startDateTime: e.target.value })}\r\n          className={state.errors.startDateTime ? \"border-destructive\" : \"\"}\r\n        />\r\n        {state.errors.startDateTime && (\r\n          <p className=\"text-sm text-destructive\">{state.errors.startDateTime}</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"endDateTime\">Data e Hora de T├®rmino (calculado automaticamente)</Label>\r\n        <Input\r\n          id=\"endDateTime\"\r\n          type=\"datetime-local\"\r\n          value={state.endDateTime}\r\n          readOnly\r\n          className=\"bg-gray-100 dark:bg-gray-800\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"duration\">Dura├º├úo</Label>\r\n        <Select \r\n          value={state.selectedDuration.toString()} \r\n          onValueChange={(value) => updateState({ selectedDuration: parseInt(value) })}\r\n        >\r\n          <SelectTrigger id=\"duration\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {constants.DURATIONS.map((duration: any) => (\r\n              <SelectItem key={duration.value} value={duration.value.toString()}>\r\n                {duration.label}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label>Cor do Evento</Label>\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {constants.COLORS.map((color: string) => (\r\n            <button\r\n              type=\"button\"\r\n              key={color}\r\n              className={cn(\r\n                \"h-8 w-8 rounded-full cursor-pointer transition-transform transform hover:scale-110\",\r\n                state.selectedColor === color &&\r\n                  \"ring-2 ring-offset-2 ring-primary\",\r\n              )}\r\n              style={{ backgroundColor: color }}\r\n              onClick={() => updateState({ selectedColor: color })}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"initialStatus\">Status Inicial</Label>\r\n        <Select \r\n          value={state.initialStatus} \r\n          onValueChange={(value) => updateState({ initialStatus: value })}\r\n        >\r\n          <SelectTrigger id=\"initialStatus\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"confirmado\">Confirmado</SelectItem>\r\n            <SelectItem value=\"pendente\">Pendente</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center pt-2\">\r\n        <Button type=\"button\" variant=\"outline\" onClick={onPrevious}>\r\n          Anterior\r\n        </Button>\r\n        \r\n        <Button type=\"button\" onClick={onNext}>\r\n          Pr├│ximo\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\event-form\\ServiceSelectionTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[455,458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[455,458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3618,3621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3618,3621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { useOptimizedHosts } from \"@/hooks/useOptimizedHosts\";\r\nimport { useProducts } from \"@/hooks/useProducts\";\r\n\r\ninterface ServiceSelectionTabProps {\r\n  state: any;\r\n  updateState: (updates: any) => void;\r\n  constants: any;\r\n  onNext: () => void;\r\n  onPrevious: () => void;\r\n}\r\n\r\nexport function ServiceSelectionTab({\r\n  state,\r\n  updateState,\r\n  constants,\r\n  onNext,\r\n  onPrevious,\r\n}: ServiceSelectionTabProps) {\r\n  const { hosts, loading: hostsLoading } = useOptimizedHosts();\r\n  const { products, loading: productsLoading } = useProducts();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"service\">Produto/Servi├ºo *</Label>\r\n        <Select \r\n          value={state.selectedService} \r\n          onValueChange={(value) => updateState({ selectedService: value })}\r\n          disabled={productsLoading}\r\n        >\r\n          <SelectTrigger id=\"service\" className={state.errors.service ? \"border-destructive\" : \"\"}>\r\n            <SelectValue placeholder={productsLoading ? \"Carregando produtos...\" : \"Selecione um produto/servi├ºo\"} />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {products.map((product) => (\r\n              <SelectItem key={product.id} value={product.name}>\r\n                {product.name} {product.price > 0 && `- R$ ${product.price.toFixed(2)}`}\r\n              </SelectItem>\r\n            ))}\r\n            {products.length === 0 && !productsLoading && (\r\n              <div className=\"p-2 text-sm text-gray-500 text-center\">\r\n                Nenhum produto/servi├ºo encontrado\r\n              </div>\r\n            )}\r\n          </SelectContent>\r\n        </Select>\r\n        {state.errors.service && (\r\n          <p className=\"text-sm text-destructive\">{state.errors.service}</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"collaborator\">Anfitri├úo *</Label>\r\n        <Select \r\n          value={state.collaborator} \r\n          onValueChange={(value) => updateState({ collaborator: value })}\r\n          disabled={hostsLoading}\r\n        >\r\n          <SelectTrigger id=\"collaborator\" className={state.errors.collaborator ? \"border-destructive\" : \"\"}>\r\n            <SelectValue placeholder={hostsLoading ? \"Carregando anfitri├Áes...\" : \"Selecione um anfitri├úo\"} />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {(hosts || []).map((host) => (\r\n              <SelectItem key={host.id} value={host.name}>\r\n                {host.name} - {host.role}\r\n              </SelectItem>\r\n            ))}\r\n            {hosts.length === 0 && !hostsLoading && (\r\n              <div className=\"p-2 text-sm text-gray-500 text-center\">\r\n                Nenhum anfitri├úo encontrado\r\n              </div>\r\n            )}\r\n          </SelectContent>\r\n        </Select>\r\n        {state.errors.collaborator && (\r\n          <p className=\"text-sm text-destructive\">{state.errors.collaborator}</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"duration\">Dura├º├úo</Label>\r\n        <Select \r\n          value={state.selectedDuration.toString()} \r\n          onValueChange={(value) => updateState({ selectedDuration: parseInt(value) })}\r\n        >\r\n          <SelectTrigger id=\"duration\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {(constants.DURATIONS || []).map((duration: any) => (\r\n              <SelectItem key={duration.value} value={duration.value.toString()}>\r\n                {duration.label}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center pt-2\">\r\n        <Button type=\"button\" variant=\"outline\" onClick={onPrevious}>\r\n          Anterior\r\n        </Button>\r\n        \r\n        <Button type=\"button\" onClick={onNext}>\r\n          Pr├│ximo\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\AddInstanceDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\QrCodeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\evolution\\StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\examples\\SupabaseDashboardExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[843,846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[843,846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { useConversationMetricsQuery } from '../../hooks/useConversationMetricsQuery';\r\nimport { useFunnelDataQuery } from '../../hooks/useFunnelDataQuery';\r\nimport { useContactsQuery } from '../../hooks/useContactsQuery';\r\nimport { useClientStatsQuery, useDashboardMetricsQuery } from '../../hooks/useClientStatsQuery';\r\nimport { useAIProductsQuery } from '../../hooks/useAIProductsQuery';\r\n\r\nexport const SupabaseDashboardExample: React.FC = () => {\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n  const [filteredData, setFilteredData] = useState<any>(null);\r\n\r\n  const { metrics = [] } = useConversationMetricsQuery();\r\n  const { data: funnelData = [] } = useFunnelDataQuery();\r\n  const { data: contacts = [] } = useContactsQuery();\r\n  const { stats } = useClientStatsQuery();\r\n  const { data: dashboardMetrics } = useDashboardMetricsQuery();\r\n  const { data: products = [] } = useAIProductsQuery();\r\n\r\n  const handleDateFilter = async () => {\r\n    if (!startDate || !endDate) {\r\n      alert('Por favor, selecione as datas de in├¡cio e fim');\r\n      return;\r\n    }\r\n\r\n    // Filter funnel data by date range (client-side filtering)\r\n    const filteredFunnel = funnelData.filter(item => {\r\n      const itemDate = new Date(item.created_at || item.date);\r\n      const start = new Date(startDate);\r\n      const end = new Date(endDate);\r\n      return itemDate >= start && itemDate <= end;\r\n    });\r\n    \r\n    setFilteredData({\r\n      funnel: filteredFunnel,\r\n      dashboard: dashboardMetrics\r\n    });\r\n  };\r\n\r\n  const loadContactsByStage = (stage: string) => {\r\n    const stageContacts = contacts.filter(contact => contact.kanban_stage === stage);\r\n    console.log(`Contatos no est├ígio ${stage}:`, stageContacts);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Dashboard metrics are automatically loaded through React Query\r\n    if (dashboardMetrics) {\r\n      console.log('M├®tricas do Dashboard:', dashboardMetrics);\r\n    }\r\n  }, [dashboardMetrics]);\r\n\r\n  const isLoading = false; // Simplified for now since hooks don't expose loading states consistently\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"text-lg\">Carregando dados do Supabase...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Dashboard Supabase - Exemplo de Integra├º├úo</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n            <Card>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"text-2xl font-bold\">{contacts.length}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Total de Contatos</div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"text-2xl font-bold\">{funnelData.length}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Dados do Funil</div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"text-2xl font-bold\">{metrics.length}</div>\r\n                <div className=\"text-sm text-muted-foreground\">M├®tricas</div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"text-2xl font-bold\">{products.length}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Produtos IA</div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Filtro por Data */}\r\n          <Card className=\"mb-6\">\r\n            <CardHeader>\r\n              <CardTitle>Filtro por Per├¡odo</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end\">\r\n                <div>\r\n                  <Label htmlFor=\"startDate\">Data In├¡cio</Label>\r\n                  <Input\r\n                    id=\"startDate\"\r\n                    type=\"date\"\r\n                    value={startDate}\r\n                    onChange={(e) => setStartDate(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"endDate\">Data Fim</Label>\r\n                  <Input\r\n                    id=\"endDate\"\r\n                    type=\"date\"\r\n                    value={endDate}\r\n                    onChange={(e) => setEndDate(e.target.value)}\r\n                  />\r\n                </div>\r\n                <Button onClick={handleDateFilter}>\r\n                  Filtrar Dados\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* A├º├Áes de Teste */}\r\n          <Card className=\"mb-6\">\r\n            <CardHeader>\r\n              <CardTitle>A├º├Áes de Teste</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => loadContactsByStage('Qualificado')}\r\n                >\r\n                  Contatos Qualificados\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => loadContactsByStage('Proposta enviada')}\r\n                >\r\n                  Propostas Enviadas\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => loadContactsByStage('Nova consulta')}\r\n                >\r\n                  Novas Consultas\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Dados Filtrados */}\r\n          {filteredData && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Dados Filtrados</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <pre className=\"bg-gray-100 p-4 rounded text-sm overflow-auto max-h-96\">\r\n                  {JSON.stringify(filteredData, null, 2)}\r\n                </pre>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Lista de Produtos */}\r\n          {products.length > 0 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Produtos IA Dispon├¡veis</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                  {products.map((product) => (\r\n                    <Card key={product.id}>\r\n                      <CardContent className=\"p-4\">\r\n                        <h3 className=\"font-semibold\">{product.name}</h3>\r\n                        <p className=\"text-sm text-muted-foreground\">{product.description}</p>\r\n                        <p className=\"text-sm mt-2\">{product.description}</p>\r\n                        {product.price && (\r\n                          <p className=\"text-lg font-bold mt-2\">R$ {product.price}</p>\r\n                        )}\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\ai-test\\ChatDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\ai-test\\SuggestedQuestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\faq\\FAQForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\AddMessageDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[721,724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[721,724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Plus } from 'lucide-react';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { KanbanStage } from '@/hooks/useKanbanStages';\r\n\r\ninterface AddMessageDialogProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  newMessage: {\r\n    category: string;\r\n    name: string;\r\n    content: string;\r\n    context: string;\r\n  };\r\n  setNewMessage: React.Dispatch<React.SetStateAction<any>>;\r\n  onAdd: () => void;\r\n  isAdding: boolean;\r\n  stages: KanbanStage[];\r\n  stagesLoading: boolean;\r\n}\r\n\r\nconst AddMessageDialog: React.FC<AddMessageDialogProps> = ({\r\n  open,\r\n  onOpenChange,\r\n  newMessage,\r\n  setNewMessage,\r\n  onAdd,\r\n  isAdding,\r\n  stages,\r\n  stagesLoading,\r\n}) => (\r\n  <Dialog open={open} onOpenChange={onOpenChange}>\r\n    <DialogTrigger asChild>\r\n      <Button>\r\n        <Plus className=\"h-4 w-4 mr-2\" />\r\n        Adicionar Mensagem\r\n      </Button>\r\n    </DialogTrigger>\r\n    <DialogContent className=\"max-w-2xl\">\r\n      <DialogHeader>\r\n        <DialogTitle>Adicionar Nova Mensagem</DialogTitle>\r\n        <DialogDescription>\r\n          Crie uma nova mensagem para a IA utilizar em situa├º├Áes espec├¡ficas.\r\n        </DialogDescription>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4 py-4\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"name\">Nome da Mensagem *</Label>\r\n            <Input\r\n              id=\"name\"\r\n              value={newMessage.name}\r\n              onChange={(e) => setNewMessage({ ...newMessage, name: e.target.value })}\r\n              placeholder=\"Ex: Sauda├º├úo Matinal\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"category\">Etapa do Funil</Label>\r\n            <select\r\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm\"\r\n              value={newMessage.category}\r\n              onChange={(e) => setNewMessage({ ...newMessage, category: e.target.value })}\r\n            >\r\n              {stagesLoading ? (\r\n                <option value=\"\">Carregando etapas...</option>\r\n              ) : (\r\n                stages.map((stage) => (\r\n                  <option key={stage.id} value={stage.title}>\r\n                    {stage.title}\r\n                  </option>\r\n                ))\r\n              )}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <Label htmlFor=\"content\">Conte├║do da Mensagem *</Label>\r\n          <Textarea\r\n            id=\"content\"\r\n            value={newMessage.content}\r\n            onChange={(e) => setNewMessage({ ...newMessage, content: e.target.value })}\r\n            placeholder=\"Digite a mensagem... Use {variavel} para inserir vari├íveis\"\r\n            rows={4}\r\n          />\r\n          <p className=\"text-xs text-gray-500 mt-1\">\r\n            Use {`{nomeVariavel}`} para inserir vari├íveis din├ómicas na mensagem\r\n          </p>\r\n        </div>\r\n\r\n        <div>\r\n          <Label htmlFor=\"context\">Contexto de Uso</Label>\r\n          <Input\r\n            id=\"context\"\r\n            value={newMessage.context}\r\n            onChange={(e) => setNewMessage({ ...newMessage, context: e.target.value })}\r\n            placeholder=\"Ex: Hor├írio comercial, Fora do hor├írio...\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <DialogFooter>\r\n        <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\r\n          Cancelar\r\n        </Button>\r\n        <Button onClick={onAdd} disabled={isAdding}>\r\n          {isAdding ? 'Adicionando...' : 'Adicionar'}\r\n        </Button>\r\n      </DialogFooter>\r\n    </DialogContent>\r\n  </Dialog>\r\n);\r\n\r\nexport default AddMessageDialog;\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\EditMessageDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[669,672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[669,672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { KanbanStage } from '@/hooks/useKanbanStages';\r\n\r\ninterface EditMessageDialogProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  newMessage: {\r\n    category: string;\r\n    name: string;\r\n    content: string;\r\n    context: string;\r\n  };\r\n  setNewMessage: React.Dispatch<React.SetStateAction<any>>;\r\n  onUpdate: () => void;\r\n  isUpdating: boolean;\r\n  stages: KanbanStage[];\r\n  stagesLoading: boolean;\r\n}\r\n\r\nconst EditMessageDialog: React.FC<EditMessageDialogProps> = ({\r\n  open,\r\n  onOpenChange,\r\n  newMessage,\r\n  setNewMessage,\r\n  onUpdate,\r\n  isUpdating,\r\n  stages,\r\n  stagesLoading,\r\n}) => (\r\n  <Dialog open={open} onOpenChange={onOpenChange}>\r\n    <DialogContent className=\"max-w-2xl\">\r\n      <DialogHeader>\r\n        <DialogTitle>Editar Mensagem</DialogTitle>\r\n        <DialogDescription>Modifique o conte├║do da mensagem.</DialogDescription>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4 py-4\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"edit-name\">Nome da Mensagem *</Label>\r\n            <Input\r\n              id=\"edit-name\"\r\n              value={newMessage.name}\r\n              onChange={(e) => setNewMessage({ ...newMessage, name: e.target.value })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"edit-category\">Etapa do Funil</Label>\r\n            <select\r\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm\"\r\n              value={newMessage.category}\r\n              onChange={(e) => setNewMessage({ ...newMessage, category: e.target.value })}\r\n            >\r\n              {stagesLoading ? (\r\n                <option value=\"\">Carregando etapas...</option>\r\n              ) : (\r\n                stages.map((stage) => (\r\n                  <option key={stage.id} value={stage.title}>\r\n                    {stage.title}\r\n                  </option>\r\n                ))\r\n              )}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <Label htmlFor=\"edit-content\">Conte├║do da Mensagem *</Label>\r\n          <Textarea\r\n            id=\"edit-content\"\r\n            value={newMessage.content}\r\n            onChange={(e) => setNewMessage({ ...newMessage, content: e.target.value })}\r\n            rows={4}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <Label htmlFor=\"edit-context\">Contexto de Uso</Label>\r\n          <Input\r\n            id=\"edit-context\"\r\n            value={newMessage.context}\r\n            onChange={(e) => setNewMessage({ ...newMessage, context: e.target.value })}\r\n          />\r\n        </div>\r\n      </div>\r\n      <DialogFooter>\r\n        <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\r\n          Cancelar\r\n        </Button>\r\n        <Button onClick={onUpdate} disabled={isUpdating}>\r\n          {isUpdating ? 'Atualizando...' : 'Atualizar'}\r\n        </Button>\r\n      </DialogFooter>\r\n    </DialogContent>\r\n  </Dialog>\r\n);\r\n\r\nexport default EditMessageDialog;\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\messages\\MessageList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\BasicInfoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\InstructionsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\MessagesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PersonalityPreviewDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PersonalityTemplateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\PreviewSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\personality\\TraitsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ObjectionsManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadObjections'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadObjections, productId]","fix":{"range":[1540,1551],"text":"[loadObjections, productId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit2, Trash2, Save, X, Target } from \"lucide-react\";\nimport { ProductObjection } from \"@/types/product\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface ObjectionsManagerProps {\n  productId?: string;\n  onObjectionsChange?: (objections: ProductObjection[]) => void;\n  initialObjections?: ProductObjection[];\n}\n\nconst ObjectionsManager: React.FC<ObjectionsManagerProps> = ({\n  productId,\n  onObjectionsChange,\n  initialObjections = []\n}) => {\n  const [objections, setObjections] = useState<ProductObjection[]>(initialObjections);\n  const [isAdding, setIsAdding] = useState(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [newObjection, setNewObjection] = useState({ question: \"\", answer: \"\" });\n  const [editObjection, setEditObjection] = useState({ question: \"\", answer: \"\" });\n  const [isLoading, setIsLoading] = useState(false);\n  const { user } = useAuth();\n\n  // Load objections from database when productId is provided\n  useEffect(() => {\n    if (productId) {\n      loadObjections();\n    }\n  }, [productId]);\n\n  const loadObjections = async () => {\n    if (!productId) return;\n    \n    setIsLoading(true);\n    try {\n      // Tentar carregar da tabela product_objections\n      const { data, error } = await supabase\n        .from('product_objections')\n        .select('*')\n        .eq('product_id', productId)\n        .order('created_at', { ascending: true });\n\n      if (error) {\n        // Se a tabela n├úo existir, usar dados do campo objections do produto\n        console.log('Tabela product_objections n├úo encontrada, usando campo objections do produto');\n        const { data: productData, error: productError } = await supabase\n          .from('ai_products')\n          .select('objections')\n          .eq('id', productId)\n          .single();\n        \n        if (productError) throw productError;\n        \n        const legacyObjections = (productData?.objections || []).map((obj: string, index: number) => ({\n          id: `legacy-${index}`,\n          question: obj,\n          answer: 'Resposta n├úo definida'\n        }));\n        \n        setObjections(legacyObjections);\n        onObjectionsChange?.(legacyObjections);\n        setIsLoading(false);\n        return;\n      }\n      \n      const loadedObjections = data?.map(item => ({\n        id: item.id,\n        question: item.question,\n        answer: item.answer\n      })) || [];\n      \n      setObjections(loadedObjections);\n      onObjectionsChange?.(loadedObjections);\n    } catch (error) {\n      console.error('Erro ao carregar obje├º├Áes:', error);\n      toast({\n        title: \"Erro\",\n        description: \"N├úo foi poss├¡vel carregar as obje├º├Áes.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const saveObjection = async (objection: ProductObjection) => {\n    if (!productId || !user) {\n      // Se n├úo h├í productId, retorna com ID tempor├írio\n      return {\n        ...objection,\n        id: `temp-${Date.now()}`\n      };\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('product_objections')\n        .insert({\n          product_id: productId,\n          question: objection.question,\n          answer: objection.answer,\n          created_by: user.id\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.log('Tabela product_objections n├úo dispon├¡vel, usando apenas estado local');\n        return {\n          ...objection,\n          id: `temp-${Date.now()}`\n        };\n      }\n      \n      return {\n        id: data.id,\n        question: data.question,\n        answer: data.answer\n      };\n    } catch (error) {\n      console.error('Erro ao salvar obje├º├úo:', error);\n      return {\n        ...objection,\n        id: `temp-${Date.now()}`\n      };\n    }\n  };\n\n  const updateObjection = async (id: string, objection: Omit<ProductObjection, 'id'>) => {\n    if (!productId) return;\n\n    try {\n      const { error } = await supabase\n        .from('product_objections')\n        .update({\n          question: objection.question,\n          answer: objection.answer\n        })\n        .eq('id', id);\n\n      if (error) {\n        console.log('Tabela product_objections n├úo dispon├¡vel, atualizando apenas estado local');\n        return;\n      }\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Obje├º├úo atualizada com sucesso.\"\n      });\n    } catch (error) {\n      console.log('Erro ao atualizar obje├º├úo, usando apenas estado local:', error);\n    }\n  };\n\n  const deleteObjection = async (id: string) => {\n    if (!productId) return;\n\n    try {\n      const { error } = await supabase\n        .from('product_objections')\n        .delete()\n        .eq('id', id);\n\n      if (error) {\n        console.log('Tabela product_objections n├úo dispon├¡vel, removendo apenas do estado local');\n        return;\n      }\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Obje├º├úo removida com sucesso.\"\n      });\n    } catch (error) {\n      console.log('Erro ao deletar obje├º├úo, removendo apenas do estado local:', error);\n    }\n  };\n\n  const handleAddObjection = async () => {\n    if (!newObjection.question.trim() || !newObjection.answer.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha tanto a obje├º├úo quanto a resposta.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const objectionToAdd = {\n      question: newObjection.question.trim(),\n      answer: newObjection.answer.trim()\n    };\n\n    let savedObjection = objectionToAdd;\n    if (productId) {\n      savedObjection = await saveObjection(objectionToAdd);\n    }\n\n    const updatedObjections = [...objections, savedObjection];\n    setObjections(updatedObjections);\n    onObjectionsChange?.(updatedObjections);\n    \n    setNewObjection({ question: \"\", answer: \"\" });\n    setIsAdding(false);\n  };\n\n  const handleEditObjection = async (id: string) => {\n    if (!editObjection.question.trim() || !editObjection.answer.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha tanto a obje├º├úo quanto a resposta.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const objectionData = {\n      question: editObjection.question.trim(),\n      answer: editObjection.answer.trim()\n    };\n\n    if (productId) {\n      await updateObjection(id, objectionData);\n    }\n\n    const updatedObjections = objections.map(obj => \n      obj.id === id ? { ...obj, ...objectionData } : obj\n    );\n    \n    setObjections(updatedObjections);\n    onObjectionsChange?.(updatedObjections);\n    \n    setEditingId(null);\n    setEditObjection({ question: \"\", answer: \"\" });\n  };\n\n  const handleDeleteObjection = async (id: string) => {\n    if (productId) {\n      await deleteObjection(id);\n    }\n\n    const updatedObjections = objections.filter(obj => obj.id !== id);\n    setObjections(updatedObjections);\n    onObjectionsChange?.(updatedObjections);\n  };\n\n  const startEdit = (objection: ProductObjection) => {\n    setEditingId(objection.id || '');\n    setEditObjection({\n      question: objection.question,\n      answer: objection.answer\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditObjection({ question: \"\", answer: \"\" });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        <Label className=\"text-sm font-medium flex items-center gap-2\">\n          <Target className=\"h-4 w-4\" />\n          Obje├º├Áes Comuns\n        </Label>\n        <div className=\"text-sm text-muted-foreground\">Carregando obje├º├Áes...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Label className=\"text-sm font-medium flex items-center gap-2\">\n        <Target className=\"h-4 w-4\" />\n        Obje├º├Áes Comuns\n      </Label>\n      \n      {/* Lista de obje├º├Áes existentes */}\n      <div className=\"space-y-3\">\n        {objections.map((objection, index) => (\n          <Card key={objection.id || index} className=\"border-l-4 border-l-orange-500\">\n            <CardContent className=\"pt-4\">\n              {editingId === objection.id ? (\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Obje├º├úo</Label>\n                    <Input\n                      value={editObjection.question}\n                      onChange={(e) => setEditObjection(prev => ({ ...prev, question: e.target.value }))}\n                      placeholder=\"Digite a obje├º├úo...\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Resposta</Label>\n                    <Textarea\n                      value={editObjection.answer}\n                      onChange={(e) => setEditObjection(prev => ({ ...prev, answer: e.target.value }))}\n                      placeholder=\"Digite a resposta para esta obje├º├úo...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleEditObjection(objection.id!)}\n                    >\n                      <Save className=\"h-3 w-3 mr-1\" />\n                      Salvar\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={cancelEdit}\n                    >\n                      <X className=\"h-3 w-3 mr-1\" />\n                      Cancelar\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <div>\n                    <Badge variant=\"outline\" className=\"text-xs mb-1\">Obje├º├úo</Badge>\n                    <p className=\"text-sm font-medium\">{objection.question}</p>\n                  </div>\n                  <div>\n                    <Badge variant=\"outline\" className=\"text-xs mb-1\">Resposta</Badge>\n                    <p className=\"text-sm text-muted-foreground\">{objection.answer}</p>\n                  </div>\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => startEdit(objection)}\n                    >\n                      <Edit2 className=\"h-3 w-3 mr-1\" />\n                      Editar\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDeleteObjection(objection.id!)}\n                    >\n                      <Trash2 className=\"h-3 w-3 mr-1\" />\n                      Remover\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Formul├írio para adicionar nova obje├º├úo */}\n      {isAdding ? (\n        <Card className=\"border-dashed\">\n          <CardContent className=\"pt-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <Label className=\"text-xs text-muted-foreground\">Obje├º├úo</Label>\n                <Input\n                  value={newObjection.question}\n                  onChange={(e) => setNewObjection(prev => ({ ...prev, question: e.target.value }))}\n                  placeholder=\"Digite a obje├º├úo...\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs text-muted-foreground\">Resposta</Label>\n                <Textarea\n                  value={newObjection.answer}\n                  onChange={(e) => setNewObjection(prev => ({ ...prev, answer: e.target.value }))}\n                  placeholder=\"Digite a resposta para esta obje├º├úo...\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" onClick={handleAddObjection}>\n                  <Save className=\"h-3 w-3 mr-1\" />\n                  Salvar\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsAdding(false);\n                    setNewObjection({ question: \"\", answer: \"\" });\n                  }}\n                >\n                  <X className=\"h-3 w-3 mr-1\" />\n                  Cancelar\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Button\n          variant=\"outline\"\n          onClick={() => setIsAdding(true)}\n          className=\"w-full border-dashed\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Adicionar Nova Obje├º├úo\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default ObjectionsManager;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3622,3625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3622,3625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport ObjectionsManager from \"./ObjectionsManager\";\r\nimport { ProductObjection } from \"@/types/product\";\r\nimport { \r\n  Plus, \r\n  Minus, \r\n  Package, \r\n  DollarSign, \r\n  FileText, \r\n  Tag,\r\n  Award,\r\n  Target,\r\n  TrendingUp\r\n} from \"lucide-react\";\r\n\r\nconst productSchema = z.object({\r\n  name: z.string().min(1, \"Nome ├® obrigat├│rio\"),\r\n  price: z.number().min(0, \"Pre├ºo deve ser positivo\").optional(),\r\n  description: z.string().optional(),\r\n  category: z.string().optional(),\r\n  benefits: z.array(z.string()).default([]),\r\n  objections: z.array(z.string()).default([]),\r\n  differentials: z.array(z.string()).default([]),\r\n  success_cases: z.array(z.string()).default([]),\r\n  features: z.array(z.string()).default([]),\r\n  icon: z.string().optional(),\r\n  image: z.string().optional(),\r\n  has_combo: z.boolean().default(false),\r\n  has_upgrade: z.boolean().default(false),\r\n  has_promotion: z.boolean().default(false),\r\n  new: z.boolean().default(false),\r\n  popular: z.boolean().default(false),\r\n});\r\n\r\ntype ProductFormData = z.infer<typeof productSchema>;\r\n\r\ninterface ProductFormProps {\r\n  initialData?: Partial<ProductFormData>;\r\n  onSubmit: (data: ProductFormData) => Promise<void>;\r\n  isLoading?: boolean;\r\n  mode: \"create\" | \"edit\";\r\n}\r\n\r\nconst ProductForm: React.FC<ProductFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  isLoading,\r\n  mode\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(\"basic\");\r\n  const [objections, setObjections] = useState<ProductObjection[]>([]);\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm<ProductFormData>({\r\n    resolver: zodResolver(productSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      price: 0,\r\n      description: \"\",\r\n      category: \"\",\r\n      benefits: [],\r\n      objections: [],\r\n      differentials: [],\r\n      success_cases: [],\r\n      features: [],\r\n      icon: \"\",\r\n      image: \"\",\r\n      has_combo: false,\r\n      has_upgrade: false,\r\n      has_promotion: false,\r\n      new: false,\r\n      popular: false,\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const watchedValues = watch();\r\n\r\n  const handleArrayAdd = (field: keyof Pick<ProductFormData, 'benefits' | 'objections' | 'differentials' | 'success_cases' | 'features'>, value: string) => {\r\n    if (value.trim()) {\r\n      const currentArray = watchedValues[field] || [];\r\n      setValue(field, [...currentArray, value.trim()]);\r\n    }\r\n  };\r\n\r\n  const handleArrayRemove = (field: keyof Pick<ProductFormData, 'benefits' | 'objections' | 'differentials' | 'success_cases' | 'features'>, index: number) => {\r\n    const currentArray = watchedValues[field] || [];\r\n    setValue(field, currentArray.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const ArrayInputField = ({ \r\n    field, \r\n    label, \r\n    placeholder, \r\n    icon: Icon \r\n  }: { \r\n    field: keyof Pick<ProductFormData, 'benefits' | 'objections' | 'differentials' | 'success_cases' | 'features'>;\r\n    label: string;\r\n    placeholder: string;\r\n    icon: any;\r\n  }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const items = watchedValues[field] || [];\r\n\r\n    return (\r\n      <div className=\"space-y-3\">\r\n        <Label className=\"text-sm font-medium flex items-center gap-2\">\r\n          <Icon className=\"h-4 w-4\" />\r\n          {label}\r\n        </Label>\r\n        <div className=\"flex gap-2\">\r\n          <Input\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            placeholder={placeholder}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                e.preventDefault();\r\n                handleArrayAdd(field, inputValue);\r\n                setInputValue(\"\");\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={() => {\r\n              handleArrayAdd(field, inputValue);\r\n              setInputValue(\"\");\r\n            }}\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {items.map((item: string, index: number) => (\r\n            <Badge\r\n              key={index}\r\n              variant=\"secondary\"\r\n              className=\"flex items-center gap-2 px-3 py-1\"\r\n            >\r\n              {item}\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"h-auto p-0 hover:bg-transparent\"\r\n                onClick={() => handleArrayRemove(field, index)}\r\n              >\r\n                <Minus className=\"h-3 w-3\" />\r\n              </Button>\r\n            </Badge>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"basic\">B├ísico</TabsTrigger>\r\n          <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\r\n          <TabsTrigger value=\"marketing\">Marketing</TabsTrigger>\r\n          <TabsTrigger value=\"settings\">Configura├º├Áes</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"basic\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Package className=\"h-5 w-5\" />\r\n                Informa├º├Áes B├ísicas\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"name\">Nome do Produto/Servi├ºo *</Label>\r\n                <Input\r\n                  id=\"name\"\r\n                  {...register(\"name\")}\r\n                  placeholder=\"Ex: Consultoria em Marketing Digital\"\r\n                />\r\n                {errors.name && (\r\n                  <p className=\"text-sm text-destructive mt-1\">{errors.name.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"price\" className=\"flex items-center gap-2\">\r\n                  <DollarSign className=\"h-4 w-4\" />\r\n                  Pre├ºo (R$) *\r\n                </Label>\r\n                <Input\r\n                  id=\"price\"\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  {...register(\"price\", { valueAsNumber: true })}\r\n                  placeholder=\"0,00\"\r\n                />\r\n                {errors.price && (\r\n                  <p className=\"text-sm text-destructive mt-1\">{errors.price.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"category\" className=\"flex items-center gap-2\">\r\n                  <Tag className=\"h-4 w-4\" />\r\n                  Categoria\r\n                </Label>\r\n                <Input\r\n                  id=\"category\"\r\n                  {...register(\"category\")}\r\n                  placeholder=\"Ex: Consultoria, Software, Curso...\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"description\" className=\"flex items-center gap-2\">\r\n                  <FileText className=\"h-4 w-4\" />\r\n                  Descri├º├úo\r\n                </Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  {...register(\"description\")}\r\n                  placeholder=\"Descreva seu produto ou servi├ºo...\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"details\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Award className=\"h-5 w-5\" />\r\n                Benef├¡cios e Diferenciais\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <ArrayInputField\r\n                field=\"benefits\"\r\n                label=\"Benef├¡cios\"\r\n                placeholder=\"Adicione um benef├¡cio...\"\r\n                icon={TrendingUp}\r\n              />\r\n              \r\n              <ArrayInputField\r\n                field=\"differentials\"\r\n                label=\"Diferenciais\"\r\n                placeholder=\"Adicione um diferencial...\"\r\n                icon={Award}\r\n              />\r\n\r\n              <ArrayInputField\r\n                field=\"features\"\r\n                label=\"Funcionalidades\"\r\n                placeholder=\"Adicione uma funcionalidade...\"\r\n                icon={Package}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"marketing\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Target className=\"h-5 w-5\" />\r\n                Marketing e Vendas\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <ObjectionsManager\r\n                productId={initialData?.id}\r\n                onObjectionsChange={setObjections}\r\n              />\r\n              \r\n              <ArrayInputField\r\n                field=\"success_cases\"\r\n                label=\"Casos de Sucesso\"\r\n                placeholder=\"Adicione um caso de sucesso...\"\r\n                icon={Award}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"settings\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Tag className=\"h-5 w-5\" />\r\n                Configura├º├Áes do Produto\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"has_promotion\"\r\n                  checked={watchedValues.has_promotion}\r\n                  onCheckedChange={(checked) => setValue(\"has_promotion\", checked)}\r\n                />\r\n                <Label htmlFor=\"has_promotion\">Em promo├º├úo</Label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"has_combo\"\r\n                  checked={watchedValues.has_combo}\r\n                  onCheckedChange={(checked) => setValue(\"has_combo\", checked)}\r\n                />\r\n                <Label htmlFor=\"has_combo\">Oferece combo</Label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"has_upgrade\"\r\n                  checked={watchedValues.has_upgrade}\r\n                  onCheckedChange={(checked) => setValue(\"has_upgrade\", checked)}\r\n                />\r\n                <Label htmlFor=\"has_upgrade\">Oferece upgrade</Label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"new\"\r\n                  checked={watchedValues.new}\r\n                  onCheckedChange={(checked) => setValue(\"new\", checked)}\r\n                />\r\n                <Label htmlFor=\"new\">Produto novo</Label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"popular\"\r\n                  checked={watchedValues.popular}\r\n                  onCheckedChange={(checked) => setValue(\"popular\", checked)}\r\n                />\r\n                <Label htmlFor=\"popular\">Produto popular</Label>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"icon\">├ìcone (URL)</Label>\r\n                <Input\r\n                  id=\"icon\"\r\n                  {...register(\"icon\")}\r\n                  placeholder=\"https://exemplo.com/icone.png\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"image\">Imagem (URL)</Label>\r\n                <Input\r\n                  id=\"image\"\r\n                  {...register(\"image\")}\r\n                  placeholder=\"https://exemplo.com/imagem.jpg\"\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      <div className=\"flex justify-end gap-3 pt-4 border-t\">\r\n        <Button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? \"Salvando...\" : mode === \"create\" ? \"Criar Produto\" : \"Atualizar Produto\"}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ProductForm;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\products\\ProductsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\AddStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\EditStageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\stages\\StageFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIMessagesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIPersonalityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AIStagesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AITestTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\AgendaTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\DaySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\FAQTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\HostsTab.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHosts'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchHosts, user]","fix":{"range":[1840,1846],"text":"[fetchHosts, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Plus, User, Edit, Trash2, Calendar, X } from \"lucide-react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { Database } from \"@/integrations/supabase/types\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\r\nimport { useAgendas } from '@/hooks/useAgendas';\r\n\r\ntype Host = Database['public']['Tables']['employees']['Row'];\r\ntype Agenda = {\r\n  id: string | number;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  host: string;\r\n  duration: number;\r\n  breakTime: number;\r\n};\r\n\r\nconst HostsTab = () => {\r\n  const { user } = useAuth();\r\n  const { agendas: supabaseAgendas } = useAgendas();\r\n  const [hosts, setHosts] = useState<Host[]>([]);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [editingHost, setEditingHost] = useState<Host | null>(null);\r\n  const [selectedAgendas, setSelectedAgendas] = useState<Agenda[]>([]);\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    role: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchHosts();\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchHosts = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user?.id)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setHosts(data as Host[] || []);\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar anfitri├Áes:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"N├úo foi poss├¡vel carregar os anfitri├Áes.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.name || !formData.role) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Nome e fun├º├úo s├úo obrigat├│rios.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Here you would also handle saving the `selectedAgendas` association\r\n      console.log(\"Salvando anfitri├úo com as agendas:\", selectedAgendas.map(a => a.id));\r\n\r\n      if (editingHost) {\r\n        const { error } = await supabase\r\n          .from(\"employees\")\r\n          .update({ name: formData.name, role: formData.role, description: formData.description })\r\n          .eq(\"id\", editingHost.id);\r\n        if (error) throw error;\r\n        toast({ title: \"Sucesso\", description: \"Anfitri├úo atualizado com sucesso!\" });\r\n      } else {\r\n        const { error } = await supabase\r\n          .from(\"employees\")\r\n          .insert({ name: formData.name, role: formData.role, description: formData.description, user_id: user?.id })\r\n          .select()\r\n          .single();\r\n        if (error) throw error;\r\n        toast({ title: \"Sucesso\", description: \"Anfitri├úo adicionado com sucesso!\" });\r\n      }\r\n\r\n      resetForm();\r\n      setIsDialogOpen(false);\r\n      fetchHosts();\r\n    } catch (error) {\r\n      console.error(\"Erro ao salvar anfitri├úo:\", error);\r\n      toast({ title: \"Erro\", description: \"N├úo foi poss├¡vel salvar o anfitri├úo.\", variant: \"destructive\" });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (host: Host) => {\r\n    setEditingHost(host);\r\n    setFormData({ name: host.name, role: host.role, description: host.description || \"\" });\r\n    // In a real scenario, you would fetch and set the agendas associated with this host\r\n    setSelectedAgendas([]); \r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (!confirm(\"Tem certeza que deseja excluir este anfitri├úo?\")) return;\r\n    try {\r\n      const { error } = await supabase.from(\"employees\").delete().eq(\"id\", id);\r\n      if (error) throw error;\r\n      toast({ title: \"Sucesso\", description: \"Anfitri├úo exclu├¡do com sucesso!\" });\r\n      fetchHosts();\r\n    } catch (error) {\r\n      console.error(\"Erro ao excluir anfitri├úo:\", error);\r\n      toast({ title: \"Erro\", description: \"N├úo foi poss├¡vel excluir o anfitri├úo.\", variant: \"destructive\" });\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({ name: \"\", role: \"\", description: \"\" });\r\n    setSelectedAgendas([]);\r\n    setEditingHost(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-foreground\">Anfitri├Áes</h3>\r\n          <p className=\"text-sm text-muted-foreground\">Gerencie os anfitri├Áes e suas agendas associadas.</p>\r\n        </div>\r\n        <Dialog open={isDialogOpen} onOpenChange={(open) => { setIsDialogOpen(open); if (!open) resetForm(); }}>\r\n          <DialogTrigger asChild>\r\n            <Button><Plus className=\"h-4 w-4 mr-2\" />Adicionar Anfitri├úo</Button>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"max-w-2xl\">\r\n            <DialogHeader>\r\n              <DialogTitle>{editingHost ? \"Editar Anfitri├úo\" : \"Novo Anfitri├úo\"}</DialogTitle>\r\n            </DialogHeader>\r\n            <form onSubmit={handleSubmit} className=\"space-y-6 pt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\"><Label htmlFor=\"name\">Nome *</Label><Input id=\"name\" value={formData.name} onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))} required /></div>\r\n                <div className=\"space-y-2\"><Label htmlFor=\"role\">Fun├º├úo *</Label><Input id=\"role\" value={formData.role} onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))} required /></div>\r\n              </div>\r\n              <div className=\"space-y-2\"><Label htmlFor=\"description\">Descri├º├úo</Label><Textarea id=\"description\" value={formData.description} onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))} /></div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label>Agendas Associadas</Label>\r\n                <Popover>\r\n                  <PopoverTrigger asChild>\r\n                    <Button variant=\"outline\" className=\"w-full justify-start h-auto min-h-10\">\r\n                      {selectedAgendas.length > 0 ? (\r\n                        <div className=\"flex gap-1 flex-wrap\">\r\n                          {selectedAgendas.map(agenda => (\r\n                            <Badge key={agenda.id} variant=\"secondary\">{agenda.title}</Badge>\r\n                          ))}\r\n                        </div>\r\n                      ) : \"Selecione as agendas\"}\r\n                    </Button>\r\n                  </PopoverTrigger>\r\n                  <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\r\n                    <Command>\r\n                      <CommandInput placeholder=\"Buscar agenda...\" />\r\n                      <CommandList>\r\n                        <CommandEmpty>Nenhuma agenda encontrada.</CommandEmpty>\r\n                        <CommandGroup>\r\n                          {(supabaseAgendas || []).map(agenda => {\r\n                            const mappedAgenda = {\r\n                              id: agenda.id,\r\n                              title: agenda.name,\r\n                              description: agenda.description || '',\r\n                              category: agenda.category || '',\r\n                              host: '',\r\n                              duration: agenda.duration_minutes || 60,\r\n                              breakTime: agenda.buffer_time_minutes || 0\r\n                            };\r\n                            return (\r\n                              <CommandItem\r\n                                key={agenda.id}\r\n                                onSelect={() => {\r\n                                  setSelectedAgendas(current => \r\n                                    current.some(a => a.id === agenda.id)\r\n                                      ? current.filter(a => a.id !== agenda.id)\r\n                                      : [...current, mappedAgenda]\r\n                                  )\r\n                                }}\r\n                              >\r\n                                <div className={`mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary ${selectedAgendas.some(a => a.id === agenda.id) ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"}`}>\r\n                                  <X className=\"h-4 w-4\" />\r\n                                </div>\r\n                                {agenda.name}\r\n                              </CommandItem>\r\n                            );\r\n                           })}\r\n                        </CommandGroup>\r\n                      </CommandList>\r\n                    </Command>\r\n                  </PopoverContent>\r\n                </Popover>\r\n              </div>\r\n\r\n              <DialogFooter><Button type=\"button\" variant=\"outline\" onClick={() => { setIsDialogOpen(false); resetForm(); }}>Cancelar</Button><Button type=\"submit\">{editingHost ? \"Atualizar\" : \"Adicionar\"}</Button></DialogFooter>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {hosts.map((host) => (\r\n          <Card key={host.id} className=\"hover:shadow-md transition-shadow\">\r\n            <CardHeader>\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <User className=\"h-6 w-6 text-primary\" />\r\n                  <div>\r\n                    <CardTitle className=\"text-base\">{host.name}</CardTitle>\r\n                    <Badge variant=\"secondary\" className=\"text-xs mt-1\">{host.role}</Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex gap-1\">\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(host)}><Edit className=\"h-4 w-4\" /></Button>\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete(host.id)}><Trash2 className=\"h-4 w-4\" /></Button>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              {host.description && <p className=\"text-sm text-muted-foreground\">{host.description}</p>}\r\n              <div>\r\n                <div className=\"flex items-center gap-2 mb-2\"><Calendar className=\"h-4 w-4 text-muted-foreground\" /><span className=\"text-sm font-medium\">Agendas:</span></div>\r\n                <div className=\"flex flex-wrap gap-1\">\r\n                  <Badge variant=\"outline\">Consulta de Terapia</Badge>\r\n                  <Badge variant=\"outline\">Aula de Yoga</Badge>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {hosts.length === 0 && (\r\n        <div className=\"text-center py-12\"><User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" /><h3 className=\"text-lg font-medium\">Nenhum anfitri├úo cadastrado</h3><p className=\"text-sm text-muted-foreground\">Comece adicionando anfitri├Áes ├á sua equipe.</p></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HostsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\MessagesHybridDesign.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\ProductSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\ProductsTab.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":47,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":47,"endColumn":17,"fix":{"range":[1912,2111],"text":"const filtered = products.filter(product =>\r\n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2186,2189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2186,2189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2199,2202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2199,2202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2920,2923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2920,2923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3487,3490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3487,3490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\r\nimport { Package } from \"lucide-react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useProducts, useCreateProductMutation, useUpdateProductMutation, useDeleteProductMutation } from \"@/hooks/useProducts\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Product } from \"@/types/product\";\r\n\r\n// Import new components\r\nimport ProductForm from \"@/components/knowledge/products/ProductForm\";\r\nimport ProductCard from \"@/components/knowledge/products/ProductCard\";\r\nimport ProductListView from \"@/components/knowledge/products/ProductListView\";\r\nimport ProductsHeader from \"@/components/knowledge/products/ProductsHeader\";\r\n\r\ntype ViewMode = \"grid\" | \"list\";\r\ntype SortBy = \"name\" | \"price\" | \"created_at\";\r\ntype SortOrder = \"asc\" | \"desc\";\r\n\r\nconst ProductsTab = () => {\r\n  const { toast } = useToast();\r\n  \r\n  // Dialog states\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\r\n  \r\n  // View and filtering states\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [viewMode, setViewMode] = useState<ViewMode>(\"grid\");\r\n  const [sortBy, setSortBy] = useState<SortBy>(\"name\");\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>(\"asc\");\r\n\r\n  // Use Supabase hooks\r\n  const { products = [], loading } = useProducts();\r\n  const createProductMutation = useCreateProductMutation();\r\n  const updateProductMutation = useUpdateProductMutation();\r\n  const deleteProductMutation = useDeleteProductMutation();\r\n\r\n  // Filtered and sorted products\r\n  const filteredAndSortedProducts = useMemo(() => {\r\n    let filtered = products.filter(product =>\r\n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    // Sort products\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (sortBy) {\r\n        case \"name\":\r\n          aValue = a.name || \"\";\r\n          bValue = b.name || \"\";\r\n          break;\r\n        case \"price\":\r\n          aValue = a.price || 0;\r\n          bValue = b.price || 0;\r\n          break;\r\n        case \"created_at\":\r\n          aValue = new Date(a.created_at || 0);\r\n          bValue = new Date(b.created_at || 0);\r\n          break;\r\n        default:\r\n          return 0;\r\n      }\r\n\r\n      if (sortOrder === \"asc\") {\r\n        return aValue > bValue ? 1 : -1;\r\n      } else {\r\n        return aValue < bValue ? 1 : -1;\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  }, [products, searchTerm, sortBy, sortOrder]);\r\n\r\n  const handleCreateProduct = async (data: any) => {\r\n    try {\r\n      await createProductMutation.mutateAsync(data);\r\n      setIsAddDialogOpen(false);\r\n      toast({\r\n        title: \"Produto criado\",\r\n        description: \"O produto foi criado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao criar produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const handleUpdateProduct = async (data: any) => {\r\n    try {\r\n      await updateProductMutation.mutateAsync({\r\n        id: editingProduct!.id,\r\n        ...data\r\n      });\r\n      setEditingProduct(null);\r\n      setIsEditDialogOpen(false);\r\n      toast({\r\n        title: \"Produto atualizado\",\r\n        description: \"O produto foi atualizado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao atualizar produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = async (id: string) => {\r\n    try {\r\n      await deleteProductMutation.mutateAsync(id);\r\n      toast({\r\n        title: \"Produto removido\",\r\n        description: \"O produto foi removido com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao remover produto.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSortChange = (newSortBy: SortBy, newSortOrder: SortOrder) => {\r\n    setSortBy(newSortBy);\r\n    setSortOrder(newSortOrder);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Package className=\"h-5 w-5\" />\r\n            <h2 className=\"text-xl font-semibold\">Produtos/Servi├ºos</h2>\r\n          </div>\r\n          <Skeleton className=\"h-10 w-32\" />\r\n        </div>\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n          {[1, 2, 3].map((i) => (\r\n            <Card key={i}>\r\n              <div className=\"p-4\">\r\n                <Skeleton className=\"h-4 w-3/4 mb-2\" />\r\n                <Skeleton className=\"h-8 w-1/2 mb-2\" />\r\n                <Skeleton className=\"h-4 w-1/3\" />\r\n              </div>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with search and controls */}\r\n      <ProductsHeader\r\n        searchTerm={searchTerm}\r\n        onSearchChange={setSearchTerm}\r\n        onAddProduct={() => setIsAddDialogOpen(true)}\r\n        viewMode={viewMode}\r\n        onViewModeChange={setViewMode}\r\n        sortBy={sortBy}\r\n        sortOrder={sortOrder}\r\n        onSortChange={handleSortChange}\r\n        totalProducts={products.length}\r\n        filteredProducts={filteredAndSortedProducts.length}\r\n      />\r\n\r\n      {/* Products display */}\r\n      {filteredAndSortedProducts.length > 0 ? (\r\n        viewMode === \"grid\" ? (\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n            {filteredAndSortedProducts.map((product) => (\r\n              <ProductCard\r\n                key={product.id}\r\n                product={product}\r\n                onEdit={handleEditProduct}\r\n                onDelete={handleDeleteProduct}\r\n                isDeleting={deleteProductMutation.isPending}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <ProductListView\r\n            products={filteredAndSortedProducts}\r\n            onEdit={handleEditProduct}\r\n            onDelete={handleDeleteProduct}\r\n            isDeleting={deleteProductMutation.isPending}\r\n          />\r\n        )\r\n      ) : (\r\n        <Card>\r\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n            <Package className=\"h-16 w-16 text-muted-foreground mb-4 opacity-20\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {searchTerm ? \"Nenhum produto encontrado\" : \"Nenhum produto cadastrado\"}\r\n            </h3>\r\n            <p className=\"text-muted-foreground text-center mb-4\">\r\n              {searchTerm \r\n                ? \"Tente ajustar sua busca ou limpe os filtros.\"\r\n                : \"Comece criando seu primeiro produto ou servi├ºo.\"\r\n              }\r\n            </p>\r\n            {!searchTerm && (\r\n              <button\r\n                onClick={() => setIsAddDialogOpen(true)}\r\n                className=\"text-primary hover:underline\"\r\n              >\r\n                Criar primeiro produto\r\n              </button>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Add Product Dialog */}\r\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Criar Novo Produto</DialogTitle>\r\n          </DialogHeader>\r\n          <ProductForm\r\n            mode=\"create\"\r\n            onSubmit={handleCreateProduct}\r\n            isLoading={createProductMutation.isPending}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit Product Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Editar Produto</DialogTitle>\r\n          </DialogHeader>\r\n          {editingProduct && (\r\n            <ProductForm\r\n              mode=\"edit\"\r\n              initialData={editingProduct}\r\n              onSubmit={handleUpdateProduct}\r\n              isLoading={updateProductMutation.isPending}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\tabs\\WebsitesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\AddWebsiteDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\WebsiteCard.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":9,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":9,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Globe, Eye, RefreshCw, Trash2, ExternalLink } from 'lucide-react';\r\nimport { type Website } from '@/hooks/useWebsiteManager';\r\n\r\nexport const getStatusBadge = (status: Website['status']) => {\r\n  switch (status) {\r\n    case 'indexed':\r\n      return (\r\n        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\r\n          Indexado\r\n        </Badge>\r\n      );\r\n    case 'pending':\r\n      return (\r\n        <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\r\n          Pendente\r\n        </Badge>\r\n      );\r\n    case 'indexing':\r\n      return (\r\n        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n          Indexando\r\n        </Badge>\r\n      );\r\n    case 'error':\r\n      return (\r\n        <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800\">\r\n          Erro\r\n        </Badge>\r\n      );\r\n    default:\r\n      return <Badge variant=\"outline\">Desconhecido</Badge>;\r\n  }\r\n};\r\n\r\ninterface WebsiteCardProps {\r\n  website: Website;\r\n  onPreview: (website: Website) => void;\r\n  onRefresh: (id: string) => void;\r\n  onDelete: (id: string) => void;\r\n  isRefreshing?: boolean;\r\n  isDeleting?: boolean;\r\n}\r\n\r\nconst WebsiteCard: React.FC<WebsiteCardProps> = ({\r\n  website,\r\n  onPreview,\r\n  onRefresh,\r\n  onDelete,\r\n  isRefreshing,\r\n  isDeleting,\r\n}) => (\r\n  <Card className=\"hover:shadow-md transition-shadow\">\r\n    <CardHeader className=\"pb-2\">\r\n      <div className=\"flex justify-between items-start\">\r\n        <CardTitle className=\"text-base flex items-center\">\r\n          <Globe className=\"h-4 w-4 mr-2 text-blue-500\" />\r\n          <span className=\"truncate\">{website.title || website.url}</span>\r\n        </CardTitle>\r\n        <div className=\"flex gap-1\">\r\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => onPreview(website)}>\r\n            <Eye className=\"h-4 w-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => onRefresh(website.id)}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => onDelete(website.id)}\r\n            className=\"text-red-500 hover:text-red-600\"\r\n            disabled={isDeleting}\r\n          >\r\n            <Trash2 className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </CardHeader>\r\n    <CardContent>\r\n      <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\r\n        {website.description || 'Sem descri├º├úo'}\r\n      </p>\r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          {getStatusBadge(website.status)}\r\n          <Badge variant=\"outline\">{website.category || 'Geral'}</Badge>\r\n        </div>\r\n        <div className=\"text-xs text-gray-500\">\r\n          <div>P├íginas: {website.pages_indexed || 0}</div>\r\n          <div>\r\n            ├Ültima atualiza├º├úo:{' '}\r\n            {website.last_crawled\r\n              ? new Date(website.last_crawled).toLocaleDateString('pt-BR')\r\n              : 'Nunca'}\r\n          </div>\r\n        </div>\r\n        <a\r\n          href={website.url}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"flex items-center text-blue-500 hover:text-blue-600 text-xs\"\r\n        >\r\n          <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n          Visitar site\r\n        </a>\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport const WebsiteCardSkeleton = () => (\r\n  <Card>\r\n    <CardContent className=\"p-4\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <Skeleton className=\"h-5 w-48\" />\r\n        <div className=\"flex gap-2\">\r\n          <Skeleton className=\"h-8 w-8\" />\r\n          <Skeleton className=\"h-8 w-8\" />\r\n          <Skeleton className=\"h-8 w-8\" />\r\n        </div>\r\n      </div>\r\n      <Skeleton className=\"h-4 w-full mb-2\" />\r\n      <div className=\"flex gap-2 mb-2\">\r\n        <Skeleton className=\"h-6 w-16\" />\r\n        <Skeleton className=\"h-6 w-20\" />\r\n      </div>\r\n      <div className=\"flex justify-between text-sm\">\r\n        <Skeleton className=\"h-4 w-24\" />\r\n        <Skeleton className=\"h-4 w-32\" />\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport default WebsiteCard;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\knowledge\\websites\\WebsitePreviewDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\SemanticMemoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\DateSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\MemoriesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\MemoryItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Star, StarOff } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface Memory {\r\n  id: number;\r\n  message: string;\r\n  memory_type: string;\r\n  created_at: string;\r\n  importance?: number;\r\n  entities?: Array<{ name: string }>;\r\n  context?: Record<string, any>;\r\n}\r\n\r\ninterface Props {\r\n  memory: Memory;\r\n  onToggleImportance: (id: number, importance: number) => void;\r\n}\r\n\r\nexport function MemoryItem({ memory, onToggleImportance }: Props) {\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        'mb-4 transition-all duration-200',\r\n        memory.importance >= 4 ? 'border-amber-400 dark:border-amber-500' : ''\r\n      )}\r\n    >\r\n      <CardHeader className=\"pb-2\">\r\n        <div className=\"flex justify-between items-start\">\r\n          <div>\r\n            <CardTitle className=\"text-base\">\r\n              {memory.memory_type === 'episodic' ? 'Mem├│ria Epis├│dica' : 'Mensagem'}\r\n            </CardTitle>\r\n            <CardDescription className=\"text-xs\">\r\n              {format(new Date(memory.created_at), 'dd MMM yyyy HH:mm:ss', { locale: ptBR })}\r\n            </CardDescription>\r\n          </div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={() => onToggleImportance(memory.id, memory.importance || 0)}\r\n            title={memory.importance && memory.importance >= 4 ? 'Remover import├óncia' : 'Marcar como importante'}\r\n          >\r\n            {memory.importance && memory.importance >= 4 ? (\r\n              <Star className=\"h-4 w-4 text-amber-500\" />\r\n            ) : (\r\n              <StarOff className=\"h-4 w-4\" />\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <p className=\"text-sm whitespace-pre-wrap\">{memory.message}</p>\r\n        {memory.entities && memory.entities.length > 0 && (\r\n          <div className=\"mt-2\">\r\n            <p className=\"text-xs text-muted-foreground mb-1\">Entidades:</p>\r\n            <div className=\"flex flex-wrap gap-1\">\r\n              {memory.entities.map((entity, idx) => (\r\n                <Badge key={idx} variant=\"outline\" className=\"text-xs\">\r\n                  {entity.name}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n      {memory.context && Object.keys(memory.context).length > 0 && (\r\n        <CardFooter className=\"pt-0\">\r\n          <div className=\"w-full\">\r\n            <p className=\"text-xs text-muted-foreground mb-1\">Contexto:</p>\r\n            <div className=\"text-xs bg-muted p-2 rounded-md\">\r\n              <pre className=\"whitespace-pre-wrap\">\r\n                {JSON.stringify(memory.context, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </CardFooter>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\PeriodSearchTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\TimelineItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarIcon, Clock } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\n\r\nexport interface TimelineEvent {\r\n  id: number;\r\n  date: string;\r\n  description: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface GroupedTimelineDay {\r\n  date: string;\r\n  formattedDate: string;\r\n  events: TimelineEvent[];\r\n}\r\n\r\nexport function TimelineItem({ day }: { day: GroupedTimelineDay }) {\r\n  return (\r\n    <div className=\"mb-8\">\r\n      <div className=\"sticky top-0 bg-background z-10 py-2\">\r\n        <h3 className=\"text-lg font-medium flex items-center\">\r\n          <CalendarIcon className=\"mr-2 h-5 w-5\" />\r\n          {day.formattedDate}\r\n        </h3>\r\n      </div>\r\n      <div className=\"ml-6 border-l pl-6 pt-2\">\r\n        {day.events.map((event) => (\r\n          <div key={`${event.id}-${event.date}`} className=\"mb-4 relative\">\r\n            <div className=\"absolute -left-9 mt-1 w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\r\n              <Clock className=\"h-3 w-3 text-primary-foreground\" />\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <span className=\"text-sm font-medium\">\r\n                {format(new Date(event.date), 'HH:mm', { locale: ptBR })}\r\n              </span>\r\n              <p className=\"text-sm mt-1\">{event.description}</p>\r\n              {event.details && (\r\n                <div className=\"mt-1 text-xs text-muted-foreground bg-muted p-2 rounded-md\">\r\n                  <pre className=\"whitespace-pre-wrap\">\r\n                    {JSON.stringify(event.details, null, 2)}\r\n                  </pre>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\memory\\episodic\\TimelineTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\AverageClosingTimeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\AverageResponseStartCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ChatMetricsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1229,1232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1229,1232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from \"react\";\r\nimport { useConsolidatedMetrics } from \"@/hooks/useConsolidatedMetrics\";\r\nimport { useRealTimeMetrics } from \"@/hooks/useRealTimeMetrics\";\r\nimport { useValidatedData } from \"@/hooks/useValidatedData\";\r\nimport { useMetricsFilters } from \"@/hooks/useMetricsFilters\";\r\n\r\n// Enhanced components\r\nimport MetricsFilters from \"./enhanced/MetricsFilters\";\r\nimport MetricCard from \"./enhanced/MetricCard\";\r\nimport NewLeadsOverTimeChart from \"./enhanced/NewLeadsOverTimeChart\";\r\nimport ConversationsChart from \"./enhanced/ConversationsChart\";\r\nimport AdManagerSection from \"./enhanced/AdManagerSection\";\r\nimport KanbanStagesFunnelChart from \"./KanbanStagesFunnelChart\";\r\n\r\n// Imported refactored sections\r\nimport MetricsHeader from \"./sections/MetricsHeader\";\r\nimport SectionHeader from \"./sections/SectionHeader\";\r\n\r\n// Icons\r\nimport { MessageCircle, Users, Target, Clock, TrendingUp, DollarSign, Star, RefreshCw, AlertTriangle } from \"lucide-react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n\r\ninterface ChatMetricsTabProps {\r\n  stats: any;\r\n  metrics: any;\r\n  loading: boolean;\r\n}\r\n\r\nconst ChatMetricsTab: React.FC<ChatMetricsTabProps> = ({\r\n  stats,\r\n  metrics,\r\n  loading,\r\n}) => {\r\n  // Novos hooks consolidados\r\n  const {\r\n    metrics: consolidatedMetrics,\r\n    timeSeriesData,\r\n    leadsBySource,\r\n    loading: consolidatedLoading,\r\n    error: consolidatedError,\r\n    filters,\r\n  } = useConsolidatedMetrics();\r\n  \r\n  // Real-time updates\r\n  const { lastUpdate, updateCount, forceRefresh, isConnected } = useRealTimeMetrics();\r\n  \r\n  // Valida├º├úo de dados\r\n  const {\r\n    metrics: validatedMetrics,\r\n    timeSeries: validatedTimeSeries,\r\n    dataQuality,\r\n    allErrors,\r\n    allWarnings,\r\n    isDataReliable,\r\n    hasWarnings,\r\n  } = useValidatedData(consolidatedMetrics, timeSeriesData, consolidatedMetrics?.lastUpdated);\r\n  \r\n  // Filters hook\r\n  const {\r\n    updateDatePeriod,\r\n    updateCustomDateRange,\r\n    resetFilters,\r\n  } = useMetricsFilters();\r\n\r\n  const handleDatePeriodChange = useCallback((period: string) => {\r\n    console.log('­ƒÄ» ChatMetricsTab: handleDatePeriodChange chamado com:', period);\r\n    updateDatePeriod(period);\r\n  }, [updateDatePeriod]);\r\n  \r\n  // Estado de loading consolidado\r\n  const isLoading = loading || consolidatedLoading;\r\n  \r\n  // Preparar dados dos gr├íficos usando dados validados\r\n  const newLeadsData = validatedTimeSeries.data?.map(item => ({\r\n    date: item.date,\r\n    leads: item.leads,\r\n    converted: item.converted,\r\n  })) || [];\r\n\r\n  const conversationsDataForChart = validatedTimeSeries.data?.map(item => ({\r\n    date: item.date,\r\n    iniciadas: item.iniciadas,\r\n    respondidas: item.respondidas,\r\n    naoRespondidas: item.naoRespondidas,\r\n  })) || [];\r\n  \r\n  // Usar dados validados ou fallback\r\n  const safeMetrics = validatedMetrics.data || {};\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header com gradiente */}\r\n      <MetricsHeader \r\n        title=\"Dashboard de M├®tricas Avan├ºado\"\r\n        description=\"An├ílise completa de performance, leads e convers├Áes em tempo real\"\r\n      />\r\n\r\n      {/* Status da Conex├úo e Qualidade dos Dados */}\r\n      {!isDataReliable && (\r\n        <Card className=\"border-orange-200 bg-orange-50 dark:bg-orange-950/20\">\r\n          <CardContent className=\"flex items-center gap-3 p-4\">\r\n            <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\r\n            <div className=\"flex-1\">\r\n              <p className=\"text-sm font-medium text-orange-800 dark:text-orange-200\">\r\n                Qualidade dos dados: {dataQuality.score}/100\r\n              </p>\r\n              <p className=\"text-xs text-orange-600 dark:text-orange-300\">\r\n                {allErrors.length > 0 && `${allErrors.length} erro(s). `}\r\n                {allWarnings.length > 0 && `${allWarnings.length} aviso(s).`}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant={isConnected ? \"default\" : \"destructive\"}>\r\n                {isConnected ? \"Conectado\" : \"Desconectado\"}\r\n              </Badge>\r\n              <Button size=\"sm\" variant=\"outline\" onClick={forceRefresh}>\r\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\r\n                Atualizar\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Header com Filtros */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <h3 className=\"text-xl font-semibold text-gray-800 dark:text-white\">\r\n          M├®tricas de Conversas\r\n        </h3>\r\n        <MetricsFilters\r\n          datePeriod={filters.dataPeriod}\r\n          customStartDate={filters.customStartDate}\r\n          customEndDate={filters.customEndDate}\r\n          onDatePeriodChange={handleDatePeriodChange}\r\n          onCustomDateChange={updateCustomDateRange}\r\n          onReset={resetFilters}\r\n        />\r\n      </div>\r\n\r\n      {/* KPIs Reformulados */}\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <SectionHeader \r\n            title=\"­ƒôè Indicadores Principais\" \r\n            borderColor=\"border-blue-200 dark:border-blue-700\" \r\n          />\r\n          <div className=\"flex items-center gap-2\">\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              {safeMetrics.isStale ? \"Dados desatualizados\" : \"Tempo real\"}\r\n            </Badge>\r\n            {lastUpdate && (\r\n              <span className=\"text-xs text-muted-foreground\">\r\n                ├Ültima atualiza├º├úo: {lastUpdate.toLocaleTimeString('pt-BR')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n          <MetricCard\r\n            title=\"Total de Leads\"\r\n            value={safeMetrics.totalLeads || 0}\r\n            icon={<Users />}\r\n            description=\"N├║mero total de leads captados no per├¡odo selecionado\"\r\n            absoluteValue={safeMetrics.totalLeads || 0}\r\n            trend={{\r\n              value: 12.5,\r\n              label: \"+12.5% vs per├¡odo anterior\",\r\n              direction: 'up'\r\n            }}\r\n            iconBgClass=\"bg-blue-100 dark:bg-blue-900/30\"\r\n            iconTextClass=\"text-blue-600 dark:text-blue-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n\r\n          <MetricCard\r\n            title=\"Respostas┬╣\"\r\n            value={safeMetrics.conversasNaoRespondidas || 0}\r\n            icon={<MessageCircle />}\r\n            description=\"Leads que ainda n├úo receberam resposta da equipe\"\r\n            absoluteValue={safeMetrics.conversasNaoRespondidas || 0}\r\n            percentage={safeMetrics.totalConversations > 0 ? \r\n              Math.round((safeMetrics.conversasNaoRespondidas / safeMetrics.totalConversations) * 100) : 0\r\n            }\r\n            trend={{\r\n              value: -5.2,\r\n              label: \"-5.2% vs per├¡odo anterior\",\r\n              direction: 'down'\r\n            }}\r\n            iconBgClass=\"bg-red-100 dark:bg-red-900/30\"\r\n            iconTextClass=\"text-red-600 dark:text-red-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n\r\n          <MetricCard\r\n            title=\"Taxa de Convers├úo\"\r\n            value={`${safeMetrics.conversionRate?.toFixed(1) || 0}%`}\r\n            icon={<Target />}\r\n            description=\"Percentual de leads que se tornaram clientes\"\r\n            trend={{\r\n              value: 2.8,\r\n              label: \"+2.8% vs per├¡odo anterior\",\r\n              direction: 'up'\r\n            }}\r\n            iconBgClass=\"bg-green-100 dark:bg-green-900/30\"\r\n            iconTextClass=\"text-green-600 dark:text-green-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n\r\n          <MetricCard\r\n            title=\"Ticket M├®dio\"\r\n            value={`R$ ${(safeMetrics.ticketMedio || 0).toLocaleString('pt-BR')}`}\r\n            icon={<DollarSign />}\r\n            description=\"Valor m├®dio dos neg├│cios fechados\"\r\n            trend={{\r\n              value: 8.3,\r\n              label: \"+8.3% vs per├¡odo anterior\",\r\n              direction: 'up'\r\n            }}\r\n            iconBgClass=\"bg-emerald-100 dark:bg-emerald-900/30\"\r\n            iconTextClass=\"text-emerald-600 dark:text-emerald-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n\r\n          <MetricCard           \r\n            title={<>Tempo de<br />Resposta</>}\r\n            value={`${safeMetrics.avgResponseTime?.toFixed(1) || 0}h`}\r\n            icon={<Clock />}\r\n            description=\"Tempo m├®dio para primeira resposta aos leads\"\r\n            trend={{\r\n              value: -15.6,\r\n              label: \"-15.6% vs per├¡odo anterior\",\r\n              direction: 'down'\r\n            }}\r\n            iconBgClass=\"bg-orange-100 dark:bg-orange-900/30\"\r\n            iconTextClass=\"text-orange-600 dark:text-orange-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n\r\n          <MetricCard\r\n            title=\"Respostas┬▓\"\r\n            value={`${safeMetrics.responseRate?.toFixed(1) || 0}%`}\r\n            icon={<Star />}\r\n            description=\"Percentual de conversas que receberam resposta\"\r\n            trend={{\r\n              value: 0,\r\n              label: \"Mantendo o n├¡vel\",\r\n              direction: 'neutral'\r\n            }}\r\n            iconBgClass=\"bg-purple-100 dark:bg-purple-900/30\"\r\n            iconTextClass=\"text-purple-600 dark:text-purple-400\"\r\n            loading={isLoading}\r\n            isStale={safeMetrics.isStale}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Novos Gr├íficos */}\r\n      <div className=\"space-y-4\">\r\n        <SectionHeader \r\n          title=\"­ƒôê An├ílise Temporal\" \r\n          borderColor=\"border-indigo-200 dark:border-indigo-700\" \r\n        />\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <NewLeadsOverTimeChart\r\n            data={newLeadsData}\r\n            loading={isLoading}\r\n          />\r\n          \r\n          <ConversationsChart\r\n            data={conversationsDataForChart}\r\n            loading={isLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Funil do Kanban */}\r\n      <div className=\"space-y-4\">\r\n        <SectionHeader \r\n          title=\"­ƒÄ» Funil de Convers├úo por Est├ígios\" \r\n          borderColor=\"border-emerald-200 dark:border-emerald-700\" \r\n        />\r\n\r\n        <KanbanStagesFunnelChart />\r\n      </div>\r\n\r\n      {/* Se├º├úo do Gerenciador de An├║ncios */}\r\n      <AdManagerSection loading={isLoading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMetricsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversationChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversionByTimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ConversionFunnelChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedStages.length'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [selectedStages.length, stages]","fix":{"range":[1858,1866],"text":"[selectedStages.length, stages]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'stageColors'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [data, selectedStages, customDate, showNoShowRate, onFilterChange, stageColors]","fix":{"range":[2602,2668],"text":"[data, selectedStages, customDate, showNoShowRate, onFilterChange, stageColors]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, AlertCircle } from \"lucide-react\";\nimport { FunnelChartSettings } from \"./FunnelChartSettings\";\nimport { useKanbanStages } from \"@/hooks/useKanbanStages\";\n\ninterface FunnelData {\n  name: string;\n  value: number;\n  percentage: number;\n  color?: string;\n}\n\ninterface ConversionFunnelChartProps {\n  data: FunnelData[];\n  loading?: boolean;\n  onFilterChange?: (\n    date: Date,\n    stages: string[],\n    showNoShowRate: boolean,\n  ) => void;\n  noShowRate?: number;\n}\n\ntype DateRange = {\n  from: Date;\n  to: Date;\n};\n\nconst ConversionFunnelChart: React.FC<ConversionFunnelChartProps> = ({\n  data,\n  loading = false,\n  onFilterChange,\n  noShowRate,\n}) => {\n  const [customDate, setCustomDate] = useState<Date>(new Date());\n  const [selectedStages, setSelectedStages] = useState<string[]>([]);\n  const [selectedPeriod, setSelectedPeriod] = useState<string>(\"last7days\");\n  const [dateRange, setDateRange] = useState<DateRange | null>(null);\n  const [showNoShowRate, setShowNoShowRate] = useState<boolean>(false);\n  const [filteredData, setFilteredData] = useState<FunnelData[]>(data);\n  const { stages } = useKanbanStages();\n\n  // Cores predefinidas para os est├ígios do funil\n  const stageColors = [\n    \"#4f46e5\", // indigo-600\n    \"#0891b2\", // cyan-600\n    \"#059669\", // emerald-600\n    \"#65a30d\", // lime-600\n    \"#ca8a04\", // yellow-600\n    \"#ea580c\", // orange-600\n    \"#dc2626\", // red-600\n    \"#9333ea\", // purple-600\n    \"#2563eb\", // blue-600\n    \"#0d9488\", // teal-600\n  ];\n\n  // Inicializa os est├ígios selecionados com todos os est├ígios dispon├¡veis\n  useEffect(() => {\n    if (stages.length > 0 && selectedStages.length === 0) {\n      setSelectedStages(stages.map((stage) => stage.title));\n    }\n  }, [stages]);\n\n  // Filtra os dados com base nos est├ígios selecionados e aplica cores\n  useEffect(() => {\n    if (data.length > 0) {\n      let filtered = data;\n\n      // Filtra por est├ígios selecionados\n      if (selectedStages.length > 0) {\n        filtered = data.filter((item) => selectedStages.includes(item.name));\n      }\n\n      // Aplica cores aos est├ígios\n      filtered = filtered.map((item, index) => ({\n        ...item,\n        color: item.color || stageColors[index % stageColors.length],\n      }));\n\n      setFilteredData(filtered);\n\n      // Notifica sobre mudan├ºas nos filtros\n      if (onFilterChange) {\n        onFilterChange(customDate, selectedStages, showNoShowRate);\n      }\n    } else {\n      setFilteredData([]);\n    }\n  }, [data, selectedStages, customDate, showNoShowRate, onFilterChange]);\n\n  return (\n    <Card className=\"dark:bg-gray-800 transition-all duration-300 hover:shadow-lg\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"flex items-center gap-2 text-gray-800 dark:text-white\">\n          <PieChart className=\"h-5 w-5 text-indigo-600 dark:text-indigo-400\" />\n          Funil de Convers├úo de Leads\n        </CardTitle>\n        <FunnelChartSettings\n          selectedStages={selectedStages}\n          onStagesChange={setSelectedStages}\n          showNoShowRate={showNoShowRate}\n          onShowNoShowRateChange={setShowNoShowRate}\n          showDateFilters={false}\n        />\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-80 flex items-center justify-center\">\n            <div className=\"w-16 h-16 border-4 border-green-400 border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            <div className=\"h-80 flex flex-col justify-center space-y-4\">\n              {filteredData.length > 0 ? (\n                filteredData.map((stage, index) => (\n                  <div key={index} className=\"flex flex-col\">\n                    <div className=\"flex justify-between items-center mb-1\">\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        {stage.name}\n                      </span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-bold text-gray-800 dark:text-white\">\n                          {stage.value}\n                        </span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {stage.percentage}%\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"relative h-8 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-lg transition-all duration-500 ease-in-out\"\n                        style={{\n                          width: `${stage.percentage}%`,\n                          backgroundColor: stage.color,\n                        }}\n                      ></div>\n                    </div>\n                    {index < filteredData.length - 1 && (\n                      <div className=\"flex justify-center my-1\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"text-gray-400 dark:text-gray-600\"\n                        >\n                          <polyline points=\"6 9 12 15 18 9\"></polyline>\n                        </svg>\n                      </div>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400\">\n                  <AlertCircle className=\"h-8 w-8 mb-2\" />\n                  <p>Nenhum est├ígio selecionado</p>\n                </div>\n              )}\n            </div>\n\n            {/* Legenda de cores */}\n            <div className=\"flex flex-wrap gap-3 pt-2\">\n              {filteredData.map((stage, index) => (\n                <div\n                  key={`legend-${index}`}\n                  className=\"flex items-center gap-1\"\n                >\n                  <div\n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: stage.color }}\n                  ></div>\n                  <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {stage.name}\n                  </span>\n                </div>\n              ))}\n            </div>\n\n            {/* Taxa de No-Show */}\n            {showNoShowRate && noShowRate !== undefined && (\n              <div className=\"flex items-center justify-between pt-2 mt-2 border-t border-gray-200 dark:border-gray-700\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Taxa de No-Show:\n                </span>\n                <span className=\"text-sm font-bold text-red-600 dark:text-red-400\">\n                  {noShowRate}%\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ConversionFunnelChart;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\FunnelChartSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\KPICarousel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1750,1753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1750,1753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, useState } from 'react';\r\nimport useEmblaCarousel from 'embla-carousel-react';\r\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport StatCard from './StatCard';\r\n\r\ninterface KPICarouselProps {\r\n  cards: Array<{\r\n    title: string;\r\n    value: string | number;\r\n    icon: React.ReactNode;\r\n    trend: string;\r\n    iconBgClass: string;\r\n    iconTextClass: string;\r\n  }>;\r\n  loading: boolean;\r\n}\r\n\r\nconst KPICarousel: React.FC<KPICarouselProps> = ({ cards, loading }) => {\r\n  const [emblaRef, emblaApi] = useEmblaCarousel({\r\n    loop: true,\r\n    align: 'start',\r\n    dragFree: false,\r\n    containScroll: 'trimSnaps'\r\n  });\r\n\r\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(false);\r\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [isAutoPlaying, setIsAutoPlaying] = useState(true);\r\n\r\n  console.log('KPICarousel render:', { cardsLength: cards.length, loading, emblaApi: !!emblaApi });\r\n\r\n  const scrollPrev = useCallback(() => {\r\n    if (emblaApi) {\r\n      console.log('Scrolling prev');\r\n      emblaApi.scrollPrev();\r\n      // Pause auto-play when user interacts\r\n      setIsAutoPlaying(false);\r\n      setTimeout(() => setIsAutoPlaying(true), 10000); // Resume after 10s\r\n    }\r\n  }, [emblaApi]);\r\n\r\n  const scrollNext = useCallback(() => {\r\n    if (emblaApi) {\r\n      console.log('Scrolling next');\r\n      emblaApi.scrollNext();\r\n      // Pause auto-play when user interacts\r\n      setIsAutoPlaying(false);\r\n      setTimeout(() => setIsAutoPlaying(true), 10000); // Resume after 10s\r\n    }\r\n  }, [emblaApi]);\r\n\r\n  const onSelect = useCallback((emblaApi: any) => {\r\n    const index = emblaApi.selectedScrollSnap();\r\n    console.log('Embla onSelect:', { index, canScrollPrev: emblaApi.canScrollPrev(), canScrollNext: emblaApi.canScrollNext() });\r\n    setSelectedIndex(index);\r\n    setPrevBtnDisabled(!emblaApi.canScrollPrev());\r\n    setNextBtnDisabled(!emblaApi.canScrollNext());\r\n  }, []);\r\n\r\n  // Handle user drag interaction\r\n  const onPointerDown = useCallback(() => {\r\n    setIsAutoPlaying(false);\r\n    setTimeout(() => setIsAutoPlaying(true), 10000); // Resume after 10s\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) {\r\n      console.log('KPICarousel: emblaApi not ready');\r\n      return;\r\n    }\r\n\r\n    console.log('KPICarousel: setting up embla listeners');\r\n    onSelect(emblaApi);\r\n    emblaApi.on('select', onSelect);\r\n    emblaApi.on('reInit', onSelect);\r\n    emblaApi.on('pointerDown', onPointerDown);\r\n\r\n    return () => {\r\n      if (emblaApi) {\r\n        emblaApi.off('select', onSelect);\r\n        emblaApi.off('reInit', onSelect);\r\n        emblaApi.off('pointerDown', onPointerDown);\r\n      }\r\n    };\r\n  }, [emblaApi, onSelect, onPointerDown]);\r\n\r\n  // Auto-play effect\r\n  useEffect(() => {\r\n    if (!emblaApi || !isAutoPlaying) return;\r\n\r\n    const autoplay = setInterval(() => {\r\n      if (emblaApi.canScrollNext()) {\r\n        emblaApi.scrollNext();\r\n      } else {\r\n        emblaApi.scrollTo(0);\r\n      }\r\n    }, 4000); // Changed to 4 seconds for better UX\r\n\r\n    return () => clearInterval(autoplay);\r\n  }, [emblaApi, isAutoPlaying]);\r\n\r\n  const scrollTo = useCallback(\r\n    (index: number) => {\r\n      if (emblaApi) {\r\n        console.log('Scrolling to index:', index);\r\n        emblaApi.scrollTo(index);\r\n        // Pause auto-play when user interacts\r\n        setIsAutoPlaying(false);\r\n        setTimeout(() => setIsAutoPlaying(true), 10000); // Resume after 10s\r\n      }\r\n    },\r\n    [emblaApi]\r\n  );\r\n\r\n  if (!cards || cards.length === 0) {\r\n    console.log('KPICarousel: No cards to display');\r\n    return <div>Nenhum dado dispon├¡vel</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative group\">\r\n      {/* Auto-play indicator */}\r\n      <div className=\"absolute top-2 right-2 z-10\">\r\n        <div className={`w-2 h-2 rounded-full transition-colors ${isAutoPlaying ? 'bg-green-500' : 'bg-gray-400'}`} />\r\n      </div>\r\n      {/* Navigation Buttons */}\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={scrollPrev}\r\n          disabled={prevBtnDisabled}\r\n          className=\"h-8 w-8 p-0 rounded-full shadow-sm hover:shadow-md transition-shadow\"\r\n        >\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n\r\n        {/* Dots indicator */}\r\n        <div className=\"flex gap-2\">\r\n          {cards.map((_, index) => (\r\n            <button\r\n              key={index}\r\n              className={`h-2 w-2 rounded-full transition-all duration-300 ${\r\n                index === selectedIndex \r\n                  ? 'bg-primary scale-125' \r\n                  : 'bg-muted hover:bg-muted-foreground/50'\r\n              }`}\r\n              onClick={() => scrollTo(index)}\r\n              aria-label={`Go to slide ${index + 1}`}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={scrollNext}\r\n          disabled={nextBtnDisabled}\r\n          className=\"h-8 w-8 p-0 rounded-full shadow-sm hover:shadow-md transition-shadow\"\r\n        >\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Carousel */}\r\n      <div \r\n        className=\"overflow-hidden cursor-grab active:cursor-grabbing\" \r\n        ref={emblaRef}\r\n        onMouseEnter={() => setIsAutoPlaying(false)}\r\n        onMouseLeave={() => setIsAutoPlaying(true)}\r\n      >\r\n        <div className=\"flex\">\r\n          {cards.map((card, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"flex-[0_0_100%] min-w-0 pl-4 first:pl-0\"\r\n            >\r\n              <div className=\"transform transition-transform duration-300 hover:scale-105\">\r\n                <StatCard\r\n                  title={card.title}\r\n                  value={card.value}\r\n                  icon={card.icon}\r\n                  trend={card.trend}\r\n                  loading={loading}\r\n                  iconBgClass={card.iconBgClass}\r\n                  iconTextClass={card.iconTextClass}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Progress bar */}\r\n      <div className=\"mt-4 bg-muted rounded-full h-1 overflow-hidden\">\r\n        <div \r\n          className=\"bg-primary h-full transition-all duration-300 ease-out\"\r\n          style={{ \r\n            width: `${((selectedIndex + 1) / cards.length) * 100}%` \r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KPICarousel;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\KanbanStagesFunnelChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsAverageByTimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsByArrivalFunnelChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedStages.length'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [selectedStages.length, stages]","fix":{"range":[1246,1254],"text":"[selectedStages.length, stages]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CalendarClock, AlertCircle } from \"lucide-react\";\nimport { FunnelChartSettings } from \"./FunnelChartSettings\";\nimport { useKanbanStages } from \"@/hooks/useKanbanStages\";\n\ninterface FunnelStage {\n  name: string;\n  value: number;\n  percentage: number;\n  color: string;\n}\n\ninterface LeadsByArrivalFunnelChartProps {\n  data: FunnelStage[];\n  loading?: boolean;\n  onFilterChange?: (\n    date: Date,\n    stages: string[],\n    showNoShowRate: boolean,\n  ) => void;\n  noShowRate?: number;\n}\n\nconst LeadsByArrivalFunnelChart: React.FC<LeadsByArrivalFunnelChartProps> = ({\n  data,\n  loading = false,\n  onFilterChange,\n  noShowRate,\n}) => {\n  const [customDate, setCustomDate] = useState<Date>(new Date());\n  const [selectedStages, setSelectedStages] = useState<string[]>([]);\n  const [showNoShowRate, setShowNoShowRate] = useState<boolean>(false);\n  const [filteredData, setFilteredData] = useState<FunnelStage[]>(data);\n  const { stages } = useKanbanStages();\n\n  useEffect(() => {\n    if (stages.length > 0 && selectedStages.length === 0) {\n      setSelectedStages(stages.map((stage) => stage.title));\n    }\n  }, [stages]);\n\n  useEffect(() => {\n    if (selectedStages.length > 0) {\n      const filtered = data.filter((item) =>\n        selectedStages.includes(item.name),\n      );\n      setFilteredData(filtered);\n\n      if (onFilterChange) {\n        onFilterChange(customDate, selectedStages, showNoShowRate);\n      }\n    } else {\n      setFilteredData(data);\n    }\n  }, [data, selectedStages, customDate, showNoShowRate, onFilterChange]);\n  return (\n    <Card className=\"dark:bg-gray-800 transition-all duration-300 hover:shadow-lg\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"flex items-center gap-2 text-gray-800 dark:text-white\">\n          <CalendarClock className=\"h-5 w-5 text-amber-600 dark:text-amber-400\" />\n          Funil por Data de Chegada\n        </CardTitle>\n        <FunnelChartSettings\n          selectedStages={selectedStages}\n          onStagesChange={setSelectedStages}\n          showNoShowRate={showNoShowRate}\n          onShowNoShowRateChange={setShowNoShowRate}\n          showDateFilters={false}\n        />\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-80 flex items-center justify-center\">\n            <div className=\"w-16 h-16 border-4 border-amber-400 border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            <div className=\"h-80 flex flex-col justify-center space-y-4\">\n              {filteredData.length > 0 ? (\n                filteredData.map((stage, index) => (\n                  <div key={index} className=\"flex flex-col\">\n                    <div className=\"flex justify-between items-center mb-1\">\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        {stage.name}\n                      </span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-bold text-gray-800 dark:text-white\">\n                          {stage.value}\n                        </span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {stage.percentage}%\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"relative h-8 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-lg transition-all duration-500 ease-in-out\"\n                        style={{\n                          width: `${stage.percentage}%`,\n                          backgroundColor: stage.color,\n                        }}\n                      ></div>\n                    </div>\n                    {index < filteredData.length - 1 && (\n                      <div className=\"flex justify-center my-1\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"text-gray-400 dark:text-gray-600\"\n                        >\n                          <polyline points=\"6 9 12 15 18 9\"></polyline>\n                        </svg>\n                      </div>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400\">\n                  <AlertCircle className=\"h-8 w-8 mb-2\" />\n                  <p>Nenhum est├ígio selecionado</p>\n                </div>\n              )}\n            </div>\n\n            {/* Legenda de cores */}\n            <div className=\"flex flex-wrap gap-3 pt-2\">\n              {filteredData.map((stage, index) => (\n                <div\n                  key={`legend-${index}`}\n                  className=\"flex items-center gap-1\"\n                >\n                  <div\n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: stage.color }}\n                  ></div>\n                  <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {stage.name}\n                  </span>\n                </div>\n              ))}\n            </div>\n\n            {/* Taxa de No-Show */}\n            {showNoShowRate && noShowRate !== undefined && (\n              <div className=\"flex items-center justify-between pt-2 mt-2 border-t border-gray-200 dark:border-gray-700\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Taxa de No-Show:\n                </span>\n                <span className=\"text-sm font-bold text-red-600 dark:text-red-400\">\n                  {noShowRate}%\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LeadsByArrivalFunnelChart;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsBySourceChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Legend,\n  Tooltip,\n} from \"recharts\";\nimport { Share2 } from \"lucide-react\";\n\ninterface LeadsBySourceChartProps {\n  data: Array<{ name: string; value: number; color: string }>;\n  loading?: boolean;\n}\n\nconst LeadsBySourceChart: React.FC<LeadsBySourceChartProps> = ({\n  data,\n  loading = false,\n}) => {\n  const RADIAN = Math.PI / 180;\n\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n  }: any) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"central\"\n        className=\"text-xs font-medium\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <Card className=\"dark:bg-gray-800 transition-all duration-300 hover:shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-gray-800 dark:text-white\">\n          <Share2 className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n          Leads por Fonte\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-80 flex items-center justify-center\">\n            <div className=\"w-16 h-16 border-4 border-blue-400 border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        ) : (\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={data}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={renderCustomizedLabel}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {data.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip\n                  formatter={(value: number) => [\n                    `${value} leads`,\n                    \"Quantidade\",\n                  ]}\n                  contentStyle={{\n                    backgroundColor: \"var(--background)\",\n                    borderColor: \"var(--border)\",\n                    borderRadius: \"0.5rem\",\n                  }}\n                />\n                <Legend\n                  layout=\"vertical\"\n                  verticalAlign=\"middle\"\n                  align=\"right\"\n                  wrapperStyle={{\n                    paddingLeft: \"20px\",\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LeadsBySourceChart;\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsGrowthChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\LeadsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\MetricsFiltersSimple.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3889,3892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3889,3892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { format, subDays, subWeeks, subMonths, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { CalendarIcon, Clock } from \"lucide-react\";\r\nimport { DateRange, PeriodOption } from \"@/types/filters\";\r\n\r\ninterface MetricsFiltersSimpleProps {\r\n  selectedDate?: Date | null;\r\n  selectedDateRange?: DateRange | null;\r\n  selectedPeriod?: string;\r\n  onDateChange?: (date: Date | null) => void;\r\n  onDateRangeChange?: (range: DateRange | null) => void;\r\n  onPeriodChange?: (period: string) => void;\r\n  onApplyFilters?: () => void;\r\n  showPeriodSelector?: boolean;\r\n  showDateRange?: boolean;\r\n}\r\n\r\nconst MetricsFiltersSimple = React.memo<MetricsFiltersSimpleProps>(({\r\n  selectedDate,\r\n  selectedDateRange,\r\n  selectedPeriod = \"today\",\r\n  onDateChange,\r\n  onDateRangeChange,\r\n  onPeriodChange,\r\n  onApplyFilters,\r\n  showPeriodSelector = true,\r\n  showDateRange = false,\r\n}) => {\r\n  const [date, setDate] = useState<Date | null>(selectedDate || null);\r\n  const [dateRange, setDateRange] = useState<DateRange | null>(selectedDateRange || null);\r\n  const [period, setPeriod] = useState<string>(selectedPeriod);\r\n\r\n  const periodOptions: PeriodOption[] = useMemo(() => [\r\n    {\r\n      label: \"Hoje\",\r\n      value: \"today\",\r\n      getRange: () => ({ from: new Date(), to: new Date() })\r\n    },\r\n    {\r\n      label: \"Ontem\",\r\n      value: \"yesterday\",\r\n      getRange: () => {\r\n        const yesterday = subDays(new Date(), 1);\r\n        return { from: yesterday, to: yesterday };\r\n      }\r\n    },\r\n    {\r\n      label: \"├Ültimos 7 dias\",\r\n      value: \"last7days\",\r\n      getRange: () => ({ from: subDays(new Date(), 7), to: new Date() })\r\n    },\r\n    {\r\n      label: \"Esta semana\",\r\n      value: \"thisWeek\",\r\n      getRange: () => ({ from: startOfWeek(new Date(), { locale: ptBR }), to: endOfWeek(new Date(), { locale: ptBR }) })\r\n    },\r\n    {\r\n      label: \"Semana passada\",\r\n      value: \"lastWeek\",\r\n      getRange: () => {\r\n        const lastWeek = subWeeks(new Date(), 1);\r\n        return { from: startOfWeek(lastWeek, { locale: ptBR }), to: endOfWeek(lastWeek, { locale: ptBR }) };\r\n      }\r\n    },\r\n    {\r\n      label: \"├Ültimos 30 dias\",\r\n      value: \"last30days\",\r\n      getRange: () => ({ from: subDays(new Date(), 30), to: new Date() })\r\n    },\r\n    {\r\n      label: \"Este m├¬s\",\r\n      value: \"thisMonth\",\r\n      getRange: () => ({ from: startOfMonth(new Date()), to: endOfMonth(new Date()) })\r\n    },\r\n    {\r\n      label: \"M├¬s passado\",\r\n      value: \"lastMonth\",\r\n      getRange: () => {\r\n        const lastMonth = subMonths(new Date(), 1);\r\n        return { from: startOfMonth(lastMonth), to: endOfMonth(lastMonth) };\r\n      }\r\n    },\r\n    {\r\n      label: \"Personalizado\",\r\n      value: \"custom\",\r\n      getRange: () => ({ from: new Date(), to: new Date() })\r\n    }\r\n  ], []);\r\n\r\n  const handleDateSelect = useCallback((newDate: Date | undefined) => {\r\n    const selectedDate = newDate || null;\r\n    setDate(selectedDate);\r\n    onDateChange?.(selectedDate);\r\n  }, [onDateChange]);\r\n\r\n  const handlePeriodChange = useCallback((newPeriod: string) => {\r\n    setPeriod(newPeriod);\r\n    onPeriodChange?.(newPeriod);\r\n    \r\n    if (newPeriod !== \"custom\") {\r\n      const selectedOption = periodOptions.find(opt => opt.value === newPeriod);\r\n      if (selectedOption) {\r\n        const range = selectedOption.getRange();\r\n        setDateRange(range);\r\n        onDateRangeChange?.(range);\r\n      }\r\n    }\r\n  }, [onPeriodChange, onDateRangeChange, periodOptions]);\r\n\r\n  const handleDateRangeSelect = useCallback((selectedRange: any) => {\r\n    let newRange: DateRange | null = null;\r\n    \r\n    if (selectedRange?.from && selectedRange?.to) {\r\n      newRange = { from: selectedRange.from, to: selectedRange.to };\r\n    } else if (selectedRange?.from) {\r\n      newRange = { from: selectedRange.from, to: selectedRange.from };\r\n    }\r\n    \r\n    setDateRange(newRange);\r\n    onDateRangeChange?.(newRange);\r\n  }, [onDateRangeChange]);\r\n\r\n  const formatDateRange = useCallback((range: DateRange | null) => {\r\n    if (!range) return \"Selecione um per├¡odo\";\r\n    if (range.from.getTime() === range.to.getTime()) {\r\n      return format(range.from, \"PPP\", { locale: ptBR });\r\n    }\r\n    return `${format(range.from, \"dd/MM\", { locale: ptBR })} - ${format(range.to, \"dd/MM/yyyy\", { locale: ptBR })}`;\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {showPeriodSelector && (\r\n        <div>\r\n          <label className=\"text-sm font-medium mb-2 block flex items-center gap-2\">\r\n            <Clock className=\"h-4 w-4\" />\r\n            Per├¡odo de An├ílise\r\n          </label>\r\n          <Select value={period} onValueChange={handlePeriodChange}>\r\n            <SelectTrigger className=\"w-full\">\r\n              <SelectValue placeholder=\"Selecione um per├¡odo\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {periodOptions.map((option) => (\r\n                <SelectItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      )}\r\n\r\n      {showDateRange && (\r\n        <div>\r\n          <label className=\"text-sm font-medium mb-2 block\">Per├¡odo Personalizado</label>\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"w-full justify-start text-left font-normal\"\r\n              >\r\n                <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                {formatDateRange(dateRange)}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n              <div className=\"p-3\">\r\n                <p>Data personalizada em desenvolvimento</p>\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      )}\r\n\r\n      {!showPeriodSelector && !showDateRange && (\r\n        <div>\r\n          <label className=\"text-sm font-medium mb-2 block\">Data</label>\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"w-full justify-start text-left font-normal\"\r\n              >\r\n                <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                {date ? (\r\n                  format(date, \"PPP\", { locale: ptBR })\r\n                ) : (\r\n                  <span>Selecione uma data</span>\r\n                )}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n              <div className=\"p-3\">\r\n                <p>Seletor de data em desenvolvimento</p>\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      )}\r\n\r\n      {period === \"custom\" && showPeriodSelector && (\r\n        <div>\r\n          <label className=\"text-sm font-medium mb-2 block\">Per├¡odo Personalizado</label>\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"w-full justify-start text-left font-normal\"\r\n              >\r\n                <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                {formatDateRange(dateRange)}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n              <div className=\"p-3\">\r\n                <p>Per├¡odo personalizado em desenvolvimento</p>\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      )}\r\n\r\n      {onApplyFilters && (\r\n        <Button onClick={onApplyFilters} className=\"w-full\">\r\n          Aplicar Filtros\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nMetricsFiltersSimple.displayName = 'MetricsFiltersSimple';\r\n\r\nexport default MetricsFiltersSimple;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\MetricsFiltersSimplified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\NegotiatedValueCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\NegotiatingValueCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\RecentClientsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\ResponseTimeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\SecondaryResponseRateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMAdvancedMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMCampaignRanking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMConfigPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMDeviceDistributionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMDeviceFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMGeoHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMMetricsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[927,930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[927,930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[975,978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[975,978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[996,999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[996,999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1142,1145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1142,1145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1170,1173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1170,1173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { Share2, Users, Target, Settings } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport StatCard from \"./StatCard\";\r\nimport UTMAdvancedMetrics from \"./UTMAdvancedMetrics\";\r\nimport UTMCampaignChart from \"./UTMCampaignChart\";\r\nimport UTMSourceChart from \"./UTMSourceChart\";\r\nimport UTMTrackingTable from \"./UTMTrackingTable\";\r\nimport UTMConfigPanel from \"./UTMConfigPanel\";\r\nimport UTMDeviceDistributionChart from \"./UTMDeviceDistributionChart\";\r\nimport UTMCampaignFilter from \"./UTMCampaignFilter\";\r\nimport UTMDeviceFilter from \"./UTMDeviceFilter\";\r\nimport UTMGeoHeatmap from \"./UTMGeoHeatmap\";\r\nimport UTMCampaignRanking from \"./UTMCampaignRanking\";\r\nimport UTMTimeMetrics from \"./UTMTimeMetrics\";\r\n\r\ninterface UTMMetricsTabProps {\r\n  utmMetrics: {\r\n    totalCampaigns: number;\r\n    totalLeads: number;\r\n    conversionRate: number;\r\n    campaignData: any[];\r\n    sourceData: any[];\r\n    deviceData: any[];\r\n    geoData: any[];\r\n    timeToConversion: {\r\n      average: number;\r\n      median: number;\r\n      min: number;\r\n      max: number;\r\n    };\r\n    topCampaigns: any[];\r\n    recentTracking: any[];\r\n    isStale?: boolean;\r\n  };\r\n  utmLoading: boolean;\r\n  selectedCampaign: string;\r\n  onCampaignChange: (campaign: string) => void;\r\n}\r\n\r\nconst UTMMetricsTab: React.FC<UTMMetricsTabProps> = ({\r\n  utmMetrics,\r\n  utmLoading,\r\n  selectedCampaign,\r\n  onCampaignChange,\r\n}) => {\r\n  const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"all\");\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* UTM Header with Filters and Config Button */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-xl font-semibold text-gray-800 dark:text-white\">\r\n          Dashboard UTM Profissional\r\n        </h3>\r\n        <div className=\"flex items-center gap-4\">\r\n          <UTMCampaignFilter\r\n            selectedCampaign={selectedCampaign}\r\n            onCampaignChange={onCampaignChange}\r\n          />\r\n          <UTMDeviceFilter\r\n            selectedDevice={selectedDevice}\r\n            onDeviceChange={setSelectedDevice}\r\n          />\r\n          <Button\r\n            onClick={() => setIsConfigPanelOpen(true)}\r\n            className=\"flex items-center gap-2\"\r\n            variant=\"outline\"\r\n          >\r\n            <Settings className=\"h-4 w-4\" />\r\n            Configurar UTMs\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bloco 1: Vis├úo Geral */}\r\n      <div className=\"space-y-4\">\r\n        <h4 className=\"text-lg font-medium text-gray-700 dark:text-gray-300 border-b pb-2\">\r\n          ­ƒôè Vis├úo Geral\r\n        </h4>\r\n\r\n        {/* UTM KPI Cards */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n          <StatCard\r\n            title=\"Campanhas Ativas\"\r\n            value={utmMetrics.totalCampaigns}\r\n            icon={<Share2 />}\r\n            trend=\"Campanhas UTM ├║nicas\"\r\n            loading={utmLoading}\r\n            iconBgClass=\"bg-cyan-100 dark:bg-cyan-900/30\"\r\n            iconTextClass=\"text-cyan-600 dark:text-cyan-400\"\r\n            isStale={utmMetrics.isStale}\r\n          />\r\n\r\n          <StatCard\r\n            title=\"Leads via UTM\"\r\n            value={utmMetrics.totalLeads}\r\n            icon={<Users />}\r\n            trend=\"Total de leads rastreados\"\r\n            loading={utmLoading}\r\n            iconBgClass=\"bg-emerald-100 dark:bg-emerald-900/30\"\r\n            iconTextClass=\"text-emerald-600 dark:text-emerald-400\"\r\n            isStale={utmMetrics.isStale}\r\n          />\r\n\r\n          <StatCard\r\n            title=\"Taxa de Convers├úo UTM\"\r\n            value={`${utmMetrics.conversionRate}%`}\r\n            icon={<Target />}\r\n            trend=\"Convers├úo de campanhas UTM\"\r\n            loading={utmLoading}\r\n            iconBgClass=\"bg-amber-100 dark:bg-amber-900/30\"\r\n            iconTextClass=\"text-amber-600 dark:text-amber-400\"\r\n            isStale={utmMetrics.isStale}\r\n          />\r\n        </div>\r\n\r\n        {/* M├®tricas de Tempo */}\r\n        <UTMTimeMetrics\r\n          timeToConversion={utmMetrics.timeToConversion}\r\n          loading={utmLoading}\r\n        />\r\n\r\n        {/* M├®tricas Avan├ºadas */}\r\n        <div className=\"space-y-4\">\r\n          <h5 className=\"text-lg font-medium text-gray-700 dark:text-gray-300\">\r\n            ­ƒôê M├®tricas Avan├ºadas\r\n          </h5>\r\n          <UTMAdvancedMetrics\r\n            data={{\r\n              ctr: 3.2,\r\n              cpc: 1.45,\r\n              roas: 380,\r\n              conversionValuePerLead: 250,\r\n              sessionDuration: 145,\r\n              bounceRate: 42,\r\n              topPerformingCampaign: \"black_friday_2024\",\r\n              worstPerformingCampaign: \"summer_sale\",\r\n            }}\r\n            loading={utmLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bloco 2: Gr├íficos */}\r\n      <div className=\"space-y-4\">\r\n        <h4 className=\"text-lg font-medium text-gray-700 dark:text-gray-300 border-b pb-2\">\r\n          ­ƒôê Gr├íficos e An├ílises\r\n        </h4>\r\n\r\n        <UTMCampaignChart data={utmMetrics.campaignData} loading={utmLoading} />\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 pt-4\">\r\n          <UTMSourceChart data={utmMetrics.sourceData} loading={utmLoading} />\r\n          <UTMDeviceDistributionChart\r\n            data={utmMetrics.deviceData}\r\n            loading={utmLoading}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n          <UTMGeoHeatmap data={utmMetrics.geoData} loading={utmLoading} />\r\n          <UTMCampaignRanking\r\n            data={utmMetrics.topCampaigns}\r\n            loading={utmLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bloco 3: Tabela Detalhada */}\r\n      <div className=\"space-y-4\">\r\n        <h4 className=\"text-lg font-medium text-gray-700 dark:text-gray-300 border-b pb-2\">\r\n          ­ƒôï Tabela Detalhada\r\n        </h4>\r\n\r\n        <div className=\"grid grid-cols-1 gap-4\">\r\n          <UTMTrackingTable\r\n            data={utmMetrics.recentTracking}\r\n            loading={utmLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* UTM Config Panel */}\r\n      <UTMConfigPanel\r\n        open={isConfigPanelOpen}\r\n        onOpenChange={setIsConfigPanelOpen}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UTMMetricsTab;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMSourceChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMTimeMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\UTMTrackingTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\AdManagerSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2045,2048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2045,2048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2288,2291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2288,2291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, PieChart, Pie, Cell } from \"recharts\";\r\nimport { TrendingUp, Target, DollarSign, MousePointer, Users, BarChart3 } from \"lucide-react\";\r\nimport MetricCard from \"./MetricCard\";\r\n\r\ninterface AdManagerSectionProps {\r\n  loading?: boolean;\r\n}\r\n\r\nconst AdManagerSection: React.FC<AdManagerSectionProps> = ({ loading = false }) => {\r\n  const [selectedPlatform, setSelectedPlatform] = useState(\"all\");\r\n\r\n  const platformOptions = [\r\n    { label: \"Todas as Plataformas\", value: \"all\" },\r\n    { label: \"Facebook Ads\", value: \"facebook\" },\r\n    { label: \"Google Ads\", value: \"google\" },\r\n    { label: \"Instagram Ads\", value: \"instagram\" },\r\n  ];\r\n\r\n  // Mock data - replace with real data from your backend\r\n  const investmentData = [\r\n    { date: \"01/01\", facebook: 1200, google: 800, instagram: 600 },\r\n    { date: \"02/01\", facebook: 1500, google: 900, instagram: 750 },\r\n    { date: \"03/01\", facebook: 1300, google: 1100, instagram: 680 },\r\n    { date: \"04/01\", facebook: 1800, google: 950, instagram: 820 },\r\n    { date: \"05/01\", facebook: 1600, google: 1200, instagram: 900 },\r\n    { date: \"06/01\", facebook: 2000, google: 1050, instagram: 950 },\r\n    { date: \"07/01\", facebook: 1750, google: 1300, instagram: 1100 },\r\n  ];\r\n\r\n  const leadsBySourceData = [\r\n    { name: \"Facebook\", value: 45, color: \"#1877F2\" },\r\n    { name: \"Google\", value: 30, color: \"#4285F4\" },\r\n    { name: \"Instagram\", value: 20, color: \"#E4405F\" },\r\n    { name: \"Outros\", value: 5, color: \"#64748B\" },\r\n  ];\r\n\r\n  const platformMetrics = {\r\n    investment: 12500,\r\n    ctr: 3.2,\r\n    cpc: 1.85,\r\n    cpl: 25.50,\r\n    leads: 487,\r\n    roas: 4.2,\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium\">{label}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\r\n              {entry.name}: R$ {entry.value.toLocaleString('pt-BR')}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5 text-primary\" />\r\n              M├®tricas do Gerenciador de An├║ncios\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant=\"outline\">Em tempo real</Badge>\r\n              <Select value={selectedPlatform} onValueChange={setSelectedPlatform}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"Selecione a plataforma\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {platformOptions.map((option) => (\r\n                    <SelectItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* KPIs dos An├║ncios */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\r\n            <MetricCard\r\n              title=\"Investimento\"\r\n              value={`R$ ${platformMetrics.investment.toLocaleString('pt-BR')}`}\r\n              icon={<DollarSign />}\r\n              description=\"Total investido em an├║ncios no per├¡odo selecionado\"\r\n              trend={{\r\n                value: 8.5,\r\n                label: \"+8.5% vs per├¡odo anterior\",\r\n                direction: 'up'\r\n              }}\r\n              iconBgClass=\"bg-green-100 dark:bg-green-900/30\"\r\n              iconTextClass=\"text-green-600 dark:text-green-400\"\r\n              loading={loading}\r\n            />\r\n\r\n            <MetricCard\r\n              title=\"CTR\"\r\n              value={`${platformMetrics.ctr}%`}\r\n              icon={<MousePointer />}\r\n              description=\"Taxa de cliques - percentual de pessoas que clicaram no an├║ncio\"\r\n              trend={{\r\n                value: 0.3,\r\n                label: \"+0.3% vs per├¡odo anterior\",\r\n                direction: 'up'\r\n              }}\r\n              iconBgClass=\"bg-blue-100 dark:bg-blue-900/30\"\r\n              iconTextClass=\"text-blue-600 dark:text-blue-400\"\r\n              loading={loading}\r\n            />\r\n\r\n            <MetricCard\r\n              title=\"CPC\"\r\n              value={`R$ ${platformMetrics.cpc.toFixed(2)}`}\r\n              icon={<Target />}\r\n              description=\"Custo por clique - valor m├®dio pago por cada clique\"\r\n              trend={{\r\n                value: -5.2,\r\n                label: \"-5.2% vs per├¡odo anterior\",\r\n                direction: 'down'\r\n              }}\r\n              iconBgClass=\"bg-orange-100 dark:bg-orange-900/30\"\r\n              iconTextClass=\"text-orange-600 dark:text-orange-400\"\r\n              loading={loading}\r\n            />\r\n\r\n            <MetricCard\r\n              title=\"CPL\"\r\n              value={`R$ ${platformMetrics.cpl.toFixed(2)}`}\r\n              icon={<Users />}\r\n              description=\"Custo por lead - valor m├®dio investido para gerar um lead\"\r\n              trend={{\r\n                value: -2.1,\r\n                label: \"-2.1% vs per├¡odo anterior\",\r\n                direction: 'down'\r\n              }}\r\n              iconBgClass=\"bg-purple-100 dark:bg-purple-900/30\"\r\n              iconTextClass=\"text-purple-600 dark:text-purple-400\"\r\n              loading={loading}\r\n            />\r\n\r\n            <MetricCard\r\n              title=\"Leads\"\r\n              value={platformMetrics.leads}\r\n              icon={<Users />}\r\n              description=\"Total de leads gerados atrav├®s dos an├║ncios\"\r\n              absoluteValue={487}\r\n              trend={{\r\n                value: 12.3,\r\n                label: \"+12.3% vs per├¡odo anterior\",\r\n                direction: 'up'\r\n              }}\r\n              iconBgClass=\"bg-emerald-100 dark:bg-emerald-900/30\"\r\n              iconTextClass=\"text-emerald-600 dark:text-emerald-400\"\r\n              loading={loading}\r\n            />\r\n\r\n            <MetricCard\r\n              title=\"ROAS\"\r\n              value={`${platformMetrics.roas.toFixed(1)}x`}\r\n              icon={<TrendingUp />}\r\n              description=\"Retorno sobre investimento em an├║ncios\"\r\n              trend={{\r\n                value: 15.8,\r\n                label: \"+15.8% vs per├¡odo anterior\",\r\n                direction: 'up'\r\n              }}\r\n              iconBgClass=\"bg-cyan-100 dark:bg-cyan-900/30\"\r\n              iconTextClass=\"text-cyan-600 dark:text-cyan-400\"\r\n              loading={loading}\r\n            />\r\n          </div>\r\n\r\n          {/* Gr├íficos */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Gr├ífico de Investimento */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg\">Investimento por Plataforma</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <LineChart data={investmentData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                    <XAxis \r\n                      dataKey=\"date\" \r\n                      className=\"text-xs fill-muted-foreground\"\r\n                    />\r\n                    <YAxis \r\n                      className=\"text-xs fill-muted-foreground\"\r\n                      tickFormatter={(value) => `R$ ${value}`}\r\n                    />\r\n                    <Tooltip content={<CustomTooltip />} />\r\n                    <Legend />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"facebook\"\r\n                      stroke=\"#1877F2\"\r\n                      strokeWidth={2}\r\n                      dot={{ fill: \"#1877F2\", strokeWidth: 2, r: 4 }}\r\n                      name=\"Facebook\"\r\n                    />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"google\"\r\n                      stroke=\"#4285F4\"\r\n                      strokeWidth={2}\r\n                      dot={{ fill: \"#4285F4\", strokeWidth: 2, r: 4 }}\r\n                      name=\"Google\"\r\n                    />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"instagram\"\r\n                      stroke=\"#E4405F\"\r\n                      strokeWidth={2}\r\n                      dot={{ fill: \"#E4405F\", strokeWidth: 2, r: 4 }}\r\n                      name=\"Instagram\"\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Gr├ífico de Leads por Fonte */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg\">Leads por Fonte</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={leadsBySourceData}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      labelLine={false}\r\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                      outerRadius={80}\r\n                      fill=\"#8884d8\"\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {leadsBySourceData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdManagerSection;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\ConversationsChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1195,1198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1195,1198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { MessageCircle } from \"lucide-react\";\r\n\r\ninterface ConversationData {\r\n  date: string;\r\n  iniciadas: number;\r\n  respondidas: number;\r\n  naoRespondidas: number;\r\n}\r\n\r\ninterface ConversationsChartProps {\r\n  data: ConversationData[];\r\n  loading?: boolean;\r\n  title?: string;\r\n  height?: number;\r\n}\r\n\r\nconst ConversationsChart: React.FC<ConversationsChartProps> = ({\r\n  data,\r\n  loading = false,\r\n  title = \"Conversas ao Longo do Tempo\",\r\n  height = 300,\r\n}) => {\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <MessageCircle className=\"h-5 w-5 text-primary\" />\r\n            {title}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Skeleton className={`w-full h-[${height}px]`} />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium\">{label}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\r\n              {entry.name}: {entry.value}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <MessageCircle className=\"h-5 w-5 text-primary\" />\r\n          {title}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={height}>\r\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n            <XAxis \r\n              dataKey=\"date\" \r\n              className=\"text-xs fill-muted-foreground\"\r\n            />\r\n            <YAxis \r\n              className=\"text-xs fill-muted-foreground\"\r\n            />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"iniciadas\"\r\n              stroke=\"hsl(var(--chart-1))\"\r\n              strokeWidth={2}\r\n              dot={{ fill: \"hsl(var(--chart-1))\", strokeWidth: 2, r: 4 }}\r\n              activeDot={{ r: 6, fill: \"hsl(var(--chart-1))\" }}\r\n              name=\"Conversas Iniciadas\"\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"respondidas\"\r\n              stroke=\"hsl(var(--chart-2))\"\r\n              strokeWidth={2}\r\n              dot={{ fill: \"hsl(var(--chart-2))\", strokeWidth: 2, r: 4 }}\r\n              activeDot={{ r: 6, fill: \"hsl(var(--chart-2))\" }}\r\n              name=\"Conversas Respondidas\"\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"naoRespondidas\"\r\n              stroke=\"hsl(var(--chart-3))\"\r\n              strokeWidth={2}\r\n              dot={{ fill: \"hsl(var(--chart-3))\", strokeWidth: 2, r: 4 }}\r\n              activeDot={{ r: 6, fill: \"hsl(var(--chart-3))\" }}\r\n              name=\"N├úo Respondidas\"\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ConversationsChart;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\MetricsFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\enhanced\\NewLeadsOverTimeChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1423,1426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1423,1426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { TrendingUp } from \"lucide-react\";\r\n\r\ninterface LeadData {\r\n  date: string;\r\n  leads: number;\r\n  converted: number;\r\n  source?: string;\r\n}\r\n\r\ninterface NewLeadsOverTimeChartProps {\r\n  data: LeadData[];\r\n  loading?: boolean;\r\n  title?: string;\r\n  height?: number;\r\n}\r\n\r\nconst NewLeadsOverTimeChart: React.FC<NewLeadsOverTimeChartProps> = ({\r\n  data,\r\n  loading = false,\r\n  title = \"Total de Leads Novos ao Longo do Tempo\",\r\n  height = 300,\r\n}) => {\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <TrendingUp className=\"h-5 w-5 text-primary\" />\r\n            {title}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Skeleton className={`w-full h-[${height}px]`} />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium\">{label}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\r\n              {entry.name}: {entry.value}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <TrendingUp className=\"h-5 w-5 text-primary\" />\r\n          {title}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={height}>\r\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n            <XAxis \r\n              dataKey=\"date\" \r\n              className=\"text-xs fill-muted-foreground\"\r\n            />\r\n            <YAxis \r\n              className=\"text-xs fill-muted-foreground\"\r\n            />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"leads\"\r\n              stroke=\"hsl(var(--primary))\"\r\n              strokeWidth={2}\r\n              dot={{ fill: \"hsl(var(--primary))\", strokeWidth: 2, r: 4 }}\r\n              activeDot={{ r: 6, fill: \"hsl(var(--primary))\" }}\r\n              name=\"Novos Leads\"\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"converted\"\r\n              stroke=\"hsl(var(--chart-2))\"\r\n              strokeWidth={2}\r\n              dot={{ fill: \"hsl(var(--chart-2))\", strokeWidth: 2, r: 4 }}\r\n              activeDot={{ r: 6, fill: \"hsl(var(--chart-2))\" }}\r\n              name=\"Convertidos\"\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NewLeadsOverTimeChart;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\DetailedMetricsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\KPISection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\MetricsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\PerformanceChartsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[488,491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[488,491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[922,925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[922,925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[935,938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[935,938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[952,955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[952,955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport ConversationChart from '../ConversationChart';\r\nimport ConversionFunnelChart from '../ConversionFunnelChart';\r\nimport ConversionByTimeChart from '../ConversionByTimeChart';\r\nimport LeadsAverageByTimeChart from '../LeadsAverageByTimeChart';\r\nimport KanbanStagesFunnelChart from '../KanbanStagesFunnelChart';\r\nimport SectionHeader from './SectionHeader';\r\n\r\ninterface PerformanceChartsSectionProps {\r\n  conversationData: any[];\r\n  conversionFunnelData: any[];\r\n  conversionByTimeData: any[];\r\n  leadsAverageByTimeData: any[];\r\n  noShowRate: number;\r\n  loading: boolean;\r\n  transformedDataLoading: boolean;\r\n}\r\n\r\nconst PerformanceChartsSection: React.FC<PerformanceChartsSectionProps> = ({\r\n  conversationData,\r\n  conversionFunnelData,\r\n  conversionByTimeData,\r\n  leadsAverageByTimeData,\r\n  noShowRate,\r\n  loading,\r\n  transformedDataLoading,\r\n}) => {\r\n  const handleFilterChange = (date: any, stages: any, showNoShow: any) => {\r\n    console.log(\"Filtro aplicado no Funil de Convers├úo:\", {\r\n      date,\r\n      stages,\r\n      showNoShow,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <SectionHeader \r\n        title=\"­ƒôê An├ílise de Performance\" \r\n        borderColor=\"border-yellow-200 dark:border-yellow-700\" \r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <ConversationChart\r\n          data={conversationData}\r\n          loading={loading}\r\n        />\r\n        <ConversionFunnelChart\r\n          data={conversionFunnelData}\r\n          loading={transformedDataLoading}\r\n          noShowRate={noShowRate}\r\n          onFilterChange={handleFilterChange}\r\n        />\r\n      </div>\r\n\r\n      {/* Funil de Est├ígios do Kanban - Agora com hook correto */}\r\n      <div className=\"w-full\">\r\n        <KanbanStagesFunnelChart />\r\n      </div>\r\n\r\n      <ConversionByTimeChart\r\n        data={conversionByTimeData}\r\n        loading={loading}\r\n      />\r\n\r\n      <LeadsAverageByTimeChart\r\n        data={leadsAverageByTimeData}\r\n        loading={loading}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceChartsSection;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\SectionHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\metrics\\sections\\TimeMetricsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\PaymentTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\ProfileInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\profile\\SecurityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AgendaSelectionTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AppointmentDateTimeSelection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\AppointmentsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarGridHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarHeaderBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarView.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'weeks' is never reassigned. Use 'const' instead.","line":99,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":99,"endColumn":24,"fix":{"range":[2714,2739],"text":"const weeks: Date[][] = [];"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo } from \"react\";\r\nimport {\r\n  startOfMonth,\r\n  endOfMonth,\r\n  eachDayOfInterval,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  startOfDay,\r\n  endOfDay,\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  isSameDay,\r\n  isSameMonth,\r\n  parseISO,\r\n} from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { CalendarEvent } from \"@/types/calendar\";\r\nimport { CalendarGridHeader } from \"./CalendarGridHeader\";\r\nimport { CalendarWeek } from \"./CalendarWeek\";\r\nimport { DayEventsView } from \"./DayEventsView\";\r\nimport { CalendarHeaderBar } from \"./CalendarHeaderBar\";\r\nimport { groupEventsByDay } from \"@/utils/eventUtils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\n\r\ninterface CalendarViewProps {\r\n  selectedDate: Date;\r\n  onDateChange: (date: Date) => void;\r\n  events: CalendarEvent[];\r\n  currentMonth: Date;\r\n  onMonthChange: (month: Date) => void;\r\n  view: \"mes\" | \"semana\" | \"dia\" | \"lista\";\r\n  onEventClick?: (event: CalendarEvent) => void;\r\n  onPeriodChange?: (start: Date, end: Date) => void;\r\n  goToPrevious: () => void;\r\n  goToNext: () => void;\r\n}\r\n\r\nexport function CalendarView({\r\n  selectedDate,\r\n  onDateChange,\r\n  events,\r\n  currentMonth,\r\n  onMonthChange,\r\n  view,\r\n  onEventClick,\r\n  onPeriodChange,\r\n  goToPrevious,\r\n  goToNext,\r\n}: CalendarViewProps) {\r\n  // Determinar o per├¡odo de exibi├º├úo com useMemo para otimiza├º├úo\r\n  const displayPeriod = useMemo(() => {\r\n    switch (view) {\r\n      case \"dia\":\r\n        return {\r\n          start: startOfDay(selectedDate),\r\n          end: endOfDay(selectedDate),\r\n        };\r\n      case \"semana\": {\r\n        const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd };\r\n      }\r\n      case \"mes\":\r\n      default:\r\n        return {\r\n          start: startOfMonth(currentMonth),\r\n          end: endOfMonth(currentMonth),\r\n        };\r\n    }\r\n  }, [view, selectedDate, currentMonth]);\r\n\r\n  React.useEffect(() => {\r\n    if (onPeriodChange) {\r\n      onPeriodChange(displayPeriod.start, displayPeriod.end);\r\n    }\r\n  }, [onPeriodChange, displayPeriod.start, displayPeriod.end]);\r\n\r\n  const days = eachDayOfInterval({\r\n    start: displayPeriod.start,\r\n    end: displayPeriod.end,\r\n  });\r\n\r\n  const handleEventClick = useCallback(\r\n    (event: CalendarEvent, e: React.MouseEvent) => {\r\n      e.stopPropagation();\r\n      if (onEventClick) {\r\n        onEventClick(event);\r\n      }\r\n    },\r\n    [onEventClick],\r\n  );\r\n\r\n  const isMonthOrWeekMode = view === \"mes\" || view === \"semana\";\r\n\r\n  const buildWeeks = () => {\r\n    const daysArr = [...days];\r\n    let weeks: Date[][] = [];\r\n    \r\n    // For month view, we need to include days from previous/next months to fill the grid\r\n    if (view === \"mes\") {\r\n      const monthStart = startOfMonth(currentMonth);\r\n      const monthEnd = endOfMonth(currentMonth);\r\n      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 });\r\n      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });\r\n      \r\n      const allDays = eachDayOfInterval({ start: startDate, end: endDate });\r\n      for (let i = 0; i < allDays.length; i += 7) {\r\n        weeks.push(allDays.slice(i, i + 7));\r\n      }\r\n    } else {\r\n      // For week view, just use the days array\r\n      for (let i = 0; i < daysArr.length; i += 7) {\r\n        weeks.push(daysArr.slice(i, i + 7));\r\n      }\r\n    }\r\n    \r\n    return weeks;\r\n  };\r\n\r\n  const weeks = buildWeeks();\r\n\r\n  const eventsByDay = useMemo(() => groupEventsByDay(events), [events]);\r\n\r\n  const getCalendarTitle = () => {\r\n    switch (view) {\r\n      case \"dia\":\r\n        return format(selectedDate, \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR });\r\n      case \"semana\": {\r\n        const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\r\n        return `${format(weekStart, \"dd/MM\", {\r\n          locale: ptBR,\r\n        })} a ${format(weekEnd, \"dd/MM\", { locale: ptBR })}`;\r\n      }\r\n      case \"lista\":\r\n        return \"Todos os Agendamentos\";\r\n      case \"mes\":\r\n      default:\r\n        return format(currentMonth, \"MMMM 'de' yyyy\", { locale: ptBR });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full bg-[#1e2330] dark:bg-[#1e2330] border rounded-xl shadow-sm overflow-hidden animate-fade-in text-white\">\r\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\r\n        <h2 className=\"text-lg font-semibold text-white\">\r\n          {getCalendarTitle()}\r\n        </h2>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\" onClick={goToPrevious} className=\"text-white border-gray-600 hover:bg-gray-700\">\r\n            <ChevronLeft className=\"h-4 w-4\" />\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={goToNext} className=\"text-white border-gray-600 hover:bg-gray-700\">\r\n            <ChevronRight className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Grid principal */}\r\n      <div className=\"px-2 pb-2 pt-3 animate-fade-in flex-1 min-h-0\">\r\n        {isMonthOrWeekMode && <CalendarGridHeader />}\r\n\r\n        {isMonthOrWeekMode ? (\r\n          <div className=\"flex flex-col gap-0 h-full min-h-0\">\r\n            {weeks.map((week, weekIdx) => (\r\n              <CalendarWeek\r\n                key={weekIdx}\r\n                week={week}\r\n                currentMonth={currentMonth}\r\n                selectedDate={selectedDate}\r\n                eventsByDay={eventsByDay}\r\n                onDateChange={onDateChange}\r\n                onEventClick={handleEventClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : view === \"dia\" ? (\r\n          <DayEventsView\r\n            selectedDate={selectedDate}\r\n            dayEvents={\r\n              eventsByDay.get(startOfDay(selectedDate).toISOString()) || []\r\n            }\r\n            onEventClick={handleEventClick}\r\n          />\r\n        ) : (\r\n          // Lista de todos os eventos\r\n          <div className=\"h-full overflow-y-auto p-4\">\r\n            <div className=\"space-y-2\">\r\n              {events.length > 0 ? (\r\n                events.map((event) => (\r\n                  <div\r\n                    key={event.id}\r\n                    onClick={(e) => handleEventClick(event, e)}\r\n                    className=\"flex items-center p-3 bg-gray-800 border border-gray-700 rounded-lg hover:bg-gray-700 cursor-pointer\"\r\n                  >\r\n                    <div className=\"w-16 text-center\">\r\n                      <div className=\"text-sm font-medium\">\r\n                        {format(new Date(event.start), \"dd/MM\", { locale: ptBR })}\r\n                      </div>\r\n                      <div className=\"text-xs text-gray-400\">\r\n                        {format(new Date(event.start), \"HH:mm\")}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ml-4 flex-1\">\r\n                      <div className=\"font-medium\">{event.summary}</div>\r\n                      <div className=\"text-sm text-gray-400\">\r\n                        {event.attendees?.[0]?.email || \"Sem participante\"}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <span\r\n                        className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                          event.status === \"confirmed\"\r\n                            ? \"bg-green-900/30 text-green-300\"\r\n                            : event.status === \"tentative\"\r\n                            ? \"bg-yellow-900/30 text-yellow-300\"\r\n                            : \"bg-red-900/30 text-red-300\"\r\n                        }`}\r\n                      >\r\n                        {event.status === \"confirmed\"\r\n                          ? \"Confirmado\"\r\n                          : event.status === \"tentative\"\r\n                          ? \"Pendente\"\r\n                          : \"Cancelado\"}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"text-center py-8 text-gray-400\">\r\n                  Nenhum evento encontrado\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarViewSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface CalendarViewSwitcherProps {\r\n  view: \"mes\" | \"semana\" | \"dia\" | \"agenda\";\r\n  onChange: (view: \"mes\" | \"semana\" | \"dia\" | \"agenda\") => void;\r\n}\r\n\r\nexport const CalendarViewSwitcher: React.FC<CalendarViewSwitcherProps> = ({\r\n  view,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-1 bg-black/10 dark:bg-white/10 rounded-lg p-1\">\r\n      {[\r\n        { key: \"mes\", label: \"M├¬s\" },\r\n        { key: \"semana\", label: \"Semana\" },\r\n        { key: \"dia\", label: \"Dia\" },\r\n        { key: \"lista\", label: \"Lista\" },\r\n      ].map((item) => (\r\n        <Button\r\n          key={item.key}\r\n          size=\"sm\"\r\n          variant={view === item.key ? \"default\" : \"ghost\"}\r\n          className={\r\n            view === item.key\r\n              ? \"bg-white text-blue-700 shadow-md h-7 px-2 text-xs\"\r\n              : \"text-white hover:bg-white/20 h-7 px-2 text-xs\"\r\n          }\r\n          onClick={() => onChange(item.key as any)}\r\n        >\r\n          {item.label}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\CalendarWeek.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\DayCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\DayEventsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1220,1223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1220,1223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from \"react\";\r\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\r\nimport { isSameDay, parseISO, format } from \"date-fns\";\r\nimport { ptBR } from \"date-fns/locale\";\r\nimport { Calendar, Clock } from \"lucide-react\";\r\n\r\ninterface EventSidebarProps {\r\n  selectedDate: Date | undefined;\r\n  events: CalendarEvent[];\r\n  onEventClick: (event: CalendarEvent) => void;\r\n}\r\n\r\nconst salespeople = [\r\n  { id: \"joao\", name: \"Jo├úo\", color: \"#4f46e5\" },\r\n  { id: \"maria\", name: \"Maria\", color: \"#10b981\" },\r\n  { id: \"pedro\", name: \"Pedro\", color: \"#f59e0b\" },\r\n  { id: \"ana\", name: \"Ana\", color: \"#ef4444\" },\r\n  { id: \"arthur\", name: \"Arthur\", color: \"#8b5cf6\" },\r\n];\r\n\r\nexport function EventSidebar({\r\n  selectedDate,\r\n  events,\r\n  onEventClick,\r\n}: EventSidebarProps) {\r\n  const eventsForSelectedDay = useMemo(() => {\r\n    if (!selectedDate) return [];\r\n    return events.filter((event) => {\r\n      try {\r\n        const eventDate = parseISO(event.start as unknown as string);\r\n        return isSameDay(eventDate, selectedDate);\r\n      } catch {\r\n        return false;\r\n      }\r\n    });\r\n  }, [events, selectedDate]);\r\n\r\n  const eventsBySalesperson = useMemo(() => {\r\n    const grouped: Record<string, any[]> = {};\r\n    eventsForSelectedDay.forEach((event) => {\r\n      let salesperson = \"N├úo atribu├¡do\";\r\n      let color = \"#6b7280\";\r\n\r\n      const matchingSalesperson = salespeople.find(\r\n        (sp) => sp.name.toLowerCase() === event.hostName?.toLowerCase(),\r\n      );\r\n\r\n      if (matchingSalesperson) {\r\n        salesperson = matchingSalesperson.name;\r\n        color = matchingSalesperson.color;\r\n      }\r\n\r\n      if (!grouped[salesperson]) {\r\n        grouped[salesperson] = [];\r\n      }\r\n      grouped[salesperson].push({\r\n        ...event,\r\n        time: format(parseISO(event.start as unknown as string), \"HH:mm\"),\r\n        color,\r\n      });\r\n    });\r\n    return grouped;\r\n  }, [eventsForSelectedDay]);\r\n\r\n  const handleEventCardClick = (event: CalendarEvent) => {\r\n    onEventClick(event);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full md:w-80 flex-shrink-0 border-t md:border-t-0 md:border-l border-gray-700\">\r\n      <div className=\"bg-gray-800 h-full p-4\">\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex items-center mb-1\">\r\n            <Clock className=\"h-5 w-5 text-purple-400 mr-2\" />\r\n            <h3 className=\"text-lg font-semibold text-white\">\r\n              {selectedDate &&\r\n                format(selectedDate, \"dd 'de' MMMM 'de' yyyy\", {\r\n                  locale: ptBR,\r\n                })}\r\n            </h3>\r\n          </div>\r\n          <p className=\"text-gray-400 text-sm\">\r\n            {selectedDate && format(selectedDate, \"EEEE\", { locale: ptBR })}\r\n          </p>\r\n        </div>\r\n\r\n        {Object.keys(eventsBySalesperson).length === 0 ? (\r\n          <div className=\"flex flex-col items-center justify-center py-12\">\r\n            <div className=\"w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center mb-4\">\r\n              <Calendar className=\"h-8 w-8 text-gray-500\" />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-white mb-2\">Dia livre</h3>\r\n            <p className=\"text-gray-400 text-sm text-center\">\r\n              Nenhum Vendedor tem Compromissos para esse dia.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {Object.entries(eventsBySalesperson).map(\r\n              ([salesperson, salespersonEvents]) => (\r\n                <div key={salesperson} className=\"space-y-2\">\r\n                  <h4 className=\"text-sm font-medium text-white flex items-center\">\r\n                    <div\r\n                      className=\"w-3 h-3 rounded-full mr-2\"\r\n                      style={{ backgroundColor: salespersonEvents[0].color }}\r\n                    />\r\n                    {salesperson}\r\n                  </h4>\r\n                  <div className=\"space-y-2\">\r\n                    {salespersonEvents.map((event) => (\r\n                      <div\r\n                        key={event.id}\r\n                        className=\"bg-gray-700 rounded-md p-3 hover:bg-gray-600 cursor-pointer\"\r\n                        onClick={() => handleEventCardClick(event)}\r\n                      >\r\n                        <div className=\"flex justify-between items-start\">\r\n                          <div>\r\n                            <h5 className=\"font-medium text-white\">\r\n                              {event.title}\r\n                            </h5>\r\n                            <p className=\"text-gray-400 text-sm\">\r\n                              {event.time}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ),\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventSidebar;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\EventsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\NewAppointmentFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleDialogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleFilters.tsx","messages":[{"ruleId":"no-empty-pattern","severity":2,"message":"Unexpected empty object pattern.","line":15,"column":33,"nodeType":"ObjectPattern","messageId":"unexpected","endLine":16,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\ninterface ScheduleFiltersProps {\n  viewMode: \"calendar\" | \"list\";\n  onViewModeChange: (mode: \"calendar\" | \"list\") => void;\n  statusFilter: string;\n  onStatusFilterChange: (status: string) => void;\n  calendarFilter: string;\n  onCalendarFilterChange: (calendar: string) => void;\n  hostFilter: string;\n  onHostFilterChange: (host: string) => void;\n  onAddEvent: () => void;\n}\n\nexport function ScheduleFilters({} // mantendo props para compatibilidade, mas n├úo usados mais\n: ScheduleFiltersProps) {\n  // Layout vazio (sem filtros/seletores)\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleMetricsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\schedule\\ScheduleTestComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\AddPaymentMethodDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\CancelSubscriptionDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\ChangePlanDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\InvoicesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\subscription\\PaymentMethodsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":67,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":67,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm hover:shadow\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        success:\n          \"bg-green-500 text-white hover:bg-green-600 shadow-sm shadow-green-200 dark:shadow-green-900/30\",\n        warning:\n          \"bg-amber-500 text-white hover:bg-amber-600 shadow-sm shadow-amber-200 dark:shadow-amber-900/30\",\n        danger:\n          \"bg-red-500 text-white hover:bg-red-600 shadow-sm shadow-red-200 dark:shadow-red-900/30\",\n        control: \"bg-gradient-to-r hover:shadow-md transition-all duration-200\",\n        refresh:\n          \"bg-blue-500 text-white hover:bg-blue-600 shadow-sm shadow-blue-200 dark:shadow-blue-900/30\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-8 rounded-md px-2.5 text-xs\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-8 w-8\",\n        xs: \"h-6 rounded-md px-2 text-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\memoized-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,161],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\components\\ui\\virtualized-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":104,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":104,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useCallback } from 'react';\r\nimport { FixedSizeList as List, VariableSizeList } from 'react-window';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface VirtualizedListProps<T> {\r\n  items: T[];\r\n  height: number;\r\n  itemHeight: number | ((index: number) => number);\r\n  renderItem: (item: T, index: number, style: React.CSSProperties) => React.ReactNode;\r\n  className?: string;\r\n  onScroll?: (props: any) => void;\r\n  overscanCount?: number;\r\n  variableSize?: boolean;\r\n}\r\n\r\n/**\r\n * Componente de lista virtualizada para renderiza├º├úo eficiente de grandes datasets\r\n * Utiliza react-window para otimiza├º├úo de performance\r\n */\r\nexport function VirtualizedList<T>({\r\n  items,\r\n  height,\r\n  itemHeight,\r\n  renderItem,\r\n  className,\r\n  onScroll,\r\n  overscanCount = 5,\r\n  variableSize = false,\r\n}: VirtualizedListProps<T>) {\r\n  \r\n  // Memoizar a fun├º├úo de renderiza├º├úo para evitar re-cria├º├Áes\r\n  const Item = useCallback(({ index, style }: { index: number; style: React.CSSProperties }) => {\r\n    const item = items[index];\r\n    if (!item) return null;\r\n    \r\n    return (\r\n      <div style={style}>\r\n        {renderItem(item, index, style)}\r\n      </div>\r\n    );\r\n  }, [items, renderItem]);\r\n\r\n  // Memoizar o componente de lista\r\n  const ListComponent = useMemo(() => {\r\n    const listProps = {\r\n      height,\r\n      width: \"100%\",\r\n      itemCount: items.length,\r\n      onScroll,\r\n      overscanCount,\r\n      className: cn('virtualized-list', className),\r\n    };\r\n\r\n    if (variableSize && typeof itemHeight === 'function') {\r\n      return (\r\n        <VariableSizeList\r\n          {...listProps}\r\n          itemSize={itemHeight}\r\n        >\r\n          {Item}\r\n        </VariableSizeList>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <List\r\n        {...listProps}\r\n        itemSize={typeof itemHeight === 'number' ? itemHeight : 50}\r\n      >\r\n        {Item}\r\n      </List>\r\n    );\r\n  }, [\r\n    height,\r\n    items.length,\r\n    itemHeight,\r\n    onScroll,\r\n    overscanCount,\r\n    className,\r\n    variableSize,\r\n    Item\r\n  ]);\r\n\r\n  if (items.length === 0) {\r\n    return (\r\n      <div \r\n        className={cn(\r\n          'flex items-center justify-center text-muted-foreground',\r\n          className\r\n        )}\r\n        style={{ height }}\r\n      >\r\n        Nenhum item encontrado\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return ListComponent;\r\n}\r\n\r\n/**\r\n * Hook para calcular altura din├ómica de itens\r\n */\r\nexport const useVariableItemHeight = <T,>(\r\n  items: T[],\r\n  getItemHeight: (item: T, index: number) => number,\r\n  defaultHeight: number = 50\r\n) => {\r\n  return useCallback((index: number) => {\r\n    const item = items[index];\r\n    if (!item) return defaultHeight;\r\n    return getItemHeight(item, index);\r\n  }, [items, getItemHeight, defaultHeight]);\r\n};\r\n\r\n/**\r\n * Componente espec├¡fico para tabelas virtualizadas\r\n */\r\ninterface VirtualizedTableProps<T> {\r\n  data: T[];\r\n  columns: Array<{\r\n    key: keyof T;\r\n    header: string;\r\n    width?: number;\r\n    render?: (item: T, index: number) => React.ReactNode;\r\n  }>;\r\n  rowHeight?: number;\r\n  height?: number;\r\n  className?: string;\r\n  onRowClick?: (item: T, index: number) => void;\r\n}\r\n\r\nexport function VirtualizedTable<T>({\r\n  data,\r\n  columns,\r\n  rowHeight = 60,\r\n  height = 400,\r\n  className,\r\n  onRowClick,\r\n}: VirtualizedTableProps<T>) {\r\n  \r\n  const renderRow = useCallback((item: T, index: number, style: React.CSSProperties) => (\r\n    <div \r\n      style={style}\r\n      className={cn(\r\n        'flex items-center border-b border-border hover:bg-muted/50',\r\n        onRowClick && 'cursor-pointer',\r\n        className\r\n      )}\r\n      onClick={() => onRowClick?.(item, index)}\r\n    >\r\n      {columns.map((column, colIndex) => (\r\n        <div \r\n          key={String(column.key)}\r\n          className=\"px-4 py-2 flex-1\"\r\n          style={{ \r\n            width: column.width || `${100 / columns.length}%`,\r\n            minWidth: column.width || 'auto'\r\n          }}\r\n        >\r\n          {column.render ? column.render(item, index) : String(item[column.key] || '')}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ), [columns, onRowClick, className]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center border-b-2 border-border bg-muted/50 font-semibold\">\r\n        {columns.map((column) => (\r\n          <div \r\n            key={String(column.key)}\r\n            className=\"px-4 py-3 flex-1\"\r\n            style={{ \r\n              width: column.width || `${100 / columns.length}%`,\r\n              minWidth: column.width || 'auto'\r\n            }}\r\n          >\r\n            {column.header}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Virtualized Body */}\r\n      <VirtualizedList\r\n        items={data}\r\n        height={height}\r\n        itemHeight={rowHeight}\r\n        renderItem={renderRow}\r\n        className=\"border border-t-0\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Componente de loading skeleton para listas virtualizadas\r\n */\r\ninterface VirtualizedSkeletonProps {\r\n  height: number;\r\n  itemHeight: number;\r\n  itemCount?: number;\r\n}\r\n\r\nexport const VirtualizedSkeleton = React.memo<VirtualizedSkeletonProps>(({\r\n  height,\r\n  itemHeight,\r\n  itemCount = 10,\r\n}) => {\r\n  const skeletonItems = useMemo(() => \r\n    Array.from({ length: itemCount }, (_, i) => i), \r\n    [itemCount]\r\n  );\r\n\r\n  const renderSkeletonItem = useCallback((item: number, index: number) => (\r\n    <div className=\"flex items-center space-x-4 p-4 animate-pulse\">\r\n      <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n      <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n    </div>\r\n  ), []);\r\n\r\n  return (\r\n    <VirtualizedList\r\n      items={skeletonItems}\r\n      height={height}\r\n      itemHeight={itemHeight}\r\n      renderItem={renderSkeletonItem}\r\n    />\r\n  );\r\n});\r\n\r\nVirtualizedSkeleton.displayName = 'VirtualizedSkeleton';","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\config\\columnConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Contact } from \"@/types/client\";\r\n\r\n// Defini├º├úo de tipos para configura├º├úo de colunas\r\nexport interface ColumnConfig {\r\n  id: string;\r\n  label: string;\r\n  accessor: keyof Contact | ((contact: Contact) => any);\r\n  isVisible: boolean;\r\n  priority: number; // Quanto menor, mais importante (usado para responsividade)\r\n  minWidth?: number;\r\n  maxWidth?: number;\r\n  renderCell?: (contact: Contact) => React.ReactNode;\r\n}\r\n\r\n// Configura├º├úo padr├úo das colunas\r\nexport const defaultColumnConfig: ColumnConfig[] = [\r\n  {\r\n    id: \"name\",\r\n    label: \"Nome\",\r\n    accessor: \"name\",\r\n    isVisible: true,\r\n    priority: 1,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"contact\",\r\n    label: \"Contato\",\r\n    accessor: (contact) => ({ phone: contact.phone, email: contact.email }),\r\n    isVisible: true,\r\n    priority: 2,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"clientName\",\r\n    label: \"Cliente/Empresa\",\r\n    accessor: \"clientName\",\r\n    isVisible: true,\r\n    priority: 3,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"tags\",\r\n    label: \"Tags\",\r\n    accessor: \"tags\",\r\n    isVisible: true,\r\n    priority: 4,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"consultationStage\",\r\n    label: \"Est├ígio\",\r\n    accessor: \"consultationStage\",\r\n    isVisible: true,\r\n    priority: 5,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    accessor: \"status\",\r\n    isVisible: true,\r\n    priority: 3,\r\n    minWidth: 100,\r\n  },\r\n  {\r\n    id: \"kanbanStage\",\r\n    label: \"Segmento\",\r\n    accessor: \"kanbanStage\",\r\n    isVisible: true,\r\n    priority: 4,\r\n    minWidth: 120,\r\n  },\r\n  {\r\n    id: \"lastMessage\",\r\n    label: \"├Ültima Mensagem\",\r\n    accessor: (contact) => ({\r\n      message: contact.lastMessage,\r\n      time: contact.lastMessageTime || contact.lastContact,\r\n      unreadCount: contact.unreadCount,\r\n    }),\r\n    isVisible: true,\r\n    priority: 6,\r\n    minWidth: 200,\r\n  },\r\n  {\r\n    id: \"budget\",\r\n    label: \"Or├ºamento\",\r\n    accessor: \"budget\",\r\n    isVisible: false,\r\n    priority: 7,\r\n    minWidth: 100,\r\n  },\r\n  {\r\n    id: \"clientObjective\",\r\n    label: \"Objetivo\",\r\n    accessor: \"clientObjective\",\r\n    isVisible: false,\r\n    priority: 8,\r\n    minWidth: 150,\r\n  },\r\n  {\r\n    id: \"responsibleUser\",\r\n    label: \"Respons├ível\",\r\n    accessor: \"responsibleUser\",\r\n    isVisible: false,\r\n    priority: 7,\r\n    minWidth: 120,\r\n  },\r\n];\r\n\r\n// Fun├º├úo para obter configura├º├úo de colunas (com possibilidade de carregar do localStorage)\r\nexport const getColumnConfig = (): ColumnConfig[] => {\r\n  try {\r\n    const savedConfig = localStorage.getItem(\"clientTableColumnConfig\");\r\n    if (savedConfig) {\r\n      return JSON.parse(savedConfig);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erro ao carregar configura├º├úo de colunas:\", error);\r\n  }\r\n  return defaultColumnConfig;\r\n};\r\n\r\n// Fun├º├úo para salvar configura├º├úo de colunas\r\nexport const saveColumnConfig = (config: ColumnConfig[]): void => {\r\n  try {\r\n    localStorage.setItem(\"clientTableColumnConfig\", JSON.stringify(config));\r\n  } catch (error) {\r\n    console.error(\"Erro ao salvar configura├º├úo de colunas:\", error);\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\constants\\eventFormConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[479,482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[479,482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":71,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":71,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  isLoading: boolean;\r\n  userProfile?: any; // Add userProfile for compatibility\r\n  isAdmin?: boolean; // Add isAdmin for compatibility\r\n  signIn: (email: string, password: string) => Promise<{ error?: any }>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Set up auth state listener FIRST\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      (event, session) => {\r\n        setSession(session);\r\n        setUser(session?.user ?? null);\r\n        setIsLoading(false);\r\n      }\r\n    );\r\n\r\n    // THEN check for existing session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n      return { error };\r\n    } catch (error) {\r\n      return { error };\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    isLoading,\r\n    userProfile: null, // Mock value for now\r\n    isAdmin: false, // Mock value for now\r\n    signIn,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\SupabaseContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface SupabaseContextType {\r\n  supabase: typeof supabase;\r\n}\r\n\r\nconst SupabaseContext = createContext<SupabaseContextType | undefined>(undefined);\r\n\r\nexport const SupabaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  return (\r\n    <SupabaseContext.Provider value={{ supabase }}>\r\n      {children}\r\n    </SupabaseContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSupabase = () => {\r\n  const context = useContext(SupabaseContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSupabase must be used within a SupabaseProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":66,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":66,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"petparadise-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme,\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\context\\ThemeSettingsContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":66,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":66,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from \"react\";\n\nexport interface ThemeSettings {\n  brandName: string;\n  logo: string | null;\n  primaryColor: string;\n  secondaryColor: string;\n  accentColor: string;\n}\n\ntype ThemeSettingsContextType = {\n  settings: ThemeSettings;\n  updateSettings: (newSettings: Partial<ThemeSettings>) => void;\n  resetSettings: () => void;\n};\n\nconst defaultSettings: ThemeSettings = {\n  brandName: \"Valore N├íutico\",\n  logo: null,\n  primaryColor: \"#1e40af\",\n  secondaryColor: \"#f59e0b\",\n  accentColor: \"#1e3a8a\",\n};\n\nconst ThemeSettingsContext = createContext<\n  ThemeSettingsContextType | undefined\n>(undefined);\n\nexport function ThemeSettingsProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [settings, setSettings] = useState<ThemeSettings>(() => {\n    const saved = localStorage.getItem(\"valore-theme-settings\");\n    return saved ? JSON.parse(saved) : defaultSettings;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"valore-theme-settings\", JSON.stringify(settings));\n\n    // Apply theme colors to CSS variables\n    const root = document.documentElement;\n    root.style.setProperty(\"--valore-blue\", settings.primaryColor);\n    root.style.setProperty(\"--valore-gold\", settings.secondaryColor);\n    root.style.setProperty(\"--valore-navy\", settings.accentColor);\n  }, [settings]);\n\n  const updateSettings = (newSettings: Partial<ThemeSettings>) => {\n    setSettings((prev) => ({ ...prev, ...newSettings }));\n  };\n\n  const resetSettings = () => {\n    setSettings(defaultSettings);\n  };\n\n  return (\n    <ThemeSettingsContext.Provider\n      value={{ settings, updateSettings, resetSettings }}\n    >\n      {children}\n    </ThemeSettingsContext.Provider>\n  );\n}\n\nexport const useThemeSettings = () => {\n  const context = useContext(ThemeSettingsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useThemeSettings must be used within a ThemeSettingsProvider\",\n    );\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\data\\aiPersonalityTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseContactsData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseFunnelData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\__tests__\\useSupabaseMetrics.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\calendarCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\calendarEventActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\contactsMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIMessagesCrud.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[963,966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[963,966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AIMessage } from '@/types/ai';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  useCreateAIMessageMutation,\r\n  useUpdateAIMessageMutation,\r\n  useDeleteAIMessageMutation,\r\n} from '@/hooks/useAIMessagesQuery';\r\n\r\nexport function useAIMessagesCrud() {\r\n  const { toast } = useToast();\r\n  const createMutation = useCreateAIMessageMutation();\r\n  const updateMutation = useUpdateAIMessageMutation();\r\n  const deleteMutation = useDeleteAIMessageMutation();\r\n\r\n  const extractVariables = (content: string) => {\r\n    const matches = content.match(/\\{([^}]+)\\}/g);\r\n    return matches ? matches.map((m) => m.slice(1, -1)) : [];\r\n  };\r\n\r\n  const addMessage = async (data: {\r\n    category: string;\r\n    name: string;\r\n    content: string;\r\n    context: string;\r\n  }) => {\r\n    const payload = {\r\n      ...data,\r\n      variables: extractVariables(data.content),\r\n      is_active: true,\r\n    };\r\n    try {\r\n      await createMutation.mutateAsync(payload as any);\r\n      toast({\r\n        title: 'Mensagem adicionada',\r\n        description: 'Nova mensagem criada com sucesso!',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao criar mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateMessage = async (\r\n    id: string,\r\n    data: { category: string; name: string; content: string; context: string },\r\n  ) => {\r\n    const payload = {\r\n      ...data,\r\n      variables: extractVariables(data.content),\r\n    };\r\n    try {\r\n      await updateMutation.mutateAsync({ id, ...payload });\r\n      toast({\r\n        title: 'Mensagem atualizada',\r\n        description: 'Mensagem atualizada com sucesso!',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao atualizar mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteMessage = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id);\r\n      toast({\r\n        title: 'Mensagem exclu├¡da',\r\n        description: 'Mensagem removida com sucesso!',\r\n        variant: 'destructive',\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao excluir mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const toggleMessage = async (message: AIMessage) => {\r\n    try {\r\n      await updateMutation.mutateAsync({\r\n        id: message.id,\r\n        is_active: !message.is_active,\r\n      });\r\n    } catch {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Erro ao alterar status da mensagem.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = (content: string) => {\r\n    navigator.clipboard.writeText(content);\r\n    toast({\r\n      title: 'Copiado!',\r\n      description: 'Conte├║do copiado para a ├írea de transfer├¬ncia.',\r\n    });\r\n  };\r\n\r\n  return {\r\n    addMessage,\r\n    updateMessage,\r\n    deleteMessage,\r\n    toggleMessage,\r\n    copyToClipboard,\r\n    createPending: createMutation.isPending,\r\n    updatePending: updateMutation.isPending,\r\n  };\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIMessagesQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIPersonalityForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIPersonalityQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1463,1466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1463,1466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\ninterface AIPersonalitySettings {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  personality_type: string;\r\n  tone: string | null;\r\n  language: string | null;\r\n  temperature: number | null;\r\n  max_tokens: number | null;\r\n  system_prompt: string | null;\r\n  greeting_message: string | null;\r\n  response_style: string | null;\r\n  custom_instructions: string | null;\r\n  fallback_responses: any | null;\r\n  is_active: boolean | null;\r\n  created_at: string | null;\r\n  updated_at: string | null;\r\n  created_by: string | null;\r\n  updated_by: string | null;\r\n}\r\n\r\ninterface AIPersonalityInsert {\r\n  name: string;\r\n  description?: string;\r\n  personality_type: string;\r\n  tone?: string;\r\n  language?: string;\r\n  temperature?: number;\r\n  max_tokens?: number;\r\n  system_prompt?: string;\r\n  greeting_message?: string;\r\n  response_style?: string;\r\n  custom_instructions?: string;\r\n  fallback_responses?: any;\r\n  is_active?: boolean;\r\n}\r\n\r\ninterface AIPersonalityUpdate {\r\n  name?: string;\r\n  description?: string;\r\n  personality_type?: string;\r\n  tone?: string;\r\n  language?: string;\r\n  temperature?: number;\r\n  max_tokens?: number;\r\n  system_prompt?: string;\r\n  greeting_message?: string;\r\n  response_style?: string;\r\n  custom_instructions?: string;\r\n  fallback_responses?: any;\r\n  is_active?: boolean;\r\n}\r\n\r\n// Query keys\r\nexport const aiPersonalityKeys = {\r\n  all: ['aiPersonality'] as const,\r\n  lists: () => [...aiPersonalityKeys.all, 'list'] as const,\r\n  details: () => [...aiPersonalityKeys.all, 'detail'] as const,\r\n  detail: (id: string) => [...aiPersonalityKeys.details(), id] as const,\r\n  active: () => [...aiPersonalityKeys.all, 'active'] as const,\r\n};\r\n\r\n// Fetch AI personality settings\r\nconst fetchAIPersonalitySettings = async (): Promise<AIPersonalitySettings[]> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_personality_settings')\r\n    .select('*')\r\n    .order('created_at', { ascending: false });\r\n\r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\n// Fetch active AI personality settings\r\nconst fetchActiveAIPersonalitySettings = async (): Promise<AIPersonalitySettings | null> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_personality_settings')\r\n    .select('*')\r\n    .eq('is_active', true)\r\n    .single();\r\n\r\n  if (error && error.code !== 'PGRST116') throw error; // PGRST116 = no rows returned\r\n  return data;\r\n};\r\n\r\n// Create AI personality settings\r\nconst createAIPersonalitySettings = async (settings: AIPersonalityInsert): Promise<AIPersonalitySettings> => {\r\n  // Get the current user from the auth session\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) throw new Error('User not authenticated');\r\n\r\n  // First, deactivate all existing settings if this one is active\r\n  if (settings.is_active) {\r\n    await supabase\r\n      .from('ai_personality_settings')\r\n      .update({ is_active: false })\r\n      .eq('user_id', user.id);\r\n  }\r\n\r\n  const { data, error } = await supabase\r\n    .from('ai_personality_settings')\r\n    .insert({ ...settings, user_id: user.id })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\n// Update AI personality settings\r\nconst updateAIPersonalitySettings = async ({ id, ...updates }: { id: string } & AIPersonalityUpdate): Promise<AIPersonalitySettings> => {\r\n  // If setting this as active, deactivate all others first\r\n  if (updates.is_active) {\r\n    await supabase\r\n      .from('ai_personality_settings')\r\n      .update({ is_active: false })\r\n      .neq('id', id);\r\n  }\r\n\r\n  const { data, error } = await supabase\r\n    .from('ai_personality_settings')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\n// Delete AI personality settings\r\nconst deleteAIPersonalitySettings = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('ai_personality_settings')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) throw error;\r\n};\r\n\r\n// Hooks\r\nexport const useAIPersonalitySettingsQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiPersonalityKeys.lists(),\r\n    queryFn: fetchAIPersonalitySettings,\r\n  });\r\n};\r\n\r\nexport const useActiveAIPersonalitySettingsQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiPersonalityKeys.active(),\r\n    queryFn: fetchActiveAIPersonalitySettings,\r\n  });\r\n};\r\n\r\nexport const useCreateAIPersonalitySettingsMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createAIPersonalitySettings,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiPersonalityKeys.all });\r\n      toast({\r\n        title: \"Configura├º├úo criada\",\r\n        description: \"Nova configura├º├úo de personalidade criada com sucesso!\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao criar configura├º├úo\",\r\n        description: \"N├úo foi poss├¡vel criar a configura├º├úo de personalidade.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error creating AI personality settings:', error);\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateAIPersonalitySettingsMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: updateAIPersonalitySettings,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiPersonalityKeys.all });\r\n      toast({\r\n        title: \"Configura├º├úo atualizada\",\r\n        description: \"Configura├º├úo de personalidade atualizada com sucesso!\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao atualizar configura├º├úo\",\r\n        description: \"N├úo foi poss├¡vel atualizar a configura├º├úo de personalidade.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error updating AI personality settings:', error);\r\n    },\r\n  });\r\n};\r\n\r\nexport const useDeleteAIPersonalitySettingsMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteAIPersonalitySettings,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiPersonalityKeys.all });\r\n      toast({\r\n        title: \"Configura├º├úo exclu├¡da\",\r\n        description: \"Configura├º├úo de personalidade exclu├¡da com sucesso!\",\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao excluir configura├º├úo\",\r\n        description: \"N├úo foi poss├¡vel excluir a configura├º├úo de personalidade.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error deleting AI personality settings:', error);\r\n    },\r\n  });\r\n};\r\n\r\n// Alias exports for backward compatibility\r\nexport const useAIPersonalityQuery = useAIPersonalitySettingsQuery;\r\nexport const useCreateAIPersonalityMutation = useCreateAIPersonalitySettingsMutation;\r\nexport const useUpdateAIPersonalityMutation = useUpdateAIPersonalitySettingsMutation;\r\nexport const useDeleteAIPersonalityMutation = useDeleteAIPersonalitySettingsMutation;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIProductsQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":195,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":198,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":225,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":228,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1786,1789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1786,1789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Product } from '@/types/product';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\n// Query keys\r\nexport const aiProductsKeys = {\r\n  all: ['aiProducts'] as const,\r\n  lists: () => [...aiProductsKeys.all, 'list'] as const,\r\n  list: (filters: string) => [...aiProductsKeys.lists(), { filters }] as const,\r\n  details: () => [...aiProductsKeys.all, 'detail'] as const,\r\n  detail: (id: string) => [...aiProductsKeys.details(), id] as const,\r\n};\r\n\r\n// Fetch AI products\r\nconst fetchAIProducts = async (): Promise<any[]> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .select('*')\r\n    .order('created_at', { ascending: false });\r\n\r\n  if (error) {\r\n    console.error('Error fetching AI products:', error);\r\n    throw new Error(`Failed to fetch AI products: ${error.message}`);\r\n  }\r\n\r\n  return data || [];\r\n};\r\n\r\n// Create AI product\r\nconst createAIProduct = async (product: { name: string; description?: string; category?: string; features?: string[]; icon?: string; image?: string; popular?: boolean; new?: boolean }): Promise<any> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .insert([{ id: crypto.randomUUID(), ...product }])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error creating AI product:', error);\r\n    throw new Error(`Failed to create AI product: ${error.message}`);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Update AI product\r\nconst updateAIProduct = async ({ id, ...updates }: { id: string } & Partial<{ name: string; description: string; category: string; features: string[]; icon: string; image: string; popular: boolean; new: boolean }>): Promise<any> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_products')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error updating AI product:', error);\r\n    throw new Error(`Failed to update AI product: ${error.message}`);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Delete AI product\r\nconst deleteAIProduct = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('ai_products')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) {\r\n    console.error('Error deleting AI product:', error);\r\n    throw new Error(`Failed to delete AI product: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Hook for fetching AI products\r\nexport const useAIProductsQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiProductsKeys.lists(),\r\n    queryFn: fetchAIProducts,\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n    gcTime: 10 * 60 * 1000, // 10 minutes\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n// Hook for creating AI product\r\nexport const useCreateAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product created successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook for updating AI product\r\nexport const useUpdateAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: updateAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product updated successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook for deleting AI product\r\nexport const useDeleteAIProductMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteAIProduct,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI product deleted successfully\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Utility functions for manual cache management\r\nexport const aiProductsUtils = {\r\n  invalidateAll: (queryClient: ReturnType<typeof useQueryClient>) => {\r\n    queryClient.invalidateQueries({ queryKey: aiProductsKeys.all });\r\n  },\r\n  prefetchProducts: (queryClient: ReturnType<typeof useQueryClient>) => {\r\n    queryClient.prefetchQuery({\r\n      queryKey: aiProductsKeys.lists(),\r\n      queryFn: fetchAIProducts,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIStageManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAIStagesQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[347,350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[347,350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1041,1044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1041,1044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1070,1073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1070,1073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\nexport interface AIStage {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  stage_order: number;\r\n  actions: any | null;\r\n  trigger_conditions: any | null;\r\n  next_stage_id: string | null;\r\n  personality_id: string | null;\r\n  timeout_minutes: number | null;\r\n  is_final_stage: boolean | null;\r\n  is_active: boolean | null;\r\n  created_at: string | null;\r\n  updated_at: string | null;\r\n  created_by: string | null;\r\n  updated_by: string | null;\r\n}\r\n\r\ninterface AIStageInsert {\r\n  name: string;\r\n  description?: string;\r\n  stage_order: number;\r\n  actions?: any;\r\n  trigger_conditions?: any;\r\n  next_stage_id?: string;\r\n  personality_id?: string;\r\n  timeout_minutes?: number;\r\n  is_final_stage?: boolean;\r\n  is_active?: boolean;\r\n}\r\n\r\ninterface AIStageUpdate {\r\n  name?: string;\r\n  description?: string;\r\n  stage_order?: number;\r\n  actions?: any;\r\n  trigger_conditions?: any;\r\n  next_stage_id?: string;\r\n  personality_id?: string;\r\n  timeout_minutes?: number;\r\n  is_final_stage?: boolean;\r\n  is_active?: boolean;\r\n}\r\n\r\n// Query keys\r\nexport const aiStagesKeys = {\r\n  all: ['aiStages'] as const,\r\n  lists: () => [...aiStagesKeys.all, 'list'] as const,\r\n  details: () => [...aiStagesKeys.all, 'detail'] as const,\r\n  detail: (id: string) => [...aiStagesKeys.details(), id] as const,\r\n  active: () => [...aiStagesKeys.all, 'active'] as const,\r\n};\r\n\r\n// Fetch AI stages\r\nconst fetchAIStages = async (): Promise<AIStage[]> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_stages')\r\n    .select('*')\r\n    .order('stage_order', { ascending: true });\r\n\r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\n// Fetch active AI stages\r\nconst fetchActiveAIStages = async (): Promise<AIStage[]> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_stages')\r\n    .select('*')\r\n    .eq('is_active', true)\r\n    .order('stage_order', { ascending: true });\r\n\r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\n// Create AI stage\r\nconst createAIStage = async (stage: AIStageInsert): Promise<AIStage> => {\r\n  // Get the current user from the auth session\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) throw new Error('User not authenticated');\r\n\r\n  const { data, error } = await supabase\r\n    .from('ai_stages')\r\n    .insert({ ...stage, user_id: user.id })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\n// Update AI stage\r\nconst updateAIStage = async ({ id, ...updates }: { id: string } & AIStageUpdate): Promise<AIStage> => {\r\n  const { data, error } = await supabase\r\n    .from('ai_stages')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\n// Delete AI stage\r\nconst deleteAIStage = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('ai_stages')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) throw error;\r\n};\r\n\r\n// Reorder AI stages\r\nconst reorderAIStages = async (stageUpdates: { id: string; stage_order: number }[]): Promise<void> => {\r\n  for (const update of stageUpdates) {\r\n    const { error } = await supabase\r\n      .from('ai_stages')\r\n      .update({ stage_order: update.stage_order })\r\n      .eq('id', update.id);\r\n    \r\n    if (error) throw error;\r\n  }\r\n};\r\n\r\n// Hooks\r\nexport const useAIStagesQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiStagesKeys.lists(),\r\n    queryFn: fetchAIStages,\r\n  });\r\n};\r\n\r\nexport const useActiveAIStagesQuery = () => {\r\n  return useQuery({\r\n    queryKey: aiStagesKeys.active(),\r\n    queryFn: fetchActiveAIStages,\r\n  });\r\n};\r\n\r\nexport const useCreateAIStageMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createAIStage,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiStagesKeys.all });\r\n      toast({\r\n        title: \"Etapa criada\",\r\n        description: \"Nova etapa de IA criada com sucesso!\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao criar etapa\",\r\n        description: \"N├úo foi poss├¡vel criar a etapa de IA.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error creating AI stage:', error);\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateAIStageMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: updateAIStage,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiStagesKeys.all });\r\n      toast({\r\n        title: \"Etapa atualizada\",\r\n        description: \"Etapa de IA atualizada com sucesso!\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao atualizar etapa\",\r\n        description: \"N├úo foi poss├¡vel atualizar a etapa de IA.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error updating AI stage:', error);\r\n    },\r\n  });\r\n};\r\n\r\nexport const useDeleteAIStageMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteAIStage,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiStagesKeys.all });\r\n      toast({\r\n        title: \"Etapa exclu├¡da\",\r\n        description: \"Etapa de IA exclu├¡da com sucesso!\",\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao excluir etapa\",\r\n        description: \"N├úo foi poss├¡vel excluir a etapa de IA.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error deleting AI stage:', error);\r\n    },\r\n  });\r\n};\r\n\r\nexport const useReorderAIStagesMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: reorderAIStages,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: aiStagesKeys.all });\r\n      toast({\r\n        title: \"Etapas reordenadas\",\r\n        description: \"Ordem das etapas atualizada com sucesso!\",\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"Erro ao reordenar etapas\",\r\n        description: \"N├úo foi poss├¡vel reordenar as etapas.\",\r\n        variant: \"destructive\",\r\n      });\r\n      console.error('Error reordering AI stages:', error);\r\n    },\r\n  });\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAITest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAddClientFormLogic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[485,488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[485,488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1964,1967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1964,1967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { Contact } from \"@/types/client\";\r\nimport { validateClientForm } from \"@/components/clients/ClientFormValidation\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport const useAddClientFormLogic = () => {\r\n  const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});\r\n  const [activeTab, setActiveTab] = useState(\"basico\");\r\n  const [customValues, setCustomValues] = useState<{ [fieldId: string]: any }>({});\r\n\r\n  const handleInputChange = useCallback((\r\n    field: keyof Contact,\r\n    value: any,\r\n    newContact: Partial<Contact>,\r\n    setNewContact: (contact: Partial<Contact>) => void\r\n  ) => {\r\n    setNewContact({ ...newContact, [field]: value });\r\n\r\n    // Clear field error when user starts typing\r\n    if (validationErrors[field]) {\r\n      setValidationErrors((prev) => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[field];\r\n        return newErrors;\r\n      });\r\n    }\r\n  }, [validationErrors]);\r\n\r\n  const validateForm = useCallback((newContact: Partial<Contact>) => {\r\n    const validation = validateClientForm(newContact);\r\n\r\n    if (!validation.isValid) {\r\n      setValidationErrors(validation.errors);\r\n\r\n      // Navigate to first tab with error\r\n      if (validation.errors.name || validation.errors.phone || validation.errors.email) {\r\n        setActiveTab(\"basico\");\r\n      } else if (validation.errors.budget || validation.errors.cpfCnpj) {\r\n        setActiveTab(\"comercial\");\r\n      }\r\n\r\n      toast({\r\n        title: \"Dados inv├ílidos\",\r\n        description: \"Por favor, corrija os erros destacados no formul├írio.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }, []);\r\n\r\n  const resetForm = useCallback(() => {\r\n    setCustomValues({});\r\n    setValidationErrors({});\r\n    setActiveTab(\"basico\");\r\n  }, []);\r\n\r\n  const handleCustomFieldChange = useCallback((fieldId: string, value: any) => {\r\n    setCustomValues((prev) => ({\r\n      ...prev,\r\n      [fieldId]: value,\r\n    }));\r\n  }, []);\r\n\r\n  return {\r\n    validationErrors,\r\n    activeTab,\r\n    setActiveTab,\r\n    customValues,\r\n    handleInputChange,\r\n    validateForm,\r\n    resetForm,\r\n    handleCustomFieldChange,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAdvancedSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaAvailability.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'availableDates'. Either exclude it or remove the dependency array.","line":258,"column":6,"nodeType":"ArrayExpression","endLine":258,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [agenda, getOperatingHoursForDate, bookings]","fix":{"range":[8801,8861],"text":"[agenda, getOperatingHoursForDate, bookings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { format, addDays, startOfDay, addMinutes, isAfter, isBefore, isSameDay, parseISO } from 'date-fns';\r\nimport { useAgendas, type Agenda } from './useAgendas';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\nexport interface TimeSlot {\r\n  time: string;\r\n  available: boolean;\r\n  reason?: string;\r\n}\r\n\r\nexport interface AgendaOperatingHours {\r\n  id: string;\r\n  agenda_id: string;\r\n  day_of_week: number; // 0 = Sunday, 1 = Monday, etc.\r\n  start_time: string;\r\n  end_time: string;\r\n  is_active: boolean;\r\n}\r\n\r\nexport interface AgendaAvailableDate {\r\n  id: string;\r\n  agenda_id: string;\r\n  date: string;\r\n  is_available: boolean;\r\n  start_time?: string;\r\n  end_time?: string;\r\n  max_bookings?: number;\r\n  reason?: string;\r\n}\r\n\r\nexport interface AgendaBooking {\r\n  id: string;\r\n  agenda_name: string;\r\n  booking_date: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  status: string;\r\n}\r\n\r\nexport function useAgendaAvailability(agendaId?: string) {\r\n  const { agendas } = useAgendas();\r\n  const [operatingHours, setOperatingHours] = useState<AgendaOperatingHours[]>([]);\r\n  const [availableDates, setAvailableDates] = useState<AgendaAvailableDate[]>([]);\r\n  const [bookings, setBookings] = useState<AgendaBooking[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  // Get current agenda from the agendas list\r\n  const agenda = agendas.find(a => a.id === agendaId);\r\n\r\n  // Fetch operating hours for the agenda\r\n  const fetchOperatingHours = useCallback(async () => {\r\n    if (!agendaId) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_operating_hours')\r\n        .select('*')\r\n        .eq('agenda_id', agendaId)\r\n        .eq('is_active', true)\r\n        .order('day_of_week');\r\n\r\n      if (error) throw error;\r\n      setOperatingHours(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching operating hours:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar hor├írios de funcionamento\",\r\n        description: \"N├úo foi poss├¡vel carregar os hor├írios de funcionamento.\",\r\n      });\r\n    }\r\n  }, [agendaId, toast]);\r\n\r\n  // Fetch available dates for the agenda\r\n  const fetchAvailableDates = useCallback(async () => {\r\n    if (!agendaId) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_available_dates')\r\n        .select('*')\r\n        .eq('agenda_id', agendaId)\r\n        .order('date');\r\n\r\n      if (error) throw error;\r\n      setAvailableDates(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching available dates:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar datas dispon├¡veis\",\r\n        description: \"N├úo foi poss├¡vel carregar as datas dispon├¡veis.\",\r\n      });\r\n    }\r\n  }, [agendaId, toast]);\r\n\r\n  // Fetch bookings for a date range\r\n  const fetchBookings = useCallback(async (startDate: Date, endDate: Date) => {\r\n    if (!agendaId || !agenda?.name) return;\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agenda_bookings')\r\n        .select('*')\r\n        .eq('agenda_name', agenda.name)\r\n        .gte('booking_date', format(startDate, 'yyyy-MM-dd'))\r\n        .lte('booking_date', format(endDate, 'yyyy-MM-dd'))\r\n        .neq('status', 'cancelled')\r\n        .order('booking_date, start_time');\r\n\r\n      if (error) throw error;\r\n\r\n      setBookings(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching bookings:', error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Erro ao buscar agendamentos\",\r\n        description: \"N├úo foi poss├¡vel carregar os agendamentos existentes.\",\r\n      });\r\n    }\r\n  }, [agendaId, agenda?.name, toast]);\r\n\r\n  // Check if a date is available based on operating hours and exceptions\r\n  const isDateAvailable = useCallback((date: Date): boolean => {\r\n    const dayOfWeek = date.getDay();\r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    \r\n    // Check for specific date exceptions first\r\n    const dateException = availableDates.find(ad => ad.date === dateStr);\r\n    if (dateException) {\r\n      return dateException.is_available;\r\n    }\r\n    \r\n    // Check regular operating hours\r\n    const operatingHour = operatingHours.find(oh => oh.day_of_week === dayOfWeek);\r\n    return !!operatingHour;\r\n  }, [operatingHours, availableDates]);\r\n\r\n  // Get available dates for a month\r\n  const getAvailableDatesForMonth = useCallback((date: Date): Date[] => {\r\n    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n    const dates: Date[] = [];\r\n    \r\n    for (let d = new Date(startOfMonth); d <= endOfMonth; d = addDays(d, 1)) {\r\n      if (isDateAvailable(d)) {\r\n        dates.push(new Date(d));\r\n      }\r\n    }\r\n    \r\n    return dates;\r\n  }, [isDateAvailable]);\r\n\r\n  // Get operating hours for a specific date\r\n  const getOperatingHoursForDate = useCallback((date: Date): { start: string; end: string } | null => {\r\n    const dayOfWeek = date.getDay();\r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    \r\n    // Check for specific date exceptions first\r\n    const dateException = availableDates.find(ad => ad.date === dateStr);\r\n    if (dateException) {\r\n      if (!dateException.is_available) return null;\r\n      if (dateException.start_time && dateException.end_time) {\r\n        return {\r\n          start: dateException.start_time,\r\n          end: dateException.end_time\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Use regular operating hours\r\n    const operatingHour = operatingHours.find(oh => oh.day_of_week === dayOfWeek);\r\n    if (!operatingHour) return null;\r\n    \r\n    return {\r\n      start: operatingHour.start_time,\r\n      end: operatingHour.end_time\r\n    };\r\n  }, [operatingHours, availableDates]);\r\n\r\n  // Get available time slots for a specific date\r\n  const getAvailableTimeSlots = useCallback((date: Date): TimeSlot[] => {\r\n    if (!agenda) return [];\r\n    \r\n    const operatingHours = getOperatingHoursForDate(date);\r\n    if (!operatingHours) return [];\r\n    \r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    const dayBookings = bookings.filter(booking => booking.booking_date === dateStr);\r\n    \r\n    const slots: TimeSlot[] = [];\r\n    const duration = agenda.duration_minutes || 60;\r\n    const bufferTime = agenda.buffer_time_minutes || 0;\r\n    \r\n    // Parse start and end times\r\n    const [startHour, startMinute] = operatingHours.start.split(':').map(Number);\r\n    const [endHour, endMinute] = operatingHours.end.split(':').map(Number);\r\n    \r\n    const startTime = new Date(date);\r\n    startTime.setHours(startHour, startMinute, 0, 0);\r\n    \r\n    const endTime = new Date(date);\r\n    endTime.setHours(endHour, endMinute, 0, 0);\r\n    \r\n    let currentTime = new Date(startTime);\r\n    \r\n    while (currentTime.getTime() + (duration * 60000) <= endTime.getTime()) {\r\n      const timeStr = format(currentTime, 'HH:mm');\r\n      \r\n      // Check for conflicts with existing bookings\r\n      const hasConflict = dayBookings.some(booking => {\r\n        const [bookingStartHour, bookingStartMinute] = booking.start_time.split(':').map(Number);\r\n        const [bookingEndHour, bookingEndMinute] = booking.end_time.split(':').map(Number);\r\n        \r\n        const bookingStart = new Date(date);\r\n        bookingStart.setHours(bookingStartHour, bookingStartMinute, 0, 0);\r\n        \r\n        const bookingEnd = new Date(date);\r\n        bookingEnd.setHours(bookingEndHour, bookingEndMinute, 0, 0);\r\n        \r\n        const slotEnd = new Date(currentTime.getTime() + (duration * 60000));\r\n        \r\n        // Check if slot overlaps with booking\r\n        return currentTime < bookingEnd && slotEnd > bookingStart;\r\n      });\r\n      \r\n      // Count existing bookings for this time slot\r\n      const slotBookings = dayBookings.filter(booking => booking.start_time === timeStr);\r\n      const maxParticipants = agenda.max_participants || 1;\r\n      const isOverCapacity = slotBookings.length >= maxParticipants;\r\n      \r\n      let available = true;\r\n      let reason: string | undefined;\r\n      \r\n      if (hasConflict) {\r\n        available = false;\r\n        reason = 'Hor├írio ocupado';\r\n      } else if (isOverCapacity) {\r\n        available = false;\r\n        reason = `Capacidade m├íxima atingida (${slotBookings.length}/${maxParticipants})`;\r\n      }\r\n      \r\n      slots.push({\r\n        time: timeStr,\r\n        available,\r\n        reason\r\n      });\r\n      \r\n      // Move to next slot\r\n      currentTime = new Date(currentTime.getTime() + ((duration + bufferTime) * 60000));\r\n    }\r\n    \r\n    return slots;\r\n  }, [agenda, getOperatingHoursForDate, bookings, availableDates]);\r\n\r\n  // Load all data when agendaId changes\r\n  useEffect(() => {\r\n    if (agendaId) {\r\n      setLoading(true);\r\n      Promise.all([\r\n        fetchOperatingHours(),\r\n        fetchAvailableDates()\r\n      ]).finally(() => {\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      // Clear data when no agenda is selected\r\n      setOperatingHours([]);\r\n      setAvailableDates([]);\r\n      setBookings([]);\r\n    }\r\n  }, [agendaId, fetchOperatingHours, fetchAvailableDates]);\r\n\r\n  return {\r\n    agenda,\r\n    operatingHours,\r\n    availableDates,\r\n    bookings,\r\n    loading,\r\n    fetchBookings,\r\n    isDateAvailable,\r\n    getAvailableDatesForMonth,\r\n    getOperatingHoursForDate,\r\n    getAvailableTimeSlots,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendaServiceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAgendas.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAgendas'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAgendas]","fix":{"range":[905,907],"text":"[fetchAgendas]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1075,1078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1075,1078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1189,1192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1189,1192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1892,1895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1892,1895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1950,1953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1950,1953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2783,2786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2783,2786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2907,2910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2907,2910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3651,3654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3651,3654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3759,3762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3759,3762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface Agenda {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  duration_minutes: number;\r\n  price: number | null;\r\n  category: string | null;\r\n  is_active: boolean;\r\n  max_participants: number | null;\r\n  requires_approval: boolean;\r\n  buffer_time_minutes: number;\r\n  cancellation_policy: string | null;\r\n  preparation_notes: string | null;\r\n  follow_up_notes: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string | null;\r\n  updated_by: string | null;\r\n}\r\n\r\nexport function useAgendas() {\r\n  const [agendas, setAgendas] = useState<Agenda[]>([]);\r\n  const [agendasLoading, setAgendasLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchAgendas();\r\n  }, []);\r\n\r\n  const fetchAgendas = async () => {\r\n    try {\r\n      setAgendasLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .select('*')\r\n        .eq('is_active', true)\r\n        .order('created_at', { ascending: false }) as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao buscar agendas:', error);\r\n        throw error;\r\n      }\r\n\r\n      setAgendas(data as unknown as Agenda[] || []);\r\n    } catch (error) {\r\n      console.error('Erro ao buscar agendas:', error);\r\n      toast({\r\n        title: \"Erro ao carregar agendas\",\r\n        description: \"N├úo foi poss├¡vel carregar a lista de agendas.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setAgendasLoading(false);\r\n    }\r\n  };\r\n\r\n  const createAgenda = async (agendaData: Omit<Agenda, 'id' | 'created_at' | 'updated_at' | 'created_by' | 'updated_by'>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .insert([agendaData])\r\n        .select() as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao criar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda criada com sucesso\",\r\n        description: \"A nova agenda foi adicionada.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n      return data[0];\r\n    } catch (error) {\r\n      console.error('Erro ao criar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao criar agenda\",\r\n        description: \"N├úo foi poss├¡vel criar a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateAgenda = async (id: string, agendaData: Partial<Omit<Agenda, 'id' | 'created_at' | 'updated_at' | 'created_by' | 'updated_by'>>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('agendas' as any)\r\n        .update({ ...agendaData, updated_at: new Date().toISOString() })\r\n        .eq('id', id)\r\n        .select() as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao atualizar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda atualizada com sucesso\",\r\n        description: \"As altera├º├Áes foram salvas.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n      return data[0];\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao atualizar agenda\",\r\n        description: \"N├úo foi poss├¡vel atualizar a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteAgenda = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('agendas' as any)\r\n        .update({ is_active: false, updated_at: new Date().toISOString() })\r\n        .eq('id', id) as any;\r\n\r\n      if (error) {\r\n        console.error('Erro ao deletar agenda:', error);\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Agenda removida com sucesso\",\r\n        description: \"A agenda foi desativada.\",\r\n      });\r\n\r\n      await fetchAgendas(); // Refetch para atualizar a lista\r\n    } catch (error) {\r\n      console.error('Erro ao deletar agenda:', error);\r\n      toast({\r\n        title: \"Erro ao deletar agenda\",\r\n        description: \"N├úo foi poss├¡vel remover a agenda.\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    agendas,\r\n    agendasLoading,\r\n    refetchAgendas: fetchAgendas,\r\n    createAgenda,\r\n    updateAgenda,\r\n    deleteAgenda\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAppointmentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useAuthUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarEvents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1718,1721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1718,1721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { addDays, subDays, startOfMonth, endOfMonth } from \"date-fns\";\r\nimport type { CalendarEvent, EventFormData } from \"@/types/calendar\";\r\nimport { fetchCalendarEvents } from \"./useFetchCalendarEvents\";\r\nimport { getCacheKey, loadFromCache, saveToCache, clearCache } from \"./calendarCache\";\r\nimport {\r\n  addCalendarEvent,\r\n  editCalendarEvent,\r\n  deleteCalendarEvent,\r\n} from \"./calendarEventActions\";\r\n\r\ntype UseCalendarEventsProps = {\r\n  currentMonth: Date;\r\n};\r\n\r\nexport function useCalendarEvents({ currentMonth }: UseCalendarEventsProps) {\r\n  const [events, setEvents] = React.useState<CalendarEvent[]>([]);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [error, setError] = React.useState<Error | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n\r\n  const lastFetchedMonth = React.useRef<string | null>(null);\r\n\r\n  const fetchEventsForMonth = React.useCallback(async (month: Date, forceRefresh = false) => {\r\n    const cacheKey = getCacheKey(month);\r\n    \r\n    if (!forceRefresh) {\r\n      const cachedEvents = loadFromCache(cacheKey);\r\n      if (cachedEvents) {\r\n        setEvents(cachedEvents);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const range = { start: startOfMonth(month), end: endOfMonth(month) };\r\n      const fetchedEvents = await fetchCalendarEvents(undefined, range);\r\n      \r\n      setEvents(fetchedEvents || []);\r\n      saveToCache(cacheKey, fetchedEvents || []);\r\n      \r\n      if (forceRefresh) {\r\n        toast.success(\"Agenda atualizada com sucesso!\");\r\n      }\r\n    } catch (err: any) {\r\n      const error = err instanceof Error ? err : new Error(err?.message || \"Erro desconhecido\");\r\n      setError(error);\r\n      toast.error(`Erro ao buscar eventos: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n      lastFetchedMonth.current = cacheKey;\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const monthCacheKey = getCacheKey(currentMonth);\r\n    if (monthCacheKey !== lastFetchedMonth.current) {\r\n      fetchEventsForMonth(currentMonth);\r\n    }\r\n  }, [currentMonth, fetchEventsForMonth]);\r\n\r\n  const refreshEvents = React.useCallback(() => {\r\n    clearCache();\r\n    fetchEventsForMonth(currentMonth, true);\r\n  }, [currentMonth, fetchEventsForMonth]);\r\n\r\n  const handleApiAction = async (action: Promise<boolean>, successMessage: string) => {\r\n    setIsSubmitting(true);\r\n    try {\r\n      const success = await action;\r\n      if (success) {\r\n        toast.success(successMessage);\r\n        refreshEvents();\r\n      }\r\n      return success;\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const addEvent = (formData: EventFormData) => \r\n    handleApiAction(addCalendarEvent(formData), \"Evento adicionado com sucesso!\");\r\n\r\n  const editEvent = (eventId: string, formData: EventFormData) => \r\n    handleApiAction(editCalendarEvent(eventId, formData), \"Evento atualizado com sucesso!\");\r\n\r\n  const deleteEvent = (eventId: string) => {\r\n    const eventToDelete = events.find((e) => e.id === eventId);\r\n    if (!eventToDelete) {\r\n      toast.error(\"Evento n├úo encontrado\");\r\n      return Promise.resolve(false);\r\n    }\r\n    return handleApiAction(deleteCalendarEvent(eventToDelete), \"Evento exclu├¡do com sucesso!\");\r\n  };\r\n\r\n  return {\r\n    events,\r\n    isLoading,\r\n    error,\r\n    isSubmitting,\r\n    refreshEvents,\r\n    addEvent,\r\n    editEvent,\r\n    deleteEvent,\r\n  };\r\n}\r\n\r\nexport type { CalendarEvent, EventFormData } from \"@/types/calendar\";\r\n\r\n// Mock data and functions for testing\r\nexport const mockEvents: CalendarEvent[] = [\r\n  {\r\n    id: \"1\",\r\n    summary: \"Consulta com Dr. Smith\",\r\n    start: new Date(2024, 6, 22, 10, 0).toISOString(),\r\n    end: new Date(2024, 6, 22, 11, 0).toISOString(),\r\n    description: \"Check-up anual\",\r\n    status: \"confirmed\",\r\n    htmlLink: \"#1\",\r\n    hostName: \"Dr. Smith\"\r\n  },\r\n  {\r\n    id: \"2\",\r\n    summary: \"Reuni├úo de Projeto\",\r\n    start: new Date(2024, 6, 22, 14, 0).toISOString(),\r\n    end: new Date(2024, 6, 22, 15, 0).toISOString(),\r\n    description: \"Discuss├úo sobre o novo design\",\r\n    status: \"confirmed\",\r\n    htmlLink: \"#2\",\r\n    hostName: \"Maria Santos\"\r\n  },\r\n  {\r\n    id: \"3\",\r\n    summary: \"Almo├ºo com a Equipe\",\r\n    start: subDays(new Date(), 1).toISOString(),\r\n    end: subDays(new Date(), 1).toISOString(),\r\n    description: \"Confraterniza├º├úo\",\r\n    status: \"confirmed\",\r\n    htmlLink: \"#3\",\r\n    hostName: \"Pedro Costa\"\r\n  },\r\n  {\r\n    id: \"4\",\r\n    summary: \"Dentista\",\r\n    start: addDays(new Date(), 2).toISOString(),\r\n    end: addDays(new Date(), 2).toISOString(),\r\n    description: \"Limpeza de rotina\",\r\n    status: \"pending\",\r\n    htmlLink: \"#4\",\r\n    hostName: \"Ana Silva\"\r\n  },\r\n];\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarEventsQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2000,2003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2000,2003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { format, startOfMonth, endOfMonth } from 'date-fns';\r\n\r\n// Interface para eventos do calend├írio\r\nexport interface CalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  all_day?: boolean;\r\n  location?: string;\r\n  event_type: 'meeting' | 'call' | 'task' | 'reminder' | 'other';\r\n  status: 'scheduled' | 'completed' | 'cancelled' | 'rescheduled';\r\n  priority: 'low' | 'medium' | 'high';\r\n  recurrence_rule?: string;\r\n  contact_id?: string;\r\n  created_by?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  metadata?: any;\r\n  // Campos calculados para compatibilidade com o componente\r\n  date: Date;\r\n  time: string;\r\n  salesperson: string;\r\n  color: string;\r\n  contact_name?: string;\r\n}\r\n\r\n// Interface para filtros\r\nexport interface CalendarFilters {\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  event_type?: string;\r\n  status?: string;\r\n  contact_id?: string;\r\n  priority?: string;\r\n}\r\n\r\n// Chaves de query\r\nconst calendarKeys = {\r\n  all: ['calendar'] as const,\r\n  events: () => [...calendarKeys.all, 'events'] as const,\r\n  eventsByRange: (start: string, end: string) => [...calendarKeys.events(), 'range', start, end] as const,\r\n  eventsByMonth: (month: string) => [...calendarKeys.events(), 'month', month] as const,\r\n  event: (id: string) => [...calendarKeys.events(), id] as const,\r\n};\r\n\r\n// Cores para diferentes tipos de eventos\r\nconst eventTypeColors = {\r\n  meeting: '#4f46e5',\r\n  call: '#10b981',\r\n  task: '#f59e0b',\r\n  reminder: '#ef4444',\r\n  other: '#8b5cf6'\r\n};\r\n\r\n// Cores para diferentes prioridades\r\nconst priorityColors = {\r\n  low: '#6b7280',\r\n  medium: '#3b82f6',\r\n  high: '#ef4444'\r\n};\r\n\r\n// Fun├º├úo para transformar dados do Supabase para o formato do componente\r\nconst transformEventData = (event: any): CalendarEvent => {\r\n  const startDate = new Date(event.start_time);\r\n  const color = priorityColors[event.priority as keyof typeof priorityColors] || eventTypeColors[event.event_type as keyof typeof eventTypeColors] || '#6b7280';\r\n  \r\n  return {\r\n    ...event,\r\n    date: startDate,\r\n    time: format(startDate, 'HH:mm'),\r\n    salesperson: event.contact_name || 'Sistema',\r\n    color: color\r\n  };\r\n};\r\n\r\n// Buscar eventos por per├¡odo\r\nconst fetchEventsByDateRange = async (startDate: string, endDate: string): Promise<CalendarEvent[]> => {\r\n  const { data, error } = await supabase\r\n    .from('calendar_events')\r\n    .select(`\r\n      *,\r\n      contacts!calendar_events_contact_id_fkey(name)\r\n    `)\r\n    .gte('start_time', startDate)\r\n    .lte('start_time', endDate)\r\n    .order('start_time', { ascending: true });\r\n\r\n  if (error) {\r\n    console.error('Error fetching calendar events:', error);\r\n    throw new Error(`Failed to fetch calendar events: ${error.message}`);\r\n  }\r\n\r\n  return (data || []).map(event => transformEventData({\r\n    ...event,\r\n    contact_name: event.contacts?.name\r\n  }));\r\n};\r\n\r\n// Buscar eventos por m├¬s\r\nconst fetchEventsByMonth = async (date: Date): Promise<CalendarEvent[]> => {\r\n  const startDate = format(startOfMonth(date), 'yyyy-MM-dd');\r\n  const endDate = format(endOfMonth(date), 'yyyy-MM-dd');\r\n  \r\n  return fetchEventsByDateRange(startDate, endDate);\r\n};\r\n\r\n// Criar novo evento\r\nconst createCalendarEvent = async (eventData: Omit<CalendarEvent, 'id' | 'created_at' | 'updated_at' | 'date' | 'time' | 'salesperson' | 'color'>): Promise<CalendarEvent> => {\r\n  // Get the current user from the auth session\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) throw new Error('User not authenticated');\r\n\r\n  const { data, error } = await supabase\r\n    .from('calendar_events')\r\n    .insert([{ ...eventData, user_id: user.id }])\r\n    .select(`\r\n      *,\r\n      contacts!calendar_events_contact_id_fkey(name)\r\n    `)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error creating calendar event:', error);\r\n    throw new Error(`Failed to create calendar event: ${error.message}`);\r\n  }\r\n\r\n  return transformEventData({\r\n    ...data,\r\n    contact_name: data.contacts?.name\r\n  });\r\n};\r\n\r\n// Atualizar evento\r\nconst updateCalendarEvent = async ({ id, ...updates }: Partial<CalendarEvent> & { id: string }): Promise<CalendarEvent> => {\r\n  const { data, error } = await supabase\r\n    .from('calendar_events')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select(`\r\n      *,\r\n      contacts!calendar_events_contact_id_fkey(name)\r\n    `)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error updating calendar event:', error);\r\n    throw new Error(`Failed to update calendar event: ${error.message}`);\r\n  }\r\n\r\n  return transformEventData({\r\n    ...data,\r\n    contact_name: data.contacts?.name\r\n  });\r\n};\r\n\r\n// Deletar evento\r\nconst deleteCalendarEvent = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('calendar_events')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) {\r\n    console.error('Error deleting calendar event:', error);\r\n    throw new Error(`Failed to delete calendar event: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Hook para buscar eventos por m├¬s\r\nexport const useCalendarEventsByMonth = (date: Date) => {\r\n  const monthKey = format(date, 'yyyy-MM');\r\n  \r\n  return useQuery({\r\n    queryKey: calendarKeys.eventsByMonth(monthKey),\r\n    queryFn: () => fetchEventsByMonth(date),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n    gcTime: 5 * 60 * 1000, // 5 minutes\r\n    refetchOnWindowFocus: false,\r\n  });\r\n};\r\n\r\n// Hook para buscar eventos por per├¡odo\r\nexport const useCalendarEventsByRange = (startDate: string, endDate: string) => {\r\n  return useQuery({\r\n    queryKey: calendarKeys.eventsByRange(startDate, endDate),\r\n    queryFn: () => fetchEventsByDateRange(startDate, endDate),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n    gcTime: 5 * 60 * 1000, // 5 minutes\r\n    refetchOnWindowFocus: false,\r\n    enabled: !!startDate && !!endDate,\r\n  });\r\n};\r\n\r\n// Hook para criar evento\r\nexport const useCreateCalendarEventMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: createCalendarEvent,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: calendarKeys.all });\r\n      toast({\r\n        title: \"Sucesso\",\r\n        description: \"Evento criado com sucesso\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook para atualizar evento\r\nexport const useUpdateCalendarEventMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: updateCalendarEvent,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: calendarKeys.all });\r\n      toast({\r\n        title: \"Sucesso\",\r\n        description: \"Evento atualizado com sucesso\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\n// Hook para deletar evento\r\nexport const useDeleteCalendarEventMutation = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteCalendarEvent,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: calendarKeys.all });\r\n      toast({\r\n        title: \"Sucesso\",\r\n        description: \"Evento deletado com sucesso\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCalendarNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useChatMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useChatMessagesOptimized.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3999,4002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3999,4002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4043,4046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4043,4046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { ChatMessage } from '@/types/chat';\r\nimport { memoryService } from '@/lib/memoryService';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseChatMessagesOptions {\r\n  sessionId: string;\r\n  pageSize?: number;\r\n  initialPage?: number;\r\n  pollingInterval?: number;\r\n  useCache?: boolean;\r\n}\r\n\r\ninterface UseChatMessagesResult {\r\n  messages: ChatMessage[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  loadMore: () => Promise<void>;\r\n  hasMore: boolean;\r\n  refresh: () => Promise<void>;\r\n  sendMessage: (message: Omit<ChatMessage, 'id'>) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Hook otimizado para gerenciar mensagens de chat com suporte a cache e pagina├º├úo\r\n */\r\nexport function useChatMessagesOptimized({\r\n  sessionId,\r\n  pageSize = 50,\r\n  initialPage = 1,\r\n  pollingInterval = 5000,\r\n  useCache = true,\r\n}: UseChatMessagesOptions): UseChatMessagesResult {\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [page, setPage] = useState<number>(initialPage);\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n  \r\n  // Refer├¬ncias para controle de polling e estado atual\r\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isMountedRef = useRef<boolean>(true);\r\n  const messagesRef = useRef<ChatMessage[]>(messages);\r\n  \r\n  // Atualizar a refer├¬ncia quando as mensagens mudarem\r\n  useEffect(() => {\r\n    messagesRef.current = messages;\r\n  }, [messages]);\r\n  \r\n  // Fun├º├úo para carregar mensagens\r\n  const loadMessages = useCallback(async (currentPage: number, refresh = false) => {\r\n    if (!sessionId) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Buscar mensagens com pagina├º├úo\r\n      const chatMemories = await memoryService.getMemoriesBySession(\r\n        sessionId,\r\n        undefined,\r\n        pageSize,\r\n        useCache\r\n      );\r\n      \r\n      // Converter mem├│rias para formato ChatMessage\r\n      const newMessages = chatMemories.map(memory => ({\r\n        id: memory.id.toString(),\r\n        content: memory.message?.content || '',\r\n        role: memory.message?.role || 'user',\r\n        timestamp: memory.created_at || new Date().toISOString(),\r\n        sender: memory.message?.sender || { id: 'unknown', name: 'Unknown' },\r\n      }));\r\n      \r\n      // Atualizar estado com base em refresh ou append\r\n      if (refresh) {\r\n        setMessages(newMessages);\r\n      } else {\r\n        setMessages(prev => [...prev, ...newMessages]);\r\n      }\r\n      \r\n      // Verificar se h├í mais mensagens para carregar\r\n      setHasMore(newMessages.length === pageSize);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar mensagens:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao carregar mensagens'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sessionId, pageSize, useCache]);\r\n  \r\n  // Fun├º├úo para carregar mais mensagens (pagina├º├úo)\r\n  const loadMore = useCallback(async () => {\r\n    if (loading || !hasMore) return;\r\n    \r\n    const nextPage = page + 1;\r\n    await loadMessages(nextPage, false);\r\n    setPage(nextPage);\r\n  }, [loading, hasMore, page, loadMessages]);\r\n  \r\n  // Fun├º├úo para atualizar mensagens\r\n  const refresh = useCallback(async () => {\r\n    setPage(initialPage);\r\n    await loadMessages(initialPage, true);\r\n  }, [initialPage, loadMessages]);\r\n  \r\n  // Fun├º├úo para enviar mensagem\r\n  const sendMessage = useCallback(async (message: Omit<ChatMessage, 'id'>) => {\r\n    if (!sessionId) return;\r\n    \r\n    try {\r\n      // Preparar mensagem para armazenamento\r\n      const chatMemory = {\r\n        session_id: sessionId,\r\n        message: {\r\n          content: message.content,\r\n          role: message.role,\r\n          sender: message.sender,\r\n        },\r\n        created_at: message.timestamp || new Date().toISOString(),\r\n        memory_type: 'contextual' as any,\r\n        memory_level: 'short_term' as any,\r\n      };\r\n      \r\n      // Adicionar mensagem otimisticamente ├á UI\r\n      const optimisticMessage: ChatMessage = {\r\n        id: `temp-${Date.now()}`,\r\n        ...message,\r\n        timestamp: message.timestamp || new Date().toISOString(),\r\n      };\r\n      \r\n      setMessages(prev => [...prev, optimisticMessage]);\r\n      \r\n      // Enviar mensagem para o servidor\r\n      const result = await memoryService.storeMemory(chatMemory);\r\n      \r\n      if (result) {\r\n        // Substituir mensagem tempor├íria pela real\r\n        setMessages(prev => \r\n          prev.map(msg => \r\n            msg.id === optimisticMessage.id \r\n              ? {\r\n                  ...msg,\r\n                  id: result.id.toString(),\r\n                }\r\n              : msg\r\n          )\r\n        );\r\n      } else {\r\n        // Remover mensagem otimista em caso de erro\r\n        setMessages(prev => prev.filter(msg => msg.id !== optimisticMessage.id));\r\n        throw new Error('Falha ao enviar mensagem');\r\n      }\r\n    } catch (err) {\r\n      logger.error('Erro ao enviar mensagem:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao enviar mensagem'));\r\n    }\r\n  }, [sessionId]);\r\n  \r\n  // Fun├º├úo para buscar mensagens recentes durante o polling\r\n  const fetchLatestMessages = useCallback(async () => {\r\n    if (!sessionId || !isMountedRef.current) return;\r\n    \r\n    try {\r\n      // Buscar apenas as mensagens mais recentes\r\n      const latestMemories = await memoryService.getMemoriesBySession(\r\n        sessionId,\r\n        undefined,\r\n        20, // Buscar apenas as 20 mais recentes\r\n        false // N├úo usar cache para polling\r\n      );\r\n      \r\n      // Converter para formato ChatMessage\r\n      const latestMessages = latestMemories.map(memory => ({\r\n        id: memory.id.toString(),\r\n        content: memory.message?.content || '',\r\n        role: memory.message?.role || 'user',\r\n        timestamp: memory.created_at || new Date().toISOString(),\r\n        sender: memory.message?.sender || { id: 'unknown', name: 'Unknown' },\r\n      }));\r\n      \r\n      // Verificar se h├í novas mensagens\r\n      if (latestMessages.length > 0) {\r\n        const currentIds = new Set(messagesRef.current.map(msg => msg.id));\r\n        const newMessages = latestMessages.filter(msg => !currentIds.has(msg.id));\r\n        \r\n        if (newMessages.length > 0) {\r\n          setMessages(prev => [...prev, ...newMessages]);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      logger.error('Erro no polling de mensagens:', err);\r\n    }\r\n  }, [sessionId]);\r\n  \r\n  // Fun├º├úo para parar o polling\r\n  const stopPolling = useCallback(() => {\r\n    if (pollingRef.current) {\r\n      clearInterval(pollingRef.current);\r\n      pollingRef.current = null;\r\n    }\r\n  }, []);\r\n  \r\n  // Fun├º├úo para iniciar o polling\r\n  const startPolling = useCallback(() => {\r\n    stopPolling();\r\n    \r\n    pollingRef.current = setInterval(fetchLatestMessages, pollingInterval);\r\n  }, [fetchLatestMessages, pollingInterval, stopPolling]);\r\n  \r\n  // Configurar polling para novas mensagens\r\n  useEffect(() => {\r\n    if (!sessionId || pollingInterval <= 0) return;\r\n    \r\n    // Iniciar carregamento inicial e polling\r\n    loadMessages(initialPage, true);\r\n    startPolling();\r\n    \r\n    return () => {\r\n      isMountedRef.current = false;\r\n      stopPolling();\r\n    };\r\n  }, [sessionId, initialPage, pollingInterval, loadMessages, startPolling, stopPolling]);\r\n  \r\n  return {\r\n    messages,\r\n    loading,\r\n    error,\r\n    loadMore,\r\n    hasMore,\r\n    refresh,\r\n    sendMessage,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientCustomFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[965,968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[965,968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCustomFieldsForContact'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [contactId, loadCustomFieldsForContact]","fix":{"range":[1324,1335],"text":"[contactId, loadCustomFieldsForContact]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { CustomFieldWithValue } from \"@/types/customFields\";\nimport { useCustomFields } from \"./useCustomFields\";\n\nexport const useClientCustomFields = (contactId?: string) => {\n  const [customFieldsWithValues, setCustomFieldsWithValues] = useState<\n    CustomFieldWithValue[]\n  >([]);\n  const [loadingCustomFields, setLoadingCustomFields] = useState(false);\n  const { getCustomFieldsWithValues, saveClientCustomValues } =\n    useCustomFields();\n\n  const loadCustomFieldsForContact = async (id: string) => {\n    try {\n      setLoadingCustomFields(true);\n      const fieldsWithValues = await getCustomFieldsWithValues(id);\n      setCustomFieldsWithValues(fieldsWithValues);\n    } catch (error) {\n      console.error(\"Erro ao carregar campos personalizados:\", error);\n    } finally {\n      setLoadingCustomFields(false);\n    }\n  };\n\n  const saveCustomFields = async (\n    id: string,\n    values: { fieldId: string; value: any }[],\n  ) => {\n    try {\n      await saveClientCustomValues(id, values);\n      await loadCustomFieldsForContact(id);\n      return true;\n    } catch (error) {\n      console.error(\"Erro ao salvar campos personalizados:\", error);\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    if (contactId) {\n      loadCustomFieldsForContact(contactId);\n    }\n  }, [contactId]);\n\n  return {\n    customFieldsWithValues,\n    loadingCustomFields,\n    loadCustomFieldsForContact,\n    saveCustomFields,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientDataFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[899,902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[899,902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'selectedConversation.clientName', 'selectedConversation.clientSize', 'selectedConversation.clientType', 'selectedConversation.email', 'selectedConversation.id', 'selectedConversation.name', and 'selectedConversation.phone'. Either include them or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [selectedConversation.sessionId, availableContacts, selectedConversation.id, selectedConversation.name, selectedConversation.email, selectedConversation.phone, selectedConversation.clientName, selectedConversation.clientSize, selectedConversation.clientType]","fix":{"range":[3508,3560],"text":"[selectedConversation.sessionId, availableContacts, selectedConversation.id, selectedConversation.name, selectedConversation.email, selectedConversation.phone, selectedConversation.clientName, selectedConversation.clientSize, selectedConversation.clientType]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Contact } from \"@/types/client\";\r\nimport { Conversation } from \"@/types/chat\";\r\n\r\nexport const useClientDataFetch = (\r\n  selectedConversation: Conversation | undefined,\r\n  availableContacts: Contact[]\r\n) => {\r\n  const [clientData, setClientData] = useState<Contact | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchClientData = async () => {\r\n      if (!selectedConversation?.sessionId) return;\r\n\r\n      setLoading(true);\r\n      try {\r\n        console.log(\r\n          \"Buscando dados do cliente mockup para a sess├úo:\",\r\n          selectedConversation.sessionId,\r\n        );\r\n\r\n        // Encontrar o cliente correspondente ├á sess├úo selecionada\r\n        const client = availableContacts.find(\r\n          (client) => (client as any).sessionId === selectedConversation.sessionId || (client as any).session_id === selectedConversation.sessionId,\r\n        );\r\n\r\n        if (client) {\r\n          console.log(\"Cliente encontrado:\", client.name);\r\n          setClientData(client);\r\n        } else {\r\n          console.log(\r\n            \"Cliente n├úo encontrado para a sess├úo:\",\r\n            selectedConversation.sessionId,\r\n          );\r\n\r\n          // Tentar encontrar por ID como fallback\r\n          const clientById = availableContacts.find(\r\n            (client) => client.id === selectedConversation.id,\r\n          );\r\n\r\n          if (clientById) {\r\n            console.log(\"Cliente encontrado por ID:\", clientById.name);\r\n            const updatedClient = {\r\n              ...clientById,\r\n              sessionId: selectedConversation.sessionId,\r\n            };\r\n            setClientData(updatedClient);\r\n          } else {\r\n            console.log(\r\n              \"Cliente n├úo encontrado nem por ID. Usando dados da conversa como fallback.\",\r\n            );\r\n            // Usar os dados da conversa selecionada como fallback\r\n            const fallbackClient: Contact = {\r\n              id: selectedConversation.id,\r\n              name: selectedConversation.name || \"Cliente sem nome\",\r\n              email: selectedConversation.email || \"\",\r\n              phone: selectedConversation.phone || \"\",\r\n              clientName: selectedConversation.clientName || \"\",\r\n              clientSize: selectedConversation.clientSize || \"\",\r\n              clientType: selectedConversation.clientType || \"pessoa-fisica\",\r\n              cpfCnpj: \"\",\r\n              asaasCustomerId: \"\",\r\n              status: \"Active\",\r\n              notes:\r\n                \"Cliente gerado automaticamente a partir dos dados da conversa\",\r\n              lastContact: new Date().toLocaleDateString(\"pt-BR\"),\r\n              kanbanStage: \"Nova consulta\",\r\n              sessionId: selectedConversation.sessionId,\r\n              tags: [\"Gerado automaticamente\"],\r\n              responsibleUser: \"\",\r\n              sales: 0,\r\n              clientSector: \"\",\r\n              budget: 0,\r\n              paymentMethod: \"\",\r\n              clientObjective: \"\",\r\n              lossReason: \"\",\r\n              contractNumber: \"\",\r\n              contractDate: \"\",\r\n              payment: \"\",\r\n              uploadedFiles: [],\r\n              consultationStage: \"Nova consulta\",\r\n            };\r\n            setClientData(fallbackClient);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching client data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchClientData();\r\n  }, [selectedConversation?.sessionId, availableContacts]);\r\n\r\n  return { clientData, loading };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientDisplayConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientFiles.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadClientFiles' and 'loadStorageUsage'. Either include them or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [clientId, loadClientFiles, loadStorageUsage]","fix":{"range":[886,896],"text":"[clientId, loadClientFiles, loadStorageUsage]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4511,4514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4511,4514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5627,5630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5627,5630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { FileMetadata } from '@/types/file';\r\n\r\ninterface UseClientFilesProps {\r\n  clientId?: string;\r\n  onFileUpdate?: (files: FileMetadata[]) => void;\r\n}\r\n\r\nexport const useClientFiles = ({ clientId, onFileUpdate }: UseClientFilesProps) => {\r\n  const [files, setFiles] = useState<FileMetadata[]>([]);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [storageUsage, setStorageUsage] = useState({ used: 0, max: 100 * 1024 * 1024 });\r\n  const { toast } = useToast();\r\n  const { user } = useAuth();\r\n\r\n  const maxFileSize = 10 * 1024 * 1024; // 10MB per file\r\n\r\n  useEffect(() => {\r\n    if (clientId) {\r\n      loadClientFiles();\r\n    }\r\n    loadStorageUsage();\r\n  }, [clientId]);\r\n\r\n  const loadClientFiles = async () => {\r\n    if (!clientId) return;\r\n\r\n    try {\r\n      const { data: contact, error } = await supabase\r\n        .from('contacts')\r\n        .select('files_metadata')\r\n        .eq('id', clientId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Erro ao carregar arquivos:', error);\r\n        return;\r\n      }\r\n\r\n      const filesMetadata = (contact?.files_metadata as unknown as FileMetadata[]) || [];\r\n\r\n      const filesWithUrls = await Promise.all(\r\n        filesMetadata.map(async (file) => {\r\n          const { data } = await supabase.storage\r\n            .from('client-files')\r\n            .createSignedUrl(file.path, 3600);\r\n\r\n          return {\r\n            ...file,\r\n            url: data?.signedUrl,\r\n          };\r\n        }),\r\n      );\r\n\r\n      setFiles(filesWithUrls);\r\n    } catch (error) {\r\n      console.error('Erro ao carregar arquivos:', error);\r\n    }\r\n  };\r\n\r\n  const loadStorageUsage = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_storage_usage')\r\n        .select('used_bytes, max_bytes')\r\n        .eq('user_id', user.id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') {\r\n        console.error('Erro ao carregar uso de storage:', error);\r\n        return;\r\n      }\r\n\r\n      if (data) {\r\n        setStorageUsage({ used: data.used_bytes, max: data.max_bytes });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao carregar uso de storage:', error);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const handleFileSelect = (selectedFiles: FileList | null) => {\r\n    if (!selectedFiles || selectedFiles.length === 0) return;\r\n\r\n    const file = selectedFiles[0];\r\n\r\n    if (file.size > maxFileSize) {\r\n      toast({\r\n        title: 'Arquivo muito grande',\r\n        description: `O arquivo deve ter no m├íximo ${formatFileSize(maxFileSize)}`,\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (storageUsage.used + file.size > storageUsage.max) {\r\n      toast({\r\n        title: 'Limite de armazenamento atingido',\r\n        description: 'Voc├¬ n├úo tem espa├ºo suficiente para este arquivo',\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    uploadFile(file);\r\n  };\r\n\r\n  const uploadFile = async (file: File) => {\r\n    if (!clientId || !user) return;\r\n\r\n    setIsUploading(true);\r\n\r\n    try {\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${clientId}/${Date.now()}.${fileExt}`;\r\n\r\n      const { error: uploadError } = await supabase.storage\r\n        .from('client-files')\r\n        .upload(fileName, file, {\r\n          metadata: {\r\n            size: file.size.toString(),\r\n            originalName: file.name,\r\n            contentType: file.type,\r\n          },\r\n        });\r\n\r\n      if (uploadError) {\r\n        throw uploadError;\r\n      }\r\n\r\n      const fileMetadata: FileMetadata = {\r\n        id: Date.now().toString(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        uploadedAt: new Date().toISOString(),\r\n        path: fileName,\r\n      };\r\n\r\n      const updatedFiles = [...files, fileMetadata];\r\n      setFiles(updatedFiles);\r\n\r\n      const { error: updateError } = await supabase\r\n        .from('contacts')\r\n        .update({ files_metadata: updatedFiles as any })\r\n        .eq('id', clientId);\r\n\r\n      if (updateError) {\r\n        throw updateError;\r\n      }\r\n\r\n      onFileUpdate?.(updatedFiles);\r\n      loadStorageUsage();\r\n\r\n      toast({\r\n        title: 'Arquivo enviado',\r\n        description: 'O arquivo foi enviado com sucesso!',\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao enviar arquivo:', error);\r\n      toast({\r\n        title: 'Erro no upload',\r\n        description: 'Falha ao enviar o arquivo',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (fileToDelete: FileMetadata) => {\r\n    if (!clientId) return;\r\n\r\n    try {\r\n      const { error: deleteError } = await supabase.storage\r\n        .from('client-files')\r\n        .remove([fileToDelete.path]);\r\n\r\n      if (deleteError) {\r\n        throw deleteError;\r\n      }\r\n\r\n      const updatedFiles = files.filter((f) => f.id !== fileToDelete.id);\r\n      setFiles(updatedFiles);\r\n\r\n      const { error: updateError } = await supabase\r\n        .from('contacts')\r\n        .update({ files_metadata: updatedFiles as any })\r\n        .eq('id', clientId);\r\n\r\n      if (updateError) {\r\n        throw updateError;\r\n      }\r\n\r\n      onFileUpdate?.(updatedFiles);\r\n      loadStorageUsage();\r\n\r\n      toast({\r\n        title: 'Arquivo removido',\r\n        description: 'O arquivo foi removido com sucesso',\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao deletar arquivo:', error);\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Falha ao remover o arquivo',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const downloadFile = async (file: FileMetadata) => {\r\n    if (!file.url) {\r\n      const { data } = await supabase.storage\r\n        .from('client-files')\r\n        .createSignedUrl(file.path, 3600);\r\n\r\n      if (data?.signedUrl) {\r\n        window.open(data.signedUrl, '_blank');\r\n      }\r\n    } else {\r\n      window.open(file.url, '_blank');\r\n    }\r\n  };\r\n\r\n  const storagePercentage = (storageUsage.used / storageUsage.max) * 100;\r\n\r\n  return {\r\n    files,\r\n    isUploading,\r\n    storageUsage,\r\n    storagePercentage,\r\n    maxFileSize,\r\n    handleFileSelect,\r\n    deleteFile,\r\n    downloadFile,\r\n    formatFileSize,\r\n    reloadFiles: loadClientFiles,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStatsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientStatsQueryOptimized.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'totalWithProbability' is never reassigned. Use 'const' instead.","line":83,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":83,"endColumn":31,"fix":{"range":[2234,2263],"text":"const totalWithProbability = 0;"}},{"ruleId":"prefer-const","severity":2,"message":"'sumProbability' is never reassigned. Use 'const' instead.","line":84,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":84,"endColumn":25,"fix":{"range":[2271,2294],"text":"const sumProbability = 0;"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { queryKeys, cacheConfig } from '@/lib/queryClient';\r\n\r\ninterface ClientStats {\r\n  total: number;\r\n  newThisMonth: number;\r\n  converted: number;\r\n  pending: number;\r\n  byStage: Record<string, number>;\r\n  bySource: Record<string, number>;\r\n  averageValue: number;\r\n  conversionRate: number;\r\n}\r\n\r\ninterface ClientStatsFilters {\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  stage?: string;\r\n  source?: string;\r\n}\r\n\r\n/**\r\n * Hook otimizado para estat├¡sticas de clientes\r\n * Utiliza cache inteligente e queries paralelas\r\n */\r\nexport const useClientStatsQueryOptimized = (filters?: ClientStatsFilters) => {\r\n  return useQuery({\r\n    queryKey: queryKeys.clientStats.byDateRange(\r\n      filters?.dateRange?.start || 'all',\r\n      filters?.dateRange?.end || 'all'\r\n    ),\r\n    queryFn: async (): Promise<ClientStats> => {\r\n      let query = supabase.from('contacts').select(`\r\n        id,\r\n        kanban_stage_id,\r\n        created_at,\r\n        sales,\r\n        budget\r\n      `);\r\n\r\n      // Aplicar filtros se fornecidos\r\n      if (filters?.dateRange) {\r\n        query = query\r\n          .gte('created_at', filters.dateRange.start)\r\n          .lte('created_at', filters.dateRange.end);\r\n      }\r\n\r\n      if (filters?.stage) {\r\n        query = query.eq('kanban_stage_id', filters.stage);\r\n      }\r\n\r\n      // Skip source filter since lead_source doesn't exist in contacts table\r\n\r\n      const { data: contacts, error } = await query.limit(5000);\r\n\r\n      if (error) {\r\n        throw new Error(`Erro ao buscar estat├¡sticas: ${error.message}`);\r\n      }\r\n\r\n      const contactList = contacts || [];\r\n\r\n      // Calcular estat├¡sticas de forma otimizada\r\n      const stats: ClientStats = {\r\n        total: contactList.length,\r\n        newThisMonth: 0,\r\n        converted: 0,\r\n        pending: 0,\r\n        byStage: {},\r\n        bySource: {},\r\n        averageValue: 0,\r\n        conversionRate: 0,\r\n      };\r\n\r\n      // Data de refer├¬ncia para \"este m├¬s\"\r\n      const thisMonth = new Date();\r\n      thisMonth.setDate(1);\r\n      thisMonth.setHours(0, 0, 0, 0);\r\n\r\n      let totalValue = 0;\r\n      let totalWithProbability = 0;\r\n      let sumProbability = 0;\r\n\r\n      // Processar contatos em uma ├║nica passagem\r\n      contactList.forEach(contact => {\r\n        // Novos este m├¬s\r\n        if (contact.created_at && new Date(contact.created_at) >= thisMonth) {\r\n          stats.newThisMonth++;\r\n        }\r\n\r\n        // Por est├ígio\r\n        const stage = contact.kanban_stage_id || 'unknown';\r\n        stats.byStage[stage] = (stats.byStage[stage] || 0) + 1;\r\n\r\n        // Skip source tracking since lead_source doesn't exist\r\n        stats.bySource['unknown'] = stats.bySource['unknown'] || 0;\r\n\r\n        // Use sales or budget as value fallback\r\n        const value = contact.sales || contact.budget || 0;\r\n        if (value > 0) {\r\n          totalValue += value;\r\n        }\r\n\r\n        // Skip conversion probability since field doesn't exist\r\n\r\n        // Contadores espec├¡ficos\r\n        if (stage === 'fechado' || stage === 'convertido') {\r\n          stats.converted++;\r\n        } else if (stage === 'lead' || stage === 'contato-inicial' || stage === 'em-negociacao') {\r\n          stats.pending++;\r\n        }\r\n      });\r\n\r\n      // C├ílculos finais\r\n      stats.averageValue = contactList.length > 0 ? totalValue / contactList.length : 0;\r\n      stats.conversionRate = 0; // Set to 0 since conversion_probability doesn't exist\r\n\r\n      return stats;\r\n    },\r\n    ...cacheConfig.dynamic,\r\n    staleTime: 3 * 60 * 1000, // 3 minutos para stats\r\n    enabled: true,\r\n  });\r\n};\r\n\r\n/**\r\n * Hook para estat├¡sticas em tempo real (cache mais curto)\r\n */\r\nexport const useClientStatsRealtime = () => {\r\n  return useQuery({\r\n    queryKey: queryKeys.clientStats.latest,\r\n    queryFn: async (): Promise<Partial<ClientStats>> => {\r\n      // Query mais leve para dados em tempo real\r\n      const { data, error } = await supabase\r\n        .from('contacts')\r\n        .select('id, kanban_stage_id, created_at')\r\n        .order('created_at', { ascending: false })\r\n        .limit(100);\r\n\r\n      if (error) {\r\n        throw new Error(`Erro ao buscar stats em tempo real: ${error.message}`);\r\n      }\r\n\r\n      const contacts = data || [];\r\n      const today = new Date().toISOString().split('T')[0];\r\n      \r\n      return {\r\n        total: contacts.length,\r\n        newThisMonth: contacts.filter(c => \r\n          c.created_at && c.created_at.startsWith(today)\r\n        ).length,\r\n        byStage: contacts.reduce((acc, contact) => {\r\n          const stage = contact.kanban_stage_id || 'unknown';\r\n          acc[stage] = (acc[stage] || 0) + 1;\r\n          return acc;\r\n        }, {} as Record<string, number>),\r\n      };\r\n    },\r\n    ...cacheConfig.realtime,\r\n    refetchInterval: 30 * 1000, // 30 segundos\r\n  });\r\n};\r\n\r\n/**\r\n * Utilit├írios para invalida├º├úo e prefetch\r\n */\r\nexport const useClientStatsUtils = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return {\r\n    invalidateAll: () => {\r\n      queryClient.invalidateQueries({ queryKey: queryKeys.clientStats.all });\r\n    },\r\n    \r\n    prefetchByDateRange: (start: string, end: string) => {\r\n      queryClient.prefetchQuery({\r\n        queryKey: queryKeys.clientStats.byDateRange(start, end),\r\n        staleTime: cacheConfig.dynamic.staleTime,\r\n      });\r\n    },\r\n    \r\n    setOptimisticData: (data: ClientStats) => {\r\n      queryClient.setQueryData(queryKeys.clientStats.latest, data);\r\n    },\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientsFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135,138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135,138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\r\n\r\nexport interface CustomFieldFilter {\r\n  fieldId: string;\r\n  fieldName: string;\r\n  value: any;\r\n}\r\n\r\nexport interface ClientsFilters {\r\n  searchTerm: string;\r\n  setSearchTerm: (v: string) => void;\r\n  statusFilter: string;\r\n  setStatusFilter: (v: string) => void;\r\n  segmentFilter: string;\r\n  setSegmentFilter: (v: string) => void;\r\n  lastContactFilter: string;\r\n  setLastContactFilter: (v: string) => void;\r\n  customFieldFilters: CustomFieldFilter[];\r\n  addCustomFieldFilter: (filter: CustomFieldFilter) => void;\r\n  removeCustomFieldFilter: (fieldId: string) => void;\r\n  hasActiveFilters: boolean;\r\n  clearAll: (filterType?: \"basic\" | \"customFields\" | \"all\") => void;\r\n}\r\n\r\nexport function useClientsFilters(): ClientsFilters {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [statusFilter, setStatusFilter] = useState(\"all\");\r\n  const [segmentFilter, setSegmentFilter] = useState(\"all\");\r\n  const [lastContactFilter, setLastContactFilter] = useState(\"all\");\r\n  const [customFieldFilters, setCustomFieldFilters] = useState<\r\n    CustomFieldFilter[]\r\n  >([]);\r\n\r\n  const hasActiveFilters = useMemo(\r\n    () =>\r\n      statusFilter !== \"all\" ||\r\n      segmentFilter !== \"all\" ||\r\n      lastContactFilter !== \"all\" ||\r\n      searchTerm !== \"\" ||\r\n      customFieldFilters.length > 0,\r\n    [\r\n      statusFilter,\r\n      segmentFilter,\r\n      lastContactFilter,\r\n      searchTerm,\r\n      customFieldFilters,\r\n    ],\r\n  );\r\n\r\n  const addCustomFieldFilter = (filter: CustomFieldFilter) => {\r\n    setCustomFieldFilters((prev) => {\r\n      // Replace if filter for this field already exists\r\n      const exists = prev.some((f) => f.fieldId === filter.fieldId);\r\n      if (exists) {\r\n        return prev.map((f) => (f.fieldId === filter.fieldId ? filter : f));\r\n      }\r\n      // Otherwise add new filter\r\n      return [...prev, filter];\r\n    });\r\n  };\r\n\r\n  const removeCustomFieldFilter = (fieldId: string) => {\r\n    setCustomFieldFilters((prev) => prev.filter((f) => f.fieldId !== fieldId));\r\n  };\r\n\r\n  const clearAll = (filterType: \"basic\" | \"customFields\" | \"all\" = \"all\") => {\r\n    if (filterType === \"all\" || filterType === \"basic\") {\r\n      setStatusFilter(\"all\");\r\n      setSegmentFilter(\"all\");\r\n      setLastContactFilter(\"all\");\r\n      setSearchTerm(\"\");\r\n    }\r\n\r\n    if (filterType === \"all\" || filterType === \"customFields\") {\r\n      setCustomFieldFilters([]);\r\n    }\r\n  };\r\n\r\n  return {\r\n    searchTerm,\r\n    setSearchTerm,\r\n    statusFilter,\r\n    setStatusFilter,\r\n    segmentFilter,\r\n    setSegmentFilter,\r\n    lastContactFilter,\r\n    setLastContactFilter,\r\n    customFieldFilters,\r\n    addCustomFieldFilter,\r\n    removeCustomFieldFilter,\r\n    hasActiveFilters,\r\n    clearAll,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useClientsTableFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConsolidatedMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactStageHistory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[275,278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[275,278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface StageHistoryEntry {\r\n  id: string;\r\n  old_stage: string | null;\r\n  new_stage: string;\r\n  changed_at: string;\r\n  changed_by: string | null;\r\n  metadata: any;\r\n}\r\n\r\ninterface StageHistoryWithContact {\r\n  contact_id: string;\r\n  contact_name: string;\r\n  old_stage: string | null;\r\n  new_stage: string;\r\n  changed_at: string;\r\n  metadata: any;\r\n}\r\n\r\nexport const useContactStageHistory = (contactId: string | null) => {\r\n  return useQuery({\r\n    queryKey: ['contact-stage-history', contactId],\r\n    queryFn: async (): Promise<StageHistoryEntry[]> => {\r\n      if (!contactId) return [];\r\n      \r\n      const { data, error } = await supabase.rpc('get_contact_stage_history', {\r\n        contact_uuid: contactId\r\n      });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    },\r\n    enabled: !!contactId,\r\n    staleTime: 1000 * 60 * 5, // 5 minutes\r\n  });\r\n};\r\n\r\nexport const useStageHistoryByPeriod = (\r\n  startDate?: string,\r\n  endDate?: string,\r\n  enabled = true\r\n) => {\r\n  return useQuery({\r\n    queryKey: ['stage-history-period', startDate, endDate],\r\n    queryFn: async (): Promise<StageHistoryWithContact[]> => {\r\n      const { data, error } = await supabase.rpc('get_stage_history_by_period', {\r\n        start_date: startDate || null,\r\n        end_date: endDate || null\r\n      });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    },\r\n    enabled: enabled && (!!startDate || !!endDate),\r\n    staleTime: 1000 * 60 * 5, // 5 minutes\r\n  });\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsByKanbanStage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsOptimizedQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsQueryOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContactsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useContextualMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[257,260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[257,260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[282,285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[282,285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[341,344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[341,344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[410,413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[410,413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[922,925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[922,925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1000,1003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1000,1003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1222,1225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1222,1225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface ContextSummary {\r\n  short_term_count: number;\r\n  medium_term_count: number;\r\n  long_term_count: number;\r\n  total_memories: number;\r\n  entities: any[];\r\n  relationships: any[];\r\n  context: Record<string, any>;\r\n  most_important: any | null;\r\n}\r\n\r\ninterface UseContextualMemoryResult {\r\n  memories: any[];\r\n  shortTermMemories: any[];\r\n  mediumTermMemories: any[];\r\n  longTermMemories: any[];\r\n  contextSummary: ContextSummary;\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  generateSummary: () => Promise<string>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar mem├│ria contextual - Simplificado durante unifica├º├úo\r\n */\r\nexport function useContextualMemory(options: any): UseContextualMemoryResult {\r\n  const [memories, setMemories] = useState<any[]>([]);\r\n  const [shortTermMemories, setShortTermMemories] = useState<any[]>([]);\r\n  const [mediumTermMemories, setMediumTermMemories] = useState<any[]>([]);\r\n  const [longTermMemories, setLongTermMemories] = useState<any[]>([]);\r\n  const [contextSummary, setContextSummary] = useState<ContextSummary>({\r\n    short_term_count: 0,\r\n    medium_term_count: 0,\r\n    long_term_count: 0,\r\n    total_memories: 0,\r\n    entities: [],\r\n    relationships: [],\r\n    context: {},\r\n    most_important: null,\r\n  });\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const loadContextualData = useCallback(async () => {\r\n    logger.info('useContextualMemory: Funcionalidade desabilitada durante unifica├º├úo');\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const updateImportance = useCallback(async (memoryId: number, importance: number): Promise<boolean> => {\r\n    logger.info('useContextualMemory: Atualiza├º├úo de import├óncia desabilitada durante unifica├º├úo');\r\n    return false;\r\n  }, []);\r\n\r\n  const generateSummary = useCallback(async (): Promise<string> => {\r\n    logger.info('useContextualMemory: Gera├º├úo de resumo desabilitada durante unifica├º├úo');\r\n    return 'Resumo desabilitado durante unifica├º├úo';\r\n  }, []);\r\n\r\n  const clearCache = useCallback((pattern?: string): void => {\r\n    logger.info('useContextualMemory: Limpeza de cache desabilitada durante unifica├º├úo');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadContextualData();\r\n  }, [loadContextualData]);\r\n\r\n  return {\r\n    memories,\r\n    shortTermMemories,\r\n    mediumTermMemories,\r\n    longTermMemories,\r\n    contextSummary,\r\n    loading,\r\n    error,\r\n    refresh: loadContextualData,\r\n    updateImportance,\r\n    generateSummary,\r\n    clearCache,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[147,150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[147,150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\r\n\r\nexport interface ConversationCustomFieldFilter {\r\n  fieldId: string;\r\n  fieldName: string;\r\n  value: any;\r\n}\r\n\r\nexport interface ConversationFilters {\r\n  searchTerm: string;\r\n  setSearchTerm: (v: string) => void;\r\n  statusFilter: string;\r\n  setStatusFilter: (v: string) => void;\r\n  segmentFilter: string;\r\n  setSegmentFilter: (v: string) => void;\r\n  lastContactFilter: string;\r\n  setLastContactFilter: (v: string) => void;\r\n  // Conversation-specific filters\r\n  unreadFilter: string;\r\n  setUnreadFilter: (v: string) => void;\r\n  lastMessageFilter: string;\r\n  setLastMessageFilter: (v: string) => void;\r\n  clientTypeFilter: string;\r\n  setClientTypeFilter: (v: string) => void;\r\n  customFieldFilters: ConversationCustomFieldFilter[];\r\n  addCustomFieldFilter: (filter: ConversationCustomFieldFilter) => void;\r\n  removeCustomFieldFilter: (fieldId: string) => void;\r\n  hasActiveFilters: boolean;\r\n  clearAll: (filterType?: \"basic\" | \"customFields\" | \"all\") => void;\r\n}\r\n\r\nexport function useConversationFilters(): ConversationFilters {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [statusFilter, setStatusFilter] = useState(\"all\");\r\n  const [segmentFilter, setSegmentFilter] = useState(\"all\");\r\n  const [lastContactFilter, setLastContactFilter] = useState(\"all\");\r\n  \r\n  // Conversation-specific filters\r\n  const [unreadFilter, setUnreadFilter] = useState(\"all\");\r\n  const [lastMessageFilter, setLastMessageFilter] = useState(\"all\");\r\n  const [clientTypeFilter, setClientTypeFilter] = useState(\"all\");\r\n  \r\n  const [customFieldFilters, setCustomFieldFilters] = useState<\r\n    ConversationCustomFieldFilter[]\r\n  >([]);\r\n\r\n  const hasActiveFilters = useMemo(\r\n    () =>\r\n      statusFilter !== \"all\" ||\r\n      segmentFilter !== \"all\" ||\r\n      lastContactFilter !== \"all\" ||\r\n      unreadFilter !== \"all\" ||\r\n      lastMessageFilter !== \"all\" ||\r\n      clientTypeFilter !== \"all\" ||\r\n      searchTerm !== \"\" ||\r\n      customFieldFilters.length > 0,\r\n    [\r\n      statusFilter,\r\n      segmentFilter,\r\n      lastContactFilter,\r\n      unreadFilter,\r\n      lastMessageFilter,\r\n      clientTypeFilter,\r\n      searchTerm,\r\n      customFieldFilters,\r\n    ],\r\n  );\r\n\r\n  const addCustomFieldFilter = (filter: ConversationCustomFieldFilter) => {\r\n    setCustomFieldFilters((prev) => {\r\n      // Replace if filter for this field already exists\r\n      const exists = prev.some((f) => f.fieldId === filter.fieldId);\r\n      if (exists) {\r\n        return prev.map((f) => (f.fieldId === filter.fieldId ? filter : f));\r\n      }\r\n      // Otherwise add new filter\r\n      return [...prev, filter];\r\n    });\r\n  };\r\n\r\n  const removeCustomFieldFilter = (fieldId: string) => {\r\n    setCustomFieldFilters((prev) => prev.filter((f) => f.fieldId !== fieldId));\r\n  };\r\n\r\n  const clearAll = (filterType: \"basic\" | \"customFields\" | \"all\" = \"all\") => {\r\n    if (filterType === \"all\" || filterType === \"basic\") {\r\n      setStatusFilter(\"all\");\r\n      setSegmentFilter(\"all\");\r\n      setLastContactFilter(\"all\");\r\n      setUnreadFilter(\"all\");\r\n      setLastMessageFilter(\"all\");\r\n      setClientTypeFilter(\"all\");\r\n      setSearchTerm(\"\");\r\n    }\r\n\r\n    if (filterType === \"all\" || filterType === \"customFields\") {\r\n      setCustomFieldFilters([]);\r\n    }\r\n  };\r\n\r\n  return {\r\n    searchTerm,\r\n    setSearchTerm,\r\n    statusFilter,\r\n    setStatusFilter,\r\n    segmentFilter,\r\n    setSegmentFilter,\r\n    lastContactFilter,\r\n    setLastContactFilter,\r\n    unreadFilter,\r\n    setUnreadFilter,\r\n    lastMessageFilter,\r\n    setLastMessageFilter,\r\n    clientTypeFilter,\r\n    setClientTypeFilter,\r\n    customFieldFilters,\r\n    addCustomFieldFilter,\r\n    removeCustomFieldFilter,\r\n    hasActiveFilters,\r\n    clearAll,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationMetrics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1151,1154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1151,1154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'startDate' is never reassigned. Use 'const' instead.","line":97,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":97,"endColumn":16,"fix":{"range":[2545,2572],"text":"const startDate = new Date();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5244,5247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5244,5247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'endDate', 'latestStats', and 'startDateStr'. Either exclude them or remove the dependency array.","line":216,"column":6,"nodeType":"ArrayExpression","endLine":216,"endColumn":94,"suggestions":[{"desc":"Update the dependencies array to be: [toast, dateFilter, conversationMetrics, funnelData]","fix":{"range":[6829,6917],"text":"[toast, dateFilter, conversationMetrics, funnelData]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useCallback } from \"react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useConversationMetricsQuery, useMetricsByDateRangeQuery } from \"./useConversationMetricsQuery\";\r\nimport { useFunnelByDateRangeQuery } from \"./useFunnelDataQuery\";\r\nimport { useClientStatsQuery, useDashboardMetricsQuery } from \"./useClientStatsQuery\";\r\n\r\ninterface LeadData {\r\n  id: string;\r\n  name: string;\r\n  lastContact: string;\r\n  status: string;\r\n  value: number;\r\n}\r\n\r\ninterface FunnelStage {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color?: string;\r\n}\r\n\r\ninterface ConversionByTime {\r\n  day: string;\r\n  morning: number;\r\n  afternoon: number;\r\n  evening: number;\r\n}\r\n\r\ninterface LeadsBySource {\r\n  name: string;\r\n  value: number;\r\n  color: string;\r\n}\r\n\r\ninterface LeadsOverTime {\r\n  month: string;\r\n  clients: number;\r\n  leads: number;\r\n}\r\n\r\ninterface ConversationMetrics {\r\n  totalConversations: number;\r\n  responseRate: number;\r\n  totalRespondidas: number;\r\n  avgResponseTime: number;\r\n  conversionRate: number;\r\n  avgClosingTime: number;\r\n  avgResponseStartTime: number; // Nova m├®trica em minutos\r\n  conversationData: any[];\r\n  funnelData: FunnelStage[];\r\n  conversionByTimeData: ConversionByTime[];\r\n  leadsAverageByTimeData: ConversionByTime[]; // Nova m├®trica\r\n  leadsData: LeadData[];\r\n  secondaryResponseRate: number;\r\n  totalSecondaryResponses: number;\r\n  negotiatedValue: number;\r\n  averageNegotiatedValue: number;\r\n  totalNegotiatingValue: number;\r\n  previousPeriodValue: number;\r\n  leadsBySource: LeadsBySource[];\r\n  leadsOverTime: LeadsOverTime[];\r\n  leadsByArrivalFunnel: FunnelStage[];\r\n  isStale: boolean;\r\n}\r\n\r\nexport function useConversationMetrics(\r\n  dateFilter: string = \"week\"\r\n) {\r\n  const [metrics, setMetrics] = useState<ConversationMetrics>({\r\n    totalConversations: 0,\r\n    responseRate: 0,\r\n    totalRespondidas: 0,\r\n    avgResponseTime: 0,\r\n    conversionRate: 0,\r\n    avgClosingTime: 0,\r\n    avgResponseStartTime: 0,\r\n    conversationData: [],\r\n    funnelData: [],\r\n    conversionByTimeData: [],\r\n    leadsAverageByTimeData: [],\r\n    leadsData: [],\r\n    secondaryResponseRate: 0,\r\n    totalSecondaryResponses: 0,\r\n    negotiatedValue: 0,\r\n    averageNegotiatedValue: 0,\r\n    totalNegotiatingValue: 125000,\r\n    previousPeriodValue: 0,\r\n    leadsBySource: [],\r\n    leadsOverTime: [],\r\n    leadsByArrivalFunnel: [],\r\n    isStale: false,\r\n  });\r\n  const { toast } = useToast();\r\n  \r\n  // Calculate date range based on filter\r\n  const endDate = new Date().toISOString().split('T')[0];\r\n  let startDate = new Date();\r\n  \r\n  if (dateFilter === \"week\") {\r\n    startDate.setDate(startDate.getDate() - 7);\r\n  } else if (dateFilter === \"month\") {\r\n    startDate.setMonth(startDate.getMonth() - 1);\r\n  } else if (dateFilter === \"year\") {\r\n    startDate.setFullYear(startDate.getFullYear() - 1);\r\n  }\r\n  \r\n  const startDateStr = startDate.toISOString().split('T')[0];\r\n  \r\n  // React Query hooks\r\n  const { data: conversationMetrics, isLoading: isLoadingConversation } = useMetricsByDateRangeQuery(startDateStr, endDate);\r\n  const { data: dashboardMetrics, isLoading: isLoadingDashboard } = useDashboardMetricsQuery();\r\n  const { stats: latestStats, loading: isLoadingStats } = useClientStatsQuery();\r\n  const { data: funnelData = [], isLoading: isLoadingFunnel } = useFunnelByDateRangeQuery(startDateStr, endDate);\r\n  \r\n  const loading = isLoadingConversation || isLoadingDashboard || isLoadingStats || isLoadingFunnel;\r\n\r\n  const refetchMetrics = useCallback(async () => {\r\n    try {\r\n      console.log(\"Fetching metrics with filter:\", dateFilter);\r\n\r\n      // Funnel data is already available from React Query hook\r\n\r\n      // Transform data to match the expected format\r\n      let transformedMetrics = {\r\n        totalConversations: 0,\r\n        responseRate: 0,\r\n        totalRespondidas: 0,\r\n        avgResponseTime: 0,\r\n        conversionRate: 0,\r\n        avgClosingTime: 0,\r\n        avgResponseStartTime: 0,\r\n        conversationData: [],\r\n        funnelData: [],\r\n        conversionByTimeData: [],\r\n        leadsAverageByTimeData: [],\r\n        leadsData: [],\r\n        secondaryResponseRate: 0,\r\n        totalSecondaryResponses: 0,\r\n        negotiatedValue: 0,\r\n        averageNegotiatedValue: 0,\r\n        totalNegotiatingValue: 0,\r\n        previousPeriodValue: 0,\r\n        leadsBySource: [],\r\n        leadsOverTime: [],\r\n        leadsByArrivalFunnel: [],\r\n        isStale: false,\r\n      };\r\n      \r\n      if (conversationMetrics && conversationMetrics.length > 0) {\r\n        // Use real data from React Query\r\n        const realMetrics = conversationMetrics[0];\r\n        transformedMetrics = {\r\n          ...transformedMetrics,\r\n          totalConversations: realMetrics.total_conversations || 0,\r\n          responseRate: realMetrics.response_rate || 0,\r\n          totalRespondidas: realMetrics.total_respondidas || 0,\r\n          avgResponseTime: realMetrics.avg_response_time || 0,\r\n          conversionRate: realMetrics.conversion_rate || 0,\r\n          avgClosingTime: realMetrics.avg_closing_time || 0,\r\n        };\r\n      }\r\n\r\n      // Transform funnel data if available\r\n      if (funnelData && funnelData.length > 0) {\r\n        transformedMetrics.funnelData = funnelData.map((item: any) => ({\r\n          name: item.stage_name || item.name,\r\n          value: item.count || item.value || 0,\r\n          percentage: item.percentage || 0,\r\n          color: item.color || '#8884d8'\r\n        }));\r\n      }\r\n\r\n      setMetrics({\r\n        ...transformedMetrics,\r\n        totalNegotiatingValue: 125000, // Set default value since field doesn't exist\r\n        isStale: false\r\n      });\r\n\r\n      console.log(\"Metrics fetched successfully from React Query\");\r\n    } catch (error) {\r\n      console.error(\"Error loading conversation metrics:\", error);\r\n      toast({\r\n        title: \"Erro ao atualizar m├®tricas\",\r\n        description:\r\n          \"Problema ao buscar as m├®tricas de conversas. Usando dados de exemplo.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      // Fallback to empty data in case of error\r\n      const safeMetrics = {\r\n        totalConversations: 0,\r\n        responseRate: 0,\r\n        totalRespondidas: 0,\r\n        avgResponseTime: 0,\r\n        conversionRate: 0,\r\n        avgClosingTime: 0,\r\n        avgResponseStartTime: 0,\r\n        conversationData: [],\r\n        funnelData: [],\r\n        conversionByTimeData: [],\r\n        leadsAverageByTimeData: [],\r\n        leadsData: [],\r\n        secondaryResponseRate: 0,\r\n        totalSecondaryResponses: 0,\r\n        negotiatedValue: 0,\r\n        averageNegotiatedValue: 0,\r\n        totalNegotiatingValue: 125000,\r\n        previousPeriodValue: 0,\r\n        leadsBySource: [],\r\n        leadsOverTime: [],\r\n        leadsByArrivalFunnel: [],\r\n        isStale: true\r\n      };\r\n      setMetrics(safeMetrics);\r\n    }\r\n  }, [toast, dateFilter, conversationMetrics, latestStats, funnelData, startDateStr, endDate]);\r\n\r\n  return { metrics, loading, refetchMetrics };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversationTableFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useConversations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4879,4882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4879,4882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4942,4945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4942,4945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5009,5012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5009,5012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5076,5079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5076,5079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Conversation } from \"@/types/chat\";\r\nimport { formatMessageTime } from \"@/utils/chatUtils\";\r\n\r\nexport function useConversations() {\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  const fetchConversations = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"­ƒöì Buscando conversas da tabela unificada...\");\r\n\r\n      // First check if user is authenticated\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.log(\"ÔØî Usu├írio n├úo autenticado\");\r\n        setConversations([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.log(\"­ƒæñ Usu├írio autenticado:\", user.id);\r\n\r\n      // Try to get conversations - first from the main conversations table\r\n      const { data: conversationsData, error: conversationsError } = await supabase\r\n        .from(\"conversations\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"last_message_time\", { ascending: false });\r\n\r\n      if (conversationsError) {\r\n        console.error(\"Error fetching conversations:\", conversationsError);\r\n        // If conversations table fails, try contacts table as fallback\r\n        const { data: contactsData, error: contactsError } = await supabase\r\n          .from(\"contacts\")\r\n          .select(\"*\")\r\n          .eq(\"user_id\", user.id)\r\n          .order(\"created_at\", { ascending: false })\r\n          .limit(50);\r\n\r\n        if (contactsError) {\r\n          console.error(\"Error fetching contacts fallback:\", contactsError);\r\n          throw contactsError;\r\n        }\r\n\r\n        // Convert contacts to conversations format\r\n        const formattedConversations: Conversation[] = (contactsData || []).map((contact, index) => ({\r\n          id: contact.id,\r\n          name: contact.name || contact.client_name || `Cliente ${index + 1}`,\r\n          lastMessage: contact.last_message || \"Nova conversa\",\r\n          time: contact.last_message_time ? formatMessageTime(new Date(contact.last_message_time)) : formatMessageTime(new Date(contact.created_at)),\r\n          unread: contact.unread_count || 0,\r\n          avatar: \"­ƒæñ\",\r\n          phone: contact.phone || \"\",\r\n          email: contact.email || \"\",\r\n          address: contact.address || \"\",\r\n          clientName: contact.client_name || \"\",\r\n          clientSize: contact.client_size || \"\",\r\n          clientType: contact.client_type || \"\",\r\n          sessionId: contact.session_id || contact.id,\r\n        }));\r\n\r\n        console.log(\"­ƒô× Fallback para dados de contatos:\", formattedConversations.length);\r\n        setConversations(formattedConversations);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.log(\"­ƒôè Dados de conversas recebidos:\", conversationsData?.length || 0);\r\n\r\n      if (!conversationsData || conversationsData.length === 0) {\r\n        // If no conversations exist, create some sample data or show empty state\r\n        console.log(\"­ƒôØ Nenhuma conversa encontrada, criando dados de exemplo...\");\r\n        \r\n        // Try to create a sample conversation for demonstration\r\n        const sampleConversation = {\r\n          user_id: user.id,\r\n          session_id: `demo_${Date.now()}`,\r\n          name: \"Conversa de Demonstra├º├úo\",\r\n          phone: \"+55 11 99999-9999\",\r\n          last_message: \"Ol├í! Esta ├® uma conversa de demonstra├º├úo.\",\r\n          last_message_time: new Date().toISOString(),\r\n          unread_count: 1,\r\n          client_data: {\r\n            client_name: \"Cliente Demo\",\r\n            client_type: \"Pessoa F├¡sica\",\r\n            address: \"S├úo Paulo, SP\"\r\n          }\r\n        };\r\n\r\n        const { data: newConversation, error: insertError } = await supabase\r\n          .from(\"conversations\")\r\n          .insert(sampleConversation)\r\n          .select()\r\n          .single();\r\n\r\n        if (insertError) {\r\n          console.error(\"Erro ao criar conversa de exemplo:\", insertError);\r\n        } else {\r\n          console.log(\"Ô£à Conversa de exemplo criada:\", newConversation);\r\n        }\r\n\r\n        // Set empty state for now\r\n        setConversations([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const formattedConversations: Conversation[] = conversationsData.map((conv) => ({\r\n        id: conv.id,\r\n        name: conv.name || \"Cliente\",\r\n        lastMessage: conv.last_message || \"\",\r\n        time: conv.last_message_time ? formatMessageTime(new Date(conv.last_message_time)) : \"\",\r\n        unread: conv.unread_count || 0,\r\n        avatar: conv.avatar || \"­ƒæñ\",\r\n        phone: conv.phone || \"\",\r\n        email: conv.email || \"\",\r\n        address: (conv.client_data as any)?.address || \"\",\r\n        clientName: (conv.client_data as any)?.client_name || \"\",\r\n        clientSize: (conv.client_data as any)?.client_size || \"\",\r\n        clientType: (conv.client_data as any)?.client_type || \"\",\r\n        sessionId: conv.session_id || \"\",\r\n      }));\r\n\r\n      console.log(\"Ô£à Conversas formatadas:\", formattedConversations.length);\r\n      setConversations(formattedConversations);\r\n      \r\n    } catch (error) {\r\n      console.error(\"ÔØî Erro ao buscar conversas:\", error);\r\n      setConversations([]);\r\n      toast({\r\n        title: \"Erro ao carregar conversas\",\r\n        description: \"N├úo foi poss├¡vel carregar as conversas. Tentando novamente...\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n      console.log(\"­ƒÅü Busca de conversas finalizada.\");\r\n    }\r\n  }, [toast]);\r\n\r\n  const updateConversationLastMessage = useCallback(async (sessionId: string) => {\r\n    try {\r\n      console.log(`­ƒô¿ Atualizando ├║ltima mensagem para sess├úo: ${sessionId}`);\r\n      \r\n      // Check if user is authenticated\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.log(\"ÔØî Usu├írio n├úo autenticado para atualiza├º├úo\");\r\n        return;\r\n      }\r\n\r\n      // First try to get the latest message from n8n_chat_messages\r\n      const { data: messageData, error: messageError } = await supabase\r\n        .from(\"n8n_chat_messages\")\r\n        .select(\"*\")\r\n        .eq(\"session_id\", sessionId)\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"created_at\", { ascending: false })\r\n        .limit(1);\r\n\r\n      if (messageError) {\r\n        console.error(\"Erro ao buscar mensagens:\", messageError);\r\n        return;\r\n      }\r\n\r\n      if (messageData && messageData.length > 0) {\r\n        const lastMessage = messageData[0];\r\n        const messageContent = lastMessage.user_message || lastMessage.bot_message || \"Nova mensagem\";\r\n        \r\n        console.log(`­ƒôØ Conte├║do da ├║ltima mensagem: ${messageContent}`);\r\n\r\n        // Get current unread count first\r\n        const { data: currentConv } = await supabase\r\n          .from(\"conversations\")\r\n          .select(\"unread_count\")\r\n          .eq(\"session_id\", sessionId)\r\n          .eq(\"user_id\", user.id)\r\n          .single();\r\n\r\n        const currentUnreadCount = currentConv?.unread_count || 0;\r\n\r\n        // Update the conversation with the new message\r\n        const { error: updateError } = await supabase\r\n          .from(\"conversations\")\r\n          .update({\r\n            last_message: messageContent,\r\n            last_message_time: new Date().toISOString(),\r\n            unread_count: currentUnreadCount + 1\r\n          })\r\n          .eq(\"session_id\", sessionId)\r\n          .eq(\"user_id\", user.id);\r\n\r\n        if (updateError) {\r\n          console.error(\"Erro ao atualizar conversa:\", updateError);\r\n        } else {\r\n          console.log(`Ô£à Conversa atualizada com sucesso: ${sessionId}`);\r\n          \r\n          // Update local state immediately\r\n          setConversations(prev => \r\n            prev.map(conv => \r\n              conv.sessionId === sessionId \r\n                ? { \r\n                    ...conv, \r\n                    lastMessage: messageContent, \r\n                    time: formatMessageTime(new Date()),\r\n                    unread: conv.unread + 1 \r\n                  }\r\n                : conv\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"ÔØî Erro em updateConversationLastMessage:\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, [fetchConversations]);\r\n\r\n  return {\r\n    conversations,\r\n    setConversations,\r\n    loading,\r\n    updateConversationLastMessage,\r\n    fetchConversations,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCustomFieldValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1744,1747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1744,1747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1763,1766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1763,1766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { ValidationRule, AuditLogEntry } from \"@/types/customFields\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport function useCustomFieldValidation() {\n  const [validationRules, setValidationRules] = useState<ValidationRule[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchValidationRules = async (fieldId?: string) => {\n    try {\n      setLoading(true);\n\n      let query = supabase\n        .from(\"custom_field_validation_rules\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: true });\n\n      if (fieldId) {\n        query = query.eq(\"field_id\", fieldId);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error(\"Error fetching validation rules:\", error);\n        toast({\n          title: \"Erro ao carregar regras\",\n          description: \"N├úo foi poss├¡vel carregar as regras de valida├º├úo.\",\n          variant: \"destructive\",\n        });\n        return [];\n      }\n\n      const transformedRules: ValidationRule[] = (data || []).map((rule) => ({\n        id: rule.id,\n        field_id: rule.field_id,\n        rule_type: rule.rule_type as ValidationRule[\"rule_type\"],\n        rule_value: rule.rule_value,\n        error_message: rule.error_message,\n        created_at: rule.created_at,\n        updated_at: rule.updated_at,\n      }));\n\n      setValidationRules(transformedRules);\n      return transformedRules;\n    } catch (error) {\n      console.error(\"Error fetching validation rules:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logCustomFieldChange = async (\n    clientId: string,\n    fieldId: string,\n    oldValue: any,\n    newValue: any,\n    changeType: \"create\" | \"update\" | \"delete\",\n    changedBy?: string,\n  ) => {\n    try {\n      const { error } = await supabase.from(\"custom_field_audit_log\").insert({\n        client_id: clientId,\n        field_id: fieldId,\n        old_value: oldValue,\n        new_value: newValue,\n        change_type: changeType,\n        changed_by: changedBy || \"system\",\n      });\n\n      if (error) {\n        console.error(\"Error logging field change:\", error);\n      } else {\n        console.log(\n          `Logged ${changeType} for field ${fieldId} on client ${clientId}`,\n        );\n      }\n    } catch (error) {\n      console.error(\"Error logging field change:\", error);\n    }\n  };\n\n  const fetchAuditLog = async (\n    clientId?: string,\n    fieldId?: string,\n  ): Promise<AuditLogEntry[]> => {\n    try {\n      let query = supabase\n        .from(\"custom_field_audit_log\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (clientId) {\n        query = query.eq(\"client_id\", clientId);\n      }\n\n      if (fieldId) {\n        query = query.eq(\"field_id\", fieldId);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error(\"Error fetching audit log:\", error);\n        return [];\n      }\n\n      return (data || []).map((entry) => ({\n        id: entry.id,\n        client_id: entry.client_id,\n        field_id: entry.field_id,\n        old_value: entry.old_value,\n        new_value: entry.new_value,\n        changed_by: entry.changed_by,\n        change_type: entry.change_type as AuditLogEntry[\"change_type\"],\n        created_at: entry.created_at,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching audit log:\", error);\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    fetchValidationRules();\n  }, []);\n\n  return {\n    validationRules,\n    loading,\n    fetchValidationRules,\n    logCustomFieldChange,\n    fetchAuditLog,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useCustomFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4726,4729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4726,4729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8410,8413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8410,8413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\r\nimport {\r\n  CustomField,\r\n  ClientCustomValue,\r\n  CustomFieldWithValue,\r\n} from \"@/types/customFields\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport function useCustomFields() {\r\n  const [customFields, setCustomFields] = useState<CustomField[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchCustomFields = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"custom_fields\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: true });\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching custom fields:\", error);\r\n        toast({\r\n          title: \"Erro ao carregar campos\",\r\n          description: \"N├úo foi poss├¡vel carregar os campos personalizados.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Transform the data to match our CustomField interface\r\n      // Ensure data is an array before calling map\r\n      const transformedFields: CustomField[] = (data || []).map((field) => ({\r\n        id: field.id,\r\n        field_name: field.field_name,\r\n        field_type: field.field_type as\r\n          | \"text\"\r\n          | \"single_select\"\r\n          | \"multi_select\",\r\n        field_options: field.field_options\r\n          ? JSON.parse(JSON.stringify(field.field_options))\r\n          : null,\r\n        is_required: field.is_required,\r\n        created_at: field.created_at,\r\n        updated_at: field.updated_at,\r\n        visibility_settings: {\r\n          visible_in_client_info: true,\r\n          visible_in_tabs: {\r\n            basic: true,\r\n            commercial: false,\r\n            utm: false,\r\n            docs: false,\r\n          },\r\n        },\r\n      }));\r\n\r\n      setCustomFields(transformedFields);\r\n    } catch (error) {\r\n      console.error(\"Error fetching custom fields:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar campos\",\r\n        description: \"N├úo foi poss├¡vel carregar os campos personalizados.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCustomFields();\r\n  }, []);\r\n\r\n  const addCustomField = async (\r\n    field: Omit<CustomField, \"id\" | \"created_at\" | \"updated_at\">,\r\n  ) => {\r\n    try {\r\n      // Get the current user from the auth session\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"custom_fields\")\r\n        .insert({\r\n          field_name: field.field_name,\r\n          field_type: field.field_type,\r\n          field_options: field.field_options,\r\n          is_required: field.is_required,\r\n          category: \"basic\", // Default category, can be modified later\r\n          user_id: user.id,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error(\"Error creating field:\", error);\r\n        toast({\r\n          title: \"Erro ao criar campo\",\r\n          description: \"N├úo foi poss├¡vel criar o campo personalizado.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      const newField: CustomField = {\r\n        id: data.id,\r\n        field_name: data.field_name,\r\n        field_type: data.field_type as\r\n          | \"text\"\r\n          | \"single_select\"\r\n          | \"multi_select\",\r\n        field_options: data.field_options\r\n          ? JSON.parse(JSON.stringify(data.field_options))\r\n          : null,\r\n        is_required: data.is_required,\r\n        created_at: data.created_at,\r\n        updated_at: data.updated_at,\r\n        visibility_settings: field.visibility_settings || {\r\n          visible_in_client_info: true,\r\n          visible_in_tabs: {\r\n            basic: true,\r\n            commercial: false,\r\n            utm: false,\r\n            docs: false,\r\n          },\r\n        },\r\n      };\r\n\r\n      setCustomFields((prev) => [...prev, newField]);\r\n\r\n      toast({\r\n        title: \"Campo adicionado\",\r\n        description: `Campo \"${field.field_name}\" foi criado com sucesso.`,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating field:\", error);\r\n      toast({\r\n        title: \"Erro ao criar campo\",\r\n        description: \"N├úo foi poss├¡vel criar o campo personalizado.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const createCustomField = async (\r\n    field: Omit<CustomField, \"id\" | \"created_at\" | \"updated_at\">,\r\n  ) => {\r\n    return addCustomField(field);\r\n  };\r\n\r\n  const updateCustomField = async (id: string, field: Partial<CustomField>) => {\r\n    try {\r\n      const updateData: any = {};\r\n      \r\n      if (field.field_name !== undefined) updateData.field_name = field.field_name;\r\n      if (field.field_type !== undefined) updateData.field_type = field.field_type;\r\n      if (field.field_options !== undefined) updateData.field_options = field.field_options;\r\n      if (field.is_required !== undefined) updateData.is_required = field.is_required;\r\n      \r\n      const { error } = await supabase\r\n        .from(\"custom_fields\")\r\n        .update(updateData)\r\n        .eq(\"id\", id);\r\n\r\n      if (error) {\r\n        console.error(\"Error updating field:\", error);\r\n        toast({\r\n          title: \"Erro ao atualizar campo\",\r\n          description: \"N├úo foi poss├¡vel atualizar o campo personalizado.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      setCustomFields((prev) =>\r\n        prev.map((f) =>\r\n          f.id === id\r\n            ? { ...f, ...field, updated_at: new Date().toISOString() }\r\n            : f,\r\n        ),\r\n      );\r\n\r\n      toast({\r\n        title: \"Campo atualizado\",\r\n        description: \"Campo personalizado foi atualizado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating field:\", error);\r\n      toast({\r\n        title: \"Erro ao atualizar campo\",\r\n        description: \"N├úo foi poss├¡vel atualizar o campo personalizado.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteCustomField = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(\"custom_fields\")\r\n        .delete()\r\n        .eq(\"id\", id);\r\n\r\n      if (error) {\r\n        console.error(\"Error deleting field:\", error);\r\n        toast({\r\n          title: \"Erro ao remover campo\",\r\n          description: \"N├úo foi poss├¡vel remover o campo personalizado.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      setCustomFields((prev) => prev.filter((f) => f.id !== id));\r\n\r\n      toast({\r\n        title: \"Campo removido\",\r\n        description: \"Campo personalizado foi removido com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error deleting field:\", error);\r\n      toast({\r\n        title: \"Erro ao remover campo\",\r\n        description: \"N├úo foi poss├¡vel remover o campo personalizado.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchClientCustomValues = async (clientId: string) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"client_custom_values\")\r\n        .select(\"*\")\r\n        .eq(\"client_id\", clientId);\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching client custom values:\", error);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error(\"Error fetching client custom values:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getCustomFieldsWithValues = async (\r\n    clientId: string,\r\n  ): Promise<CustomFieldWithValue[]> => {\r\n    try {\r\n      const [fields, values] = await Promise.all([\r\n        customFields.length > 0\r\n          ? Promise.resolve(customFields)\r\n          : fetchCustomFields().then(() => customFields),\r\n        fetchClientCustomValues(clientId),\r\n      ]);\r\n\r\n      const valuesMap = new Map();\r\n      values.forEach((value) => {\r\n        valuesMap.set(value.field_id, value.field_value);\r\n      });\r\n\r\n      return fields.map((field) => ({\r\n        ...field,\r\n        value: valuesMap.get(field.id) || null,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error getting custom fields with values:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const saveClientCustomValues = async (\r\n    clientId: string,\r\n    values: { fieldId: string; value: any }[],\r\n  ) => {\r\n    try {\r\n      const upsertPromises = values.map(({ fieldId, value }) =>\r\n        supabase.from(\"client_custom_values\").upsert(\r\n          {\r\n            client_id: clientId,\r\n            field_id: fieldId,\r\n            field_value: value,\r\n          },\r\n          {\r\n            onConflict: \"client_id,field_id\",\r\n          },\r\n        ),\r\n      );\r\n\r\n      const results = await Promise.all(upsertPromises);\r\n\r\n      // Check for any errors\r\n      const errors = results.filter((result) => result.error);\r\n      if (errors.length > 0) {\r\n        console.error(\"Error saving some custom values:\", errors);\r\n        toast({\r\n          title: \"Erro parcial ao salvar\",\r\n          description: \"Alguns campos personalizados n├úo puderam ser salvos.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      toast({\r\n        title: \"Valores salvos\",\r\n        description: \"Campos personalizados foram salvos com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error saving custom values:\", error);\r\n      toast({\r\n        title: \"Erro ao salvar\",\r\n        description: \"N├úo foi poss├¡vel salvar os campos personalizados.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    customFields,\r\n    loading,\r\n    fetchCustomFields,\r\n    addCustomField,\r\n    createCustomField,\r\n    updateCustomField,\r\n    deleteCustomField,\r\n    fetchClientCustomValues,\r\n    getCustomFieldsWithValues,\r\n    saveClientCustomValues,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardInvalidators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtimeQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDashboardRealtimeSubscriptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebounceCallback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebouncedCallback.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[232,235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[232,235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\n/**\n * Hook para criar uma fun├º├úo debounced.\n * @param callback Fun├º├úo original a ser debounced\n * @param delay Delay em ms (default 400)\n */\nexport function useDebouncedCallback<T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number = 400,\n) {\n  const timeout = React.useRef<NodeJS.Timeout | null>(null);\n\n  const debounced = React.useCallback(\n    (...args: Parameters<T>) => {\n      if (timeout.current) clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => callback(...args), delay);\n    },\n    [callback, delay],\n  );\n\n  // cleanup (evita vazamento de timers)\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current) clearTimeout(timeout.current);\n    };\n  }, []);\n\n  return debounced;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDebouncedValue.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[789,792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[789,792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[799,802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[799,802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Hook para debounce de valores\r\n * ├Ütil para otimizar buscas e filtros em tempo real\r\n * \r\n * @param value - Valor a ser debounced\r\n * @param delay - Delay em millisegundos (padr├úo: 300ms)\r\n * @returns Valor debounced\r\n */\r\nexport function useDebouncedValue<T>(value: T, delay: number = 300): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Hook para debounce de callbacks\r\n * ├Ütil para otimizar event handlers\r\n */\r\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\r\n  callback: T,\r\n  delay: number = 300\r\n): T {\r\n  const [debouncedCallback, setDebouncedCallback] = useState<T>(() => callback);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedCallback(() => callback);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [callback, delay]);\r\n\r\n  return debouncedCallback;\r\n}\r\n\r\n/**\r\n * Hook para debounce de estado com retorno do estado pendente\r\n * ├Ütil quando voc├¬ precisa saber se h├í uma mudan├ºa pendente\r\n */\r\nexport function useDebouncedState<T>(\r\n  initialValue: T,\r\n  delay: number = 300\r\n): [T, T, (value: T) => void, boolean] {\r\n  const [value, setValue] = useState<T>(initialValue);\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\r\n  const [isPending, setIsPending] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (value !== debouncedValue) {\r\n      setIsPending(true);\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n        setIsPending(false);\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    } else {\r\n      setIsPending(false);\r\n    }\r\n  }, [value, debouncedValue, delay]);\r\n\r\n  return [value, debouncedValue, setValue, isPending];\r\n}\r\n\r\n/**\r\n * Hook para debounce de search queries\r\n * Especializado para buscas com otimiza├º├Áes espec├¡ficas\r\n */\r\nexport function useDebouncedSearch(\r\n  initialQuery: string = '',\r\n  delay: number = 300,\r\n  minLength: number = 2\r\n) {\r\n  const [query, setQuery] = useState<string>(initialQuery);\r\n  const [debouncedQuery, setDebouncedQuery] = useState<string>(\r\n    initialQuery.length >= minLength ? initialQuery : ''\r\n  );\r\n  const [isSearching, setIsSearching] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Se a query for menor que o m├¡nimo, limpar o debounced\r\n    if (query.length < minLength) {\r\n      setDebouncedQuery('');\r\n      setIsSearching(false);\r\n      return;\r\n    }\r\n\r\n    setIsSearching(true);\r\n    const handler = setTimeout(() => {\r\n      setDebouncedQuery(query);\r\n      setIsSearching(false);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [query, delay, minLength]);\r\n\r\n  const clearSearch = () => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setIsSearching(false);\r\n  };\r\n\r\n  return {\r\n    query,\r\n    debouncedQuery,\r\n    setQuery,\r\n    isSearching,\r\n    clearSearch,\r\n    hasValidQuery: debouncedQuery.length >= minLength,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useDynamicFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3976,3979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3976,3979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5096,5099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5096,5099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\nimport { DynamicCategory } from \"@/components/clients/DynamicCategoryManager\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useCustomFieldValidation } from \"./useCustomFieldValidation\";\nimport { validateCustomField } from \"@/utils/customFieldValidation\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport function useDynamicFields(clientId: string | null) {\n  const [dynamicFields, setDynamicFields] = useState<{\n    basic: DynamicCategory[];\n    commercial: DynamicCategory[];\n    personalized: DynamicCategory[];\n    documents: DynamicCategory[];\n  }>({\n    basic: [],\n    commercial: [],\n    personalized: [],\n    documents: [],\n  });\n  const [loading, setLoading] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<{\n    [fieldId: string]: string;\n  }>({});\n\n  const { validationRules, logCustomFieldChange } = useCustomFieldValidation();\n\n  const fetchDynamicFields = useCallback(async (clientId: string) => {\n    try {\n      setLoading(true);\n\n      // Fetch custom field definitions\n      const { data: customFields, error: fieldsError } = await supabase\n        .from(\"custom_fields\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: true });\n\n      if (fieldsError) {\n        console.error(\"Error fetching custom fields:\", fieldsError);\n        return;\n      }\n\n      // Fetch client values for these fields\n      const { data: clientValues, error: valuesError } = await supabase\n        .from(\"client_custom_values\")\n        .select(\"*\")\n        .eq(\"client_id\", clientId);\n\n      if (valuesError) {\n        console.error(\"Error fetching client values:\", valuesError);\n      }\n\n      // Create a map of field values for quick lookup\n      const valuesMap = new Map();\n      if (clientValues) {\n        clientValues.forEach((value) => {\n          valuesMap.set(value.field_id, value.field_value);\n        });\n      }\n\n      // Transform the data into the expected format\n      const categorizedFields = {\n        basic: [] as DynamicCategory[],\n        commercial: [] as DynamicCategory[],\n        personalized: [] as DynamicCategory[],\n        documents: [] as DynamicCategory[],\n      };\n\n      if (customFields) {\n        customFields.forEach((field) => {\n          // Use the category from the database, defaulting to 'basic' if not set\n          const category = (field.category ||\n            \"basic\") as keyof typeof categorizedFields;\n          const fieldValue = valuesMap.get(field.id);\n\n          const dynamicField: DynamicCategory = {\n            id: field.id,\n            name: field.field_name,\n            type: field.field_type as \"text\" | \"single_select\" | \"multi_select\",\n            options: field.field_options\n              ? (field.field_options as string[])\n              : undefined,\n            value:\n              fieldValue || (field.field_type === \"multi_select\" ? [] : \"\"),\n          };\n\n          // Ensure the category exists in our categorized fields\n          if (categorizedFields[category]) {\n            categorizedFields[category].push(dynamicField);\n          } else {\n            // If category doesn't exist, default to 'basic'\n            categorizedFields.basic.push(dynamicField);\n          }\n        });\n      }\n\n      setDynamicFields(categorizedFields);\n    } catch (error) {\n      console.error(\"Error fetching dynamic fields:\", error);\n      // Reset to empty state on error\n      setDynamicFields({\n        basic: [],\n        commercial: [],\n        personalized: [],\n        documents: [],\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (clientId) {\n      fetchDynamicFields(clientId);\n    } else {\n      setDynamicFields({\n        basic: [],\n        commercial: [],\n        personalized: [],\n        documents: [],\n      });\n    }\n  }, [clientId, fetchDynamicFields]);\n\n  const updateField = useCallback(\n    async (fieldId: string, newValue: any) => {\n      if (!clientId) return;\n\n      // Get current value for audit logging\n      const currentField = Object.values(dynamicFields)\n        .flat()\n        .find((field) => field.id === fieldId);\n      const oldValue = currentField?.value;\n\n      // Validate the field\n      const validationError = validateCustomField(\n        fieldId,\n        newValue,\n        validationRules,\n      );\n\n      if (validationError) {\n        setValidationErrors((prev) => ({\n          ...prev,\n          [fieldId]: validationError.message,\n        }));\n        toast({\n          title: \"Erro de valida├º├úo\",\n          description: validationError.message,\n          variant: \"destructive\",\n        });\n        return;\n      } else {\n        // Clear validation error if field is now valid\n        setValidationErrors((prev) => {\n          const newErrors = { ...prev };\n          delete newErrors[fieldId];\n          return newErrors;\n        });\n      }\n\n      // Helper function to update a field in the dynamic fields state\n      const updateDynamicFieldValue = (prevFields: typeof dynamicFields, fieldId: string, newValue: any) => {\n        const updated = { ...prevFields };\n\n        // Find and update the field in the appropriate category\n        Object.keys(updated).forEach((category) => {\n          const categoryFields = updated[category as keyof typeof updated];\n          const fieldIndex = categoryFields.findIndex(\n            (field) => field.id === fieldId,\n          );\n          if (fieldIndex !== -1) {\n            categoryFields[fieldIndex] = {\n              ...categoryFields[fieldIndex],\n              value: newValue,\n            };\n          }\n        });\n\n        return updated;\n      };\n\n      // Optimistically update the UI\n      setDynamicFields(prev => updateDynamicFieldValue(prev, fieldId, newValue));\n\n      try {\n        // Save the value to the database\n        const { error } = await supabase.from(\"client_custom_values\").upsert(\n          {\n            client_id: clientId,\n            field_id: fieldId,\n            field_value: newValue,\n          },\n          {\n            onConflict: \"client_id,field_id\",\n          },\n        );\n\n        if (error) {\n          console.error(\"Error saving field value:\", error);\n          toast({\n            title: \"Erro ao salvar\",\n            description: \"N├úo foi poss├¡vel salvar o valor do campo.\",\n            variant: \"destructive\",\n          });\n          // Optionally revert the optimistic update here\n        } else {\n          // Log the change for audit purposes\n          await logCustomFieldChange(\n            clientId,\n            fieldId,\n            oldValue,\n            newValue,\n            oldValue === undefined ? \"create\" : \"update\",\n          );\n\n          console.log(\n            `Field ${fieldId} updated successfully with value:`,\n            newValue,\n          );\n        }\n      } catch (error) {\n        console.error(\"Error updating field:\", error);\n        toast({\n          title: \"Erro ao salvar\",\n          description: \"N├úo foi poss├¡vel salvar o valor do campo.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [clientId, dynamicFields, validationRules, logCustomFieldChange],\n  );\n\n  return {\n    dynamicFields,\n    loading,\n    validationErrors,\n    refetch: () => clientId && fetchDynamicFields(clientId),\n    updateField,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEpisodicMemory.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'fetchMemories' and 'fetchTimeline'. Either include them or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMemories, fetchTimeline, sessionId]","fix":{"range":[2776,2797],"text":"[fetchMemories, fetchTimeline, sessionId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchMemoriesByPeriod'. Either include it or remove the dependency array.","line":105,"column":5,"nodeType":"ArrayExpression","endLine":105,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMemoriesByPeriod, sessionId]","fix":{"range":[3702,3723],"text":"[fetchMemoriesByPeriod, sessionId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'fetchTimeline' and 'storeMemoryQuery'. Either include them or remove the dependency array.","line":141,"column":5,"nodeType":"ArrayExpression","endLine":141,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTimeline, sessionId, storeMemoryQuery]","fix":{"range":[4974,4985],"text":"[fetchTimeline, sessionId, storeMemoryQuery]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'fetchTimeline' and 'updateImportanceQuery'. Either include them or remove the dependency array.","line":169,"column":5,"nodeType":"ArrayExpression","endLine":169,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTimeline, sessionId, updateImportanceQuery]","fix":{"range":[5795,5806],"text":"[fetchTimeline, sessionId, updateImportanceQuery]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { N8nChatMemory, EpisodicMemory, Memory } from '@/types/memory';\r\nimport { useSupabaseEpisodicMemory } from './useSupabaseEpisodicMemory';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseEpisodicMemoryOptions {\r\n  sessionId: string;\r\n  useCache?: boolean;\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface UseEpisodicMemoryResult {\r\n  memories: Memory[];\r\n  timeline: EpisodicMemory[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  getMemoriesByPeriod: (startDate: string, endDate: string) => Promise<Memory[]>;\r\n  storeMemory: (memory: Partial<N8nChatMemory>) => Promise<N8nChatMemory | null>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar mem├│ria epis├│dica com suporte a cache e linha do tempo\r\n */\r\nexport function useEpisodicMemory({\r\n  sessionId,\r\n  useCache = true,\r\n  autoRefresh = false,\r\n  refreshInterval = 30000, // 30 segundos\r\n}: UseEpisodicMemoryOptions): UseEpisodicMemoryResult {\r\n  const [memories, setMemories] = useState<Memory[]>([]);\r\n  const [timeline, setTimeline] = useState<EpisodicMemory[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const {\r\n    fetchMemories,\r\n    fetchTimeline,\r\n    fetchMemoriesByPeriod,\r\n    updateImportance: updateImportanceQuery,\r\n    storeMemory: storeMemoryQuery,\r\n  } = useSupabaseEpisodicMemory();\r\n\r\n  // Fun├º├úo para carregar todos os dados epis├│dicos\r\n  const loadEpisodicData = useCallback(async () => {\r\n    if (!sessionId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Carregar mem├│rias e linha do tempo em paralelo\r\n      const [memoriesData, timelineData] = await Promise.all([\r\n        fetchMemories(sessionId, 50),\r\n        fetchTimeline(sessionId),\r\n      ]);\r\n\r\n      // Convert N8nChatMemory to Memory format\r\n      const convertedMemories: Memory[] = memoriesData.map(item => ({\r\n        id: item.id,\r\n        message: typeof item.message === 'string' ? item.message : JSON.stringify(item.message),\r\n        memory_type: item.memory_type || 'episodic',\r\n        created_at: item.created_at || new Date().toISOString(),\r\n        importance: item.importance,\r\n        entities: item.entities,\r\n        context: item.context\r\n      }));\r\n\r\n      setMemories(convertedMemories);\r\n      setTimeline(timelineData);\r\n      setError(null);\r\n    } catch (err) {\r\n      logger.error('Erro ao carregar dados epis├│dicos:', err);\r\n      setError(err instanceof Error ? err : new Error('Erro ao carregar dados epis├│dicos'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sessionId, useCache]);\r\n\r\n  // Fun├º├úo para buscar mem├│rias por per├¡odo\r\n  const getMemoriesByPeriod = useCallback(\r\n    async (startDate: string, endDate: string): Promise<Memory[]> => {\r\n      if (!sessionId) return [];\r\n\r\n      try {\r\n        const results = await fetchMemoriesByPeriod(sessionId, startDate, endDate);\r\n        \r\n        // Convert N8nChatMemory to Memory format\r\n        return results.map(item => ({\r\n          id: item.id,\r\n          message: typeof item.message === 'string' ? item.message : JSON.stringify(item.message),\r\n          memory_type: item.memory_type || 'episodic',\r\n          created_at: item.created_at || new Date().toISOString(),\r\n          importance: item.importance,\r\n          entities: item.entities,\r\n          context: item.context\r\n        }));\r\n      } catch (err) {\r\n        logger.error('Erro ao buscar mem├│rias por per├¡odo:', err);\r\n        return [];\r\n      }\r\n    },\r\n    [sessionId, useCache]\r\n  );\r\n\r\n  // Fun├º├úo para armazenar nova mem├│ria\r\n  const storeMemory = useCallback(\r\n    async (memory: Partial<N8nChatMemory>): Promise<N8nChatMemory | null> => {\r\n      if (!sessionId) return null;\r\n\r\n      try {\r\n        const newMemory = await storeMemoryQuery({ ...memory, session_id: sessionId });\r\n\r\n        if (newMemory) {\r\n          // Convert and update local state\r\n          const convertedMemory: Memory = {\r\n            id: newMemory.id,\r\n            message: typeof newMemory.message === 'string' ? newMemory.message : JSON.stringify(newMemory.message),\r\n            memory_type: newMemory.memory_type || 'episodic',\r\n            created_at: newMemory.created_at || new Date().toISOString(),\r\n            importance: newMemory.importance,\r\n            entities: newMemory.entities,\r\n            context: newMemory.context\r\n          };\r\n          \r\n          setMemories(prev => [convertedMemory, ...prev]);\r\n          \r\n          // Recarregar linha do tempo\r\n          const updatedTimeline = await fetchTimeline(sessionId);\r\n          setTimeline(updatedTimeline);\r\n        }\r\n\r\n        return newMemory;\r\n      } catch (err) {\r\n        logger.error('Erro ao armazenar mem├│ria:', err);\r\n        return null;\r\n      }\r\n    },\r\n    [sessionId]\r\n  );\r\n\r\n  // Fun├º├úo para atualizar import├óncia\r\n  const updateImportance = useCallback(\r\n    async (memoryId: number, importance: number): Promise<boolean> => {\r\n      try {\r\n        const success = await updateImportanceQuery(memoryId, importance);\r\n\r\n        if (success) {\r\n          // Atualizar estado local\r\n          setMemories(prev =>\r\n            prev.map(memory =>\r\n              memory.id === memoryId ? { ...memory, importance } : memory\r\n            )\r\n          );\r\n          \r\n          // Recarregar linha do tempo\r\n          const updatedTimeline = await fetchTimeline(sessionId);\r\n          setTimeline(updatedTimeline);\r\n        }\r\n\r\n        return success;\r\n      } catch (err) {\r\n        logger.error('Erro ao atualizar import├óncia:', err);\r\n        return false;\r\n      }\r\n    },\r\n    [sessionId]\r\n  );\r\n\r\n  // Fun├º├úo para limpar cache\r\n  const clearCache = useCallback((): void => {\r\n    // noop - cache layer not implemented\r\n  }, []);\r\n\r\n  // Carregar dados iniciais\r\n  useEffect(() => {\r\n    loadEpisodicData();\r\n  }, [loadEpisodicData]);\r\n\r\n  // Configurar atualiza├º├úo autom├ítica se habilitada\r\n  useEffect(() => {\r\n    if (!autoRefresh || refreshInterval <= 0) return;\r\n\r\n    const intervalId = setInterval(() => {\r\n      loadEpisodicData();\r\n    }, refreshInterval);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [autoRefresh, refreshInterval, loadEpisodicData]);\r\n\r\n  return {\r\n    memories,\r\n    timeline,\r\n    loading,\r\n    error,\r\n    refresh: loadEpisodicData,\r\n    getMemoriesByPeriod,\r\n    storeMemory,\r\n    updateImportance,\r\n    clearCache,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEventFormDialog.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkBlockedDate', 'determineAttendanceInfo', 'determineInitialStatus', 'findClientInfo', 'findServiceInfo', 'resetFormState', 'setBasicEventInfo', and 'updateState'. Either include them or remove the dependency array.","line":256,"column":6,"nodeType":"ArrayExpression","endLine":256,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [event, open, contacts, setBasicEventInfo, findServiceInfo, findClientInfo, determineAttendanceInfo, checkBlockedDate, updateState, determineInitialStatus, resetFormState]","fix":{"range":[8297,8320],"text":"[event, open, contacts, setBasicEventInfo, findServiceInfo, findClientInfo, determineAttendanceInfo, checkBlockedDate, updateState, determineInitialStatus, resetFormState]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateEndTime'. Either include it or remove the dependency array.","line":261,"column":6,"nodeType":"ArrayExpression","endLine":261,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [state.startDateTime, state.selectedDuration, updateEndTime]","fix":{"range":[8432,8477],"text":"[state.startDateTime, state.selectedDuration, updateEndTime]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\r\nimport { format, parse, parseISO } from 'date-fns';\r\nimport { Contact } from '@/types/client';\r\nimport { EventFormData, CalendarEvent } from '@/hooks/useCalendarEvents';\r\nimport { useOptimizedContactsData } from '@/hooks/useOptimizedContactsData';\r\nimport { useEventFormState } from '@/hooks/useEventFormState';\r\nimport { EventFormState } from '@/types/eventForm';\r\nimport { COLORS, SERVICES, COLLABORATORS, DURATIONS, ATTENDANCE_TYPES } from '@/constants/eventFormConstants';\r\nimport { \r\n  validateForm, \r\n  validateNewClientData, \r\n  validateServiceSelection, \r\n  validateDateTimeSelection \r\n} from '@/utils/eventFormValidation';\r\nimport {\r\n  createBlockedDateDescription,\r\n  createRegularEventDescription,\r\n  prepareFormData,\r\n  addTag as addTagHelper,\r\n  removeTag as removeTagHelper,\r\n  extractTags\r\n} from '@/utils/eventFormHelpers';\r\n\r\ninterface UseEventFormDialogProps {\r\n  event?: CalendarEvent;\r\n  open: boolean;\r\n}\r\n\r\nexport const useEventFormDialog = ({ event, open }: UseEventFormDialogProps) => {\r\n  const { contacts } = useOptimizedContactsData();\r\n  const { state, updateState, resetForm: resetFormState } = useEventFormState();\r\n\r\n  // Filter contacts based on search term\r\n  const filteredContacts = contacts.filter(\r\n    contact => \r\n      contact.name.toLowerCase().includes(state.searchTerm.toLowerCase()) ||\r\n      (contact.email && contact.email.toLowerCase().includes(state.searchTerm.toLowerCase())) ||\r\n      (contact.phone && contact.phone.includes(state.searchTerm))\r\n  );\r\n\r\n\r\n  // Set basic event information from existing event\r\n  const setBasicEventInfo = (event: CalendarEvent) => {\r\n    const start = parseISO(event.start);\r\n    const end = parseISO(event.end);\r\n    const durationInMinutes = Math.round((end.getTime() - start.getTime()) / (1000 * 60));\r\n    \r\n    updateState({\r\n      summary: event.summary || \"\",\r\n      automation: \"\",\r\n      collaborator: event.hostName || \"\",\r\n      eventDescription: event.description || \"\",\r\n      email: event.attendees?.find((a) => a?.email)?.email || \"\",\r\n      startDateTime: format(start, \"yyyy-MM-dd'T'HH:mm\"),\r\n      endDateTime: format(end, \"yyyy-MM-dd'T'HH:mm\"),\r\n      selectedColor: COLORS[0],\r\n      selectedDuration: durationInMinutes,\r\n    });\r\n  };\r\n\r\n  // Find service information from event description\r\n  const findServiceInfo = (event: CalendarEvent) => {\r\n    const foundService = SERVICES.find(service => \r\n      event.summary?.includes(service) || event.description?.includes(service)\r\n    );\r\n    \r\n    if (foundService) {\r\n      updateState({ selectedService: foundService });\r\n    }\r\n  };\r\n\r\n  // Find client information from event attendees\r\n  const findClientInfo = (event: CalendarEvent) => {\r\n    const clientEmail = event.attendees?.find((a) => a?.email)?.email;\r\n    if (clientEmail) {\r\n      const foundClient = contacts.find(c => c.email === clientEmail);\r\n      if (foundClient) {\r\n        updateState({\r\n          selectedClient: foundClient,\r\n          isNewClient: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Determine attendance type and location/link from event description\r\n  const determineAttendanceInfo = (event: CalendarEvent) => {\r\n    if (event.description?.toLowerCase().includes(\"online\") || \r\n        event.description?.toLowerCase().includes(\"zoom\") || \r\n        event.description?.toLowerCase().includes(\"meet\")) {\r\n      // Try to extract meeting link\r\n      const linkMatch = event.description?.match(/(https?:\\/\\/[^\\s]+)/);\r\n      \r\n      updateState({\r\n        attendanceType: \"online\",\r\n        meetingLink: linkMatch ? linkMatch[0] : \"\",\r\n      });\r\n    } else {\r\n      // Try to extract location\r\n      const locationLines = event.description?.split('\\n').filter(line => \r\n        line.toLowerCase().includes(\"local\") || \r\n        line.toLowerCase().includes(\"endere├ºo\") ||\r\n        line.toLowerCase().includes(\"localiza├º├úo\")\r\n      );\r\n      \r\n      updateState({\r\n        attendanceType: \"presencial\",\r\n        location: locationLines && locationLines.length > 0 ?\r\n          locationLines[0].replace(/local|endere├ºo|localiza├º├úo/i, \"\").trim() : \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Check if date is blocked and extract reason\r\n  const checkBlockedDate = (event: CalendarEvent) => {\r\n    if (event.summary?.toLowerCase().includes(\"bloqueado\") || \r\n        event.description?.toLowerCase().includes(\"bloqueado\")) {\r\n      // Try to extract block reason\r\n      const reasonLines = event.description?.split('\\n').filter(line => \r\n        line.toLowerCase().includes(\"motivo\") || \r\n        line.toLowerCase().includes(\"raz├úo\")\r\n      );\r\n      \r\n      updateState({\r\n        isBlockingDate: true,\r\n        blockReason: reasonLines && reasonLines.length > 0 ?\r\n          reasonLines[0].replace(/motivo|raz├úo/i, \"\").trim() : \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  // Determine initial status from event status\r\n  const determineInitialStatus = (event: CalendarEvent) => {\r\n    if (event.status === \"confirmed\") {\r\n      updateState({ initialStatus: \"confirmado\" });\r\n    } else if (event.status === \"tentative\") {\r\n      updateState({ initialStatus: \"pendente\" });\r\n    }\r\n  };\r\n\r\n  const validateFormLocal = (): boolean => {\r\n    return validateForm(state);\r\n  };\r\n\r\n  // Event handlers\r\n  const handleSubmit = (e: React.FormEvent): EventFormData | null => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateFormLocal()) {\r\n      return null;\r\n    }\r\n    \r\n    const startDate = state.startDateTime ? \r\n      parse(state.startDateTime, \"yyyy-MM-dd'T'HH:mm\", new Date()) : new Date();\r\n    const endDate = new Date(startDate.getTime() + state.selectedDuration * 60 * 1000);\r\n    \r\n    let eventInfo;\r\n    if (state.isBlockingDate) {\r\n      eventInfo = createBlockedDateDescription(state);\r\n    } else {\r\n      eventInfo = createRegularEventDescription(state);\r\n    }\r\n    \r\n    return prepareFormData(eventInfo.summary, eventInfo.description, startDate, endDate, state);\r\n  };\r\n\r\n  const handleSelectClient = (contact: Contact) => {\r\n    updateState({\r\n      selectedClient: contact,\r\n      isNewClient: false,\r\n      email: contact.email || \"\",\r\n      searchTerm: \"\",\r\n      activeTab: \"service\"\r\n    });\r\n  };\r\n\r\n  const handleNewClient = () => {\r\n    updateState({\r\n      isNewClient: true,\r\n      selectedClient: null\r\n    });\r\n  };\r\n\r\n  const validateNewClientDataLocal = (): boolean => {\r\n    return validateNewClientData(state);\r\n  };\r\n\r\n  const handleSaveNewClient = () => {\r\n    if (validateNewClientDataLocal()) {\r\n      updateState({\r\n        email: state.newClientData.email,\r\n        activeTab: \"service\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateServiceSelectionLocal = (): boolean => {\r\n    return validateServiceSelection(state);\r\n  };\r\n\r\n  const handleServiceNext = () => {\r\n    if (validateServiceSelectionLocal()) {\r\n      updateState({ activeTab: \"datetime\" });\r\n    }\r\n  };\r\n\r\n  const validateDateTimeSelectionLocal = (): boolean => {\r\n    return validateDateTimeSelection(state);\r\n  };\r\n\r\n  const handleDateTimeNext = () => {\r\n    if (validateDateTimeSelectionLocal()) {\r\n      updateState({ activeTab: \"attendance\" });\r\n    }\r\n  };\r\n\r\n  const updateEndTime = () => {\r\n    if (state.startDateTime) {\r\n      const startDate = parse(state.startDateTime, \"yyyy-MM-dd'T'HH:mm\", new Date());\r\n      const endDate = new Date(startDate.getTime() + state.selectedDuration * 60 * 1000);\r\n      updateState({ endDateTime: format(endDate, \"yyyy-MM-dd'T'HH:mm\") });\r\n    }\r\n  };\r\n\r\n  const addTag = () => {\r\n    addTagHelper(state, updateState);\r\n  };\r\n\r\n  const removeTag = (id: string) => {\r\n    removeTagHelper(id, state, updateState);\r\n  };\r\n\r\n  const handleDeleteDialogOpen = () => {\r\n    updateState({ isDeleteDialogOpen: true });\r\n  };\r\n\r\n  const handleDeleteDialogClose = () => {\r\n    updateState({ isDeleteDialogOpen: false });\r\n  };\r\n\r\n  // Load event data when event changes or dialog opens\r\n  useEffect(() => {\r\n    if (event && open) {\r\n      setBasicEventInfo(event);\r\n      findServiceInfo(event);\r\n      findClientInfo(event);\r\n      determineAttendanceInfo(event);\r\n      checkBlockedDate(event);\r\n      const extractedTags = extractTags(event.description);\r\n      updateState({ tags: extractedTags });\r\n      determineInitialStatus(event);\r\n    } else if (!open) {\r\n      resetFormState();\r\n    }\r\n  }, [event, open, contacts]);\r\n\r\n  // Update end time when start time or duration changes\r\n  useEffect(() => {\r\n    updateEndTime();\r\n  }, [state.startDateTime, state.selectedDuration]);\r\n\r\n  return {\r\n    // State\r\n    state,\r\n    updateState,\r\n    filteredContacts,\r\n    constants: {\r\n      COLORS,\r\n      SERVICES,\r\n      COLLABORATORS,\r\n      DURATIONS,\r\n      ATTENDANCE_TYPES,\r\n    },\r\n    \r\n    // Validation\r\n    validateForm: validateFormLocal,\r\n    validateNewClientData: validateNewClientDataLocal,\r\n    validateServiceSelection: validateServiceSelectionLocal,\r\n    validateDateTimeSelection: validateDateTimeSelectionLocal,\r\n    \r\n    // Event handlers\r\n    handleSubmit,\r\n    handleSelectClient,\r\n    handleNewClient,\r\n    handleSaveNewClient,\r\n    handleServiceNext,\r\n    handleDateTimeNext,\r\n    addTag,\r\n    removeTag,\r\n    handleDeleteDialogOpen,\r\n    handleDeleteDialogClose,\r\n    \r\n    // Helper functions\r\n    resetForm: resetFormState,\r\n    updateEndTime,\r\n  };\r\n};\r\n\r\nexport default useEventFormDialog;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEventFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useEvolutionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFAQManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2757,2760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2757,2760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport {\r\n  useFAQQuery,\r\n  useCreateFAQMutation,\r\n  useUpdateFAQMutation,\r\n  useDeleteFAQMutation,\r\n} from \"@/hooks/useFAQQuery\";\r\n\r\nexport interface FAQFormData {\r\n  id?: string;\r\n  question: string;\r\n  answer: string;\r\n  category: string;\r\n  tags: string;\r\n}\r\n\r\nconst useFAQManagement = () => {\r\n  const { toast } = useToast();\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [editingFAQ, setEditingFAQ] = useState<FAQFormData | null>(null);\r\n  const [newFAQ, setNewFAQ] = useState<FAQFormData>({\r\n    question: \"\",\r\n    answer: \"\",\r\n    category: \"Geral\",\r\n    tags: \"\",\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n\r\n  const { data: faqs = [], isLoading, error } = useFAQQuery();\r\n  const createFAQMutation = useCreateFAQMutation();\r\n  const updateFAQMutation = useUpdateFAQMutation();\r\n  const deleteFAQMutation = useDeleteFAQMutation();\r\n\r\n  const categories = useMemo(\r\n    () => Array.from(new Set(faqs.map((f) => f.category))),\r\n    [faqs]\r\n  );\r\n\r\n  const filteredFAQs = useMemo(() => {\r\n    return faqs.filter((item) => {\r\n      const matchesSearch =\r\n        item.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        item.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        item.category.toLowerCase().includes(searchTerm.toLowerCase());\r\n\r\n      const matchesCategory =\r\n        selectedCategory === \"all\" || item.category === selectedCategory;\r\n\r\n      return matchesSearch && matchesCategory;\r\n    });\r\n  }, [faqs, searchTerm, selectedCategory]);\r\n\r\n  const addFAQ = async () => {\r\n    if (!newFAQ.question || !newFAQ.answer) {\r\n      toast({\r\n        title: \"Campos obrigat├│rios\",\r\n        description: \"Pergunta e resposta s├úo obrigat├│rios.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await createFAQMutation.mutateAsync({\r\n        question: newFAQ.question,\r\n        answer: newFAQ.answer,\r\n        category: newFAQ.category || \"Geral\",\r\n        tags: newFAQ.tags\r\n          .split(\",\")\r\n          .map((tag) => tag.trim())\r\n          .filter(Boolean),\r\n      });\r\n      setNewFAQ({ question: \"\", answer: \"\", category: \"Geral\", tags: \"\" });\r\n      setIsAddDialogOpen(false);\r\n      toast({\r\n        title: \"FAQ adicionado\",\r\n        description: \"Item de FAQ cadastrado com sucesso!\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao adicionar FAQ.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const editFAQ = (item: any) => {\r\n    setEditingFAQ({\r\n      ...item,\r\n      tags: Array.isArray(item.tags) ? item.tags.join(\", \") : \"\",\r\n    });\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const saveEditedFAQ = async () => {\r\n    if (!editingFAQ) return;\r\n\r\n    try {\r\n      await updateFAQMutation.mutateAsync({\r\n        id: editingFAQ.id as string,\r\n        question: editingFAQ.question,\r\n        answer: editingFAQ.answer,\r\n        category: editingFAQ.category,\r\n        tags: editingFAQ.tags\r\n          .split(\",\")\r\n          .map((tag: string) => tag.trim())\r\n          .filter(Boolean),\r\n      });\r\n      setEditingFAQ(null);\r\n      setIsEditDialogOpen(false);\r\n      toast({\r\n        title: \"FAQ atualizado\",\r\n        description: \"Item de FAQ atualizado com sucesso!\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao atualizar FAQ.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteFAQ = async (id: string) => {\r\n    try {\r\n      await deleteFAQMutation.mutateAsync(id);\r\n      toast({\r\n        title: \"FAQ removido\",\r\n        description: \"Item de FAQ removido com sucesso!\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao remover FAQ.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const exportFAQs = () => {\r\n    const dataStr = JSON.stringify(faqs, null, 2);\r\n    const dataUri =\r\n      \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\r\n    const exportFileDefaultName = \"faqs.json\";\r\n    const linkElement = document.createElement(\"a\");\r\n    linkElement.setAttribute(\"href\", dataUri);\r\n    linkElement.setAttribute(\"download\", exportFileDefaultName);\r\n    linkElement.click();\r\n  };\r\n\r\n  return {\r\n    isAddDialogOpen,\r\n    setIsAddDialogOpen,\r\n    isEditDialogOpen,\r\n    setIsEditDialogOpen,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    selectedCategory,\r\n    setSelectedCategory,\r\n    categories,\r\n    filteredFAQs,\r\n    newFAQ,\r\n    setNewFAQ,\r\n    editingFAQ,\r\n    setEditingFAQ,\r\n    addFAQ,\r\n    editFAQ,\r\n    saveEditedFAQ,\r\n    deleteFAQ,\r\n    exportFAQs,\r\n    isLoading,\r\n    error,\r\n    createFAQMutation,\r\n    updateFAQMutation,\r\n    deleteFAQMutation,\r\n  };\r\n};\r\n\r\nexport default useFAQManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFAQQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFetchCalendarEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1242,1245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1242,1245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarEvent } from \"@/types/calendar\";\r\nimport { format } from \"date-fns\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\n\r\n// Fun├º├úo principal de busca - agora usa Supabase como fonte prim├íria\r\nexport async function fetchCalendarEvents(\r\n  date?: Date,\r\n  range?: { start: Date; end: Date },\r\n): Promise<CalendarEvent[]> {\r\n  try {\r\n    let query = supabase\r\n      .from('calendar_events')\r\n      .select('*')\r\n      .order('start_time', { ascending: true });\r\n\r\n    // Filtrar por range de datas\r\n    if (range) {\r\n      const start = format(range.start, \"yyyy-MM-dd\") + \"T00:00:00.000Z\";\r\n      const end = format(range.end, \"yyyy-MM-dd\") + \"T23:59:59.999Z\";\r\n      query = query.gte('start_time', start).lte('start_time', end);\r\n    } else if (date) {\r\n      const start = format(date, \"yyyy-MM-dd\") + \"T00:00:00.000Z\";\r\n      const end = format(date, \"yyyy-MM-dd\") + \"T23:59:59.999Z\";\r\n      query = query.gte('start_time', start).lte('start_time', end);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Erro ao buscar eventos do Supabase:', error);\r\n      throw error;\r\n    }\r\n\r\n    // Mapear dados do Supabase para CalendarEvent\r\n    return (data || []).map((event: any) => ({\r\n      id: event.id,\r\n      summary: event.summary || event.title || \"Evento sem t├¡tulo\",\r\n      description: event.description || \"\",\r\n      start: event.start_time,\r\n      end: event.end_time,\r\n      status: event.status || \"confirmed\",\r\n      htmlLink: event.html_link || \"#\",\r\n      attendees: [], // Pode ser expandido para buscar de calendar_attendees\r\n      hostName: event.host_name || \"\",\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao buscar eventos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// ========== API EXTERNA DESATIVADA ==========\r\n// Mantida para refer├¬ncia mas n├úo utilizada\r\n/*\r\nexport async function fetchCalendarEventsFromExternalAPI(\r\n  date?: Date,\r\n  range?: { start: Date; end: Date },\r\n): Promise<CalendarEvent[]> {\r\n  return retryFetch(\r\n    async () => {\r\n      let start: string;\r\n      let end: string;\r\n      if (range) {\r\n        start = format(range.start, \"yyyy-MM-dd\") + \"T00:00:00.000-03:00\";\r\n        end = format(range.end, \"yyyy-MM-dd\") + \"T23:59:59.999-03:00\";\r\n      } else {\r\n        const dateToUse = date || new Date();\r\n        start = format(dateToUse, \"yyyy-MM-dd\") + \"T00:00:00.000-03:00\";\r\n        end = format(dateToUse, \"yyyy-MM-dd\") + \"T23:59:59.999-03:00\";\r\n      }\r\n\r\n      const url = new URL(\"https://webhook.comercial247.com.br/webhook/agenda\");\r\n      url.searchParams.append(\"start\", start);\r\n      url.searchParams.append(\"end\", end);\r\n\r\n      const response = await fetch(url.toString(), {\r\n        method: \"GET\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const msg = await response.text();\r\n        throw new Error(\r\n          `Erro na requisi├º├úo (${response.status}): ${\r\n            msg || response.statusText\r\n          }`,\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      const eventsArray = Array.isArray(data) ? data : data.events || [];\r\n      \r\n      return eventsArray\r\n        .map((event: any) => ({\r\n          id: event.id || `event-${Date.now()}-${Math.random()}`,\r\n          summary: event.summary || \"Evento sem t├¡tulo\",\r\n          description: event.description || \"\",\r\n          start: event.start,\r\n          end: event.end,\r\n          status: event.status || \"confirmed\",\r\n          htmlLink: event.htmlLink || \"#\",\r\n          attendees: event.attendees || [],\r\n          hostName: event.hostName || \"\",\r\n        }))\r\n        .filter(\r\n          (e) =>\r\n            e.start && e.end && e.summary && e.summary !== \"Evento sem t├¡tulo\",\r\n        );\r\n    },\r\n    2,\r\n    800,\r\n  );\r\n}\r\n*/\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFilterDialog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFilteredEvents.ts","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":39,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":41,"endColumn":12,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1275,1502],"text":"{ const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd }; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":42,"endColumn":79,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1275,1502],"text":"{ const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd }; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo, useCallback } from \"react\";\r\nimport { parseISO, isWithinInterval, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\r\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\r\nimport { ScheduleEvent } from \"@/hooks/useScheduleData\";\r\nimport { convertScheduleEventsToCalendarEvents } from \"@/utils/scheduleUtils\";\r\n\r\nexport function useFilteredEvents(\r\n  events: CalendarEvent[],\r\n  scheduleEvents: ScheduleEvent[],\r\n  statusFilter: string,\r\n  calendarViewType: \"mes\" | \"semana\" | \"dia\" | \"lista\",\r\n  searchTerm: string,\r\n  selectedDate: Date | undefined,\r\n  currentMonth: Date\r\n) {\r\n  const getListModeFilterPeriod = useCallback(() => {\r\n    const today = new Date();\r\n    switch (calendarViewType) {\r\n      case \"dia\":\r\n        if (selectedDate) {\r\n          return {\r\n            start: new Date(\r\n              selectedDate.getFullYear(),\r\n              selectedDate.getMonth(),\r\n              selectedDate.getDate(),\r\n            ),\r\n            end: new Date(\r\n              selectedDate.getFullYear(),\r\n              selectedDate.getMonth(),\r\n              selectedDate.getDate(),\r\n              23,\r\n              59,\r\n              59,\r\n            ),\r\n          };\r\n        }\r\n        return null;\r\n      case \"semana\":\r\n        const weekStart = startOfWeek(selectedDate || today, {\r\n          weekStartsOn: 0,\r\n        });\r\n        const weekEnd = endOfWeek(selectedDate || today, { weekStartsOn: 0 });\r\n        return { start: weekStart, end: weekEnd };\r\n      case \"mes\":\r\n        return {\r\n          start: startOfMonth(currentMonth),\r\n          end: endOfMonth(currentMonth),\r\n        };\r\n      case \"lista\":\r\n        // For \"lista\" view, don't apply date filtering\r\n        return null;\r\n      default:\r\n        return {\r\n          start: new Date(\r\n            today.getFullYear(),\r\n            today.getMonth(),\r\n            today.getDate(),\r\n          ),\r\n          end: new Date(\r\n            today.getFullYear(),\r\n            today.getMonth(),\r\n            today.getDate(),\r\n            23,\r\n            59,\r\n            59,\r\n          ),\r\n        };\r\n    }\r\n  }, [calendarViewType, selectedDate, currentMonth]);\r\n\r\n  const filteredEvents = useMemo(() => {\r\n    // Convert schedule events to calendar events\r\n    const convertedScheduleEvents = convertScheduleEventsToCalendarEvents(scheduleEvents);\r\n    \r\n    // Combine events from calendar with events from schedule\r\n    const allEvents = [...events, ...convertedScheduleEvents];\r\n    \r\n    return allEvents\r\n      .filter((event) => {\r\n        if (!event.start || typeof event.start !== \"string\") return false;\r\n        if (statusFilter !== \"all\" && event.status !== statusFilter)\r\n          return false;\r\n        \r\n        // Apply date filtering based on calendar view type\r\n        if (calendarViewType === \"lista\") {\r\n          // For \"lista\" view, don't apply date filtering\r\n          return true;\r\n        } else {\r\n          try {\r\n            const eventDate = parseISO(event.start);\r\n            if (isNaN(eventDate.getTime())) return false;\r\n            const filterPeriod = getListModeFilterPeriod();\r\n            if (!filterPeriod) return true;\r\n            return isWithinInterval(eventDate, {\r\n              start: filterPeriod.start,\r\n              end: filterPeriod.end,\r\n            });\r\n          } catch {\r\n            return false;\r\n          }\r\n        }\r\n      })\r\n      .filter((event) => {\r\n        if (!searchTerm) return true;\r\n        const searchLower = searchTerm.toLowerCase();\r\n        return (\r\n          (event.summary &&\r\n            event.summary.toLowerCase().includes(searchLower)) ||\r\n          (event.description &&\r\n            event.description.toLowerCase().includes(searchLower)) ||\r\n          (event.attendees &&\r\n            event.attendees.some(\r\n              (attendee) =>\r\n                attendee?.email &&\r\n                attendee.email.toLowerCase().includes(searchLower),\r\n            ))\r\n        );\r\n      })\r\n      .sort((a, b) => {\r\n        try {\r\n          const dateA = a.start ? parseISO(a.start) : new Date(0);\r\n          const dateB = b.start ? parseISO(b.start) : new Date(0);\r\n          // For \"lista\" view, sort by most recent first\r\n          if (calendarViewType === \"lista\") {\r\n            return dateB.getTime() - dateA.getTime();\r\n          }\r\n          return dateA.getTime() - dateB.getTime();\r\n        } catch {\r\n          return 0;\r\n        }\r\n      });\r\n  }, [events, scheduleEvents, statusFilter, calendarViewType, getListModeFilterPeriod, searchTerm]);\r\n\r\n  return filteredEvents;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useFunnelDataQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useHosts.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHosts'. Either include it or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchHosts, user]","fix":{"range":[546,552],"text":"[fetchHosts, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/context/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Database } from '@/integrations/supabase/types';\nimport { toast } from '@/hooks/use-toast';\n\ntype Host = Database['public']['Tables']['employees']['Row'];\n\nexport const useHosts = () => {\n  const { user } = useAuth();\n  const [hosts, setHosts] = useState<Host[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      fetchHosts();\n    }\n  }, [user]);\n\n  const fetchHosts = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"employees\")\n        .select(\"*\")\n        .eq(\"user_id\", user?.id)\n        .order(\"name\", { ascending: true });\n\n      if (error) throw error;\n      setHosts(data as Host[] || []);\n    } catch (error) {\n      console.error(\"Erro ao buscar anfitri├Áes:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"N├úo foi poss├¡vel carregar os anfitri├Áes.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    hosts,\n    loading,\n    refetch: fetchHosts,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStages.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'loadStagesFromLocalStorage' and 'saveStageToLocalStorage'. Either include them or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadStagesFromLocalStorage, saveStageToLocalStorage, user?.id]","fix":{"range":[2277,2283],"text":"[loadStagesFromLocalStorage, saveStageToLocalStorage, user?.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\n\r\nexport interface KanbanStage {\r\n  id: string;\r\n  title: string;\r\n  ordering: number;\r\n  settings?: {\r\n    color?: string;\r\n  };\r\n}\r\n\r\nconst DEFAULT_STAGES = [\r\n  \"Entraram\",\r\n  \"Conversaram\",\r\n  \"Agendaram\",\r\n  \"Compareceram\",\r\n  \"Negociaram\",\r\n  \"Postergaram\",\r\n  \"Converteram\",\r\n];\r\n\r\nexport function useKanbanStages() {\r\n  const { user } = useAuth();\r\n  const [stages, setStages] = useState<KanbanStage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  // Store stages in localStorage to persist between page refreshes\r\n  const saveStageToLocalStorage = (stages: KanbanStage[]) => {\r\n    try {\r\n      const userId = user?.id || 'anonymous';\r\n      localStorage.setItem(`kanban_stages_${userId}`, JSON.stringify(stages));\r\n    } catch (error) {\r\n      console.error(\"Error saving stages to localStorage:\", error);\r\n    }\r\n  };\r\n\r\n  // Load stages from localStorage\r\n  const loadStagesFromLocalStorage = (): KanbanStage[] | null => {\r\n    try {\r\n      const userId = user?.id || 'anonymous';\r\n      const storedStages = localStorage.getItem(`kanban_stages_${userId}`);\r\n      if (storedStages) {\r\n        return JSON.parse(storedStages);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading stages from localStorage:\", error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Load user stages or fallback to DEFAULT_STAGES\r\n  const fetchStages = useCallback(async () => {\r\n    setLoading(true);\r\n    console.log(\"Fetching kanban stages, user:\", user?.id);\r\n    \r\n    // First try to load from localStorage\r\n    const storedStages = loadStagesFromLocalStorage();\r\n    if (storedStages && storedStages.length > 0) {\r\n      console.log(\"Loaded stages from localStorage:\", storedStages.length);\r\n      setStages(storedStages);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    // If no stored stages, use default stages\r\n    console.log(\"No stored stages, using default stages\");\r\n    const defaultStages = DEFAULT_STAGES.map((stage, idx) => ({\r\n      id: String(idx),\r\n      title: stage,\r\n      ordering: idx,\r\n    }));\r\n    \r\n    setStages(defaultStages);\r\n    saveStageToLocalStorage(defaultStages);\r\n    setLoading(false);\r\n  }, [user]);\r\n\r\n  const addStage = async (title: string) => {\r\n    // Prevent duplicates by title\r\n    if (stages.some((s) => s.title.toLowerCase() === title.toLowerCase()))\r\n      return;\r\n      \r\n    console.log(\"Adding new stage:\", title);\r\n    const newStage = {\r\n      id: `stage-${Date.now()}`,\r\n      title,\r\n      ordering: stages.length,\r\n    };\r\n    \r\n    const updatedStages = [...stages, newStage];\r\n    setStages(updatedStages);\r\n    saveStageToLocalStorage(updatedStages);\r\n  };\r\n\r\n  const removeStage = async (id: string) => {\r\n    console.log(\"Removing stage:\", id);\r\n    const updatedStages = stages.filter((s) => s.id !== id);\r\n    setStages(updatedStages);\r\n    saveStageToLocalStorage(updatedStages);\r\n  };\r\n\r\n  const reorderStages = async (newStages: KanbanStage[]) => {\r\n    console.log(\"Reordering stages\");\r\n    setStages(newStages);\r\n    saveStageToLocalStorage(newStages);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"useKanbanStages: Initial fetch\");\r\n    fetchStages();\r\n  }, [fetchStages]);\r\n\r\n  return {\r\n    stages,\r\n    loading,\r\n    fetchStages,\r\n    addStage,\r\n    removeStage,\r\n    reorderStages,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesFunnelData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesLocal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useKanbanStagesSupabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[607,610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[607,610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'createDefaultStages'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [createDefaultStages, user.id]","fix":{"range":[2599,2609],"text":"[createDefaultStages, user.id]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport interface KanbanStage {\r\n  id: string;\r\n  title: string;\r\n  ordering: number;\r\n  settings?: {\r\n    color?: string;\r\n  };\r\n}\r\n\r\nconst DEFAULT_STAGES = [\r\n  \"Entraram\",\r\n  \"Conversaram\", \r\n  \"Agendaram\",\r\n  \"Compareceram\",\r\n  \"Negociaram\",\r\n  \"Postergaram\",\r\n  \"Converteram\",\r\n];\r\n\r\n// Helper function to safely parse settings from database Json\r\nconst parseStageSettings = (settings: any): { color?: string } => {\r\n  if (!settings) return { color: '#6b7280' };\r\n  \r\n  // If settings is already an object with color property\r\n  if (typeof settings === 'object' && settings !== null && !Array.isArray(settings)) {\r\n    return {\r\n      color: typeof settings.color === 'string' ? settings.color : '#6b7280'\r\n    };\r\n  }\r\n  \r\n  // Default fallback\r\n  return { color: '#6b7280' };\r\n};\r\n\r\nexport function useKanbanStagesSupabase() {\r\n  const { user } = useAuth();\r\n  const [stages, setStages] = useState<KanbanStage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const fetchStages = useCallback(async () => {\r\n    if (!user?.id) {\r\n      console.log(\"No user ID available for fetching stages\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"Fetching kanban stages for user:\", user.id);\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('ordering', { ascending: true });\r\n\r\n      if (error) {\r\n        console.error(\"Error fetching stages:\", error);\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"Fetched stages from Supabase:\", data);\r\n\r\n      if (!data || data.length === 0) {\r\n        console.log(\"No stages found, creating default stages\");\r\n        await createDefaultStages();\r\n        return;\r\n      }\r\n\r\n      const transformedStages: KanbanStage[] = data.map(stage => ({\r\n        id: stage.id,\r\n        title: stage.title,\r\n        ordering: stage.ordering,\r\n        settings: parseStageSettings(stage.settings)\r\n      }));\r\n\r\n      setStages(transformedStages);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch kanban stages:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar est├ígios\",\r\n        description: \"N├úo foi poss├¡vel carregar os est├ígios do kanban.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  const createDefaultStages = async () => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      console.log(\"Creating default stages for user:\", user.id);\r\n      \r\n      const defaultStagesData = DEFAULT_STAGES.map((title, index) => ({\r\n        title,\r\n        ordering: index,\r\n        user_id: user.id,\r\n        settings: { color: '#6b7280' }\r\n      }));\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .insert(defaultStagesData)\r\n        .select();\r\n\r\n      if (error) {\r\n        console.error(\"Error creating default stages:\", error);\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"Created default stages:\", data);\r\n\r\n      const transformedStages: KanbanStage[] = data.map(stage => ({\r\n        id: stage.id,\r\n        title: stage.title,\r\n        ordering: stage.ordering,\r\n        settings: parseStageSettings(stage.settings)\r\n      }));\r\n\r\n      setStages(transformedStages);\r\n\r\n      toast({\r\n        title: \"Est├ígios criados\",\r\n        description: \"Est├ígios padr├úo do kanban foram criados com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to create default stages:\", error);\r\n      toast({\r\n        title: \"Erro ao criar est├ígios\",\r\n        description: \"N├úo foi poss├¡vel criar os est├ígios padr├úo.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const addStage = async (title: string) => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      console.log(\"Adding new stage:\", title);\r\n      \r\n      const newStageData = {\r\n        title,\r\n        ordering: stages.length,\r\n        user_id: user.id,\r\n        settings: { color: '#6b7280' }\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('kanban_stages')\r\n        .insert([newStageData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const newStage: KanbanStage = {\r\n        id: data.id,\r\n        title: data.title,\r\n        ordering: data.ordering,\r\n        settings: parseStageSettings(data.settings)\r\n      };\r\n\r\n      setStages(prev => [...prev, newStage]);\r\n\r\n      toast({\r\n        title: \"Est├ígio adicionado\",\r\n        description: `O est├ígio \"${title}\" foi adicionado com sucesso.`,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to add stage:\", error);\r\n      toast({\r\n        title: \"Erro ao adicionar est├ígio\",\r\n        description: \"N├úo foi poss├¡vel adicionar o novo est├ígio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStage = async (stageId: string, title: string, color: string) => {\r\n    try {\r\n      console.log(\"Updating stage:\", stageId, title, color);\r\n\r\n      const { error } = await supabase\r\n        .from('kanban_stages')\r\n        .update({\r\n          title,\r\n          settings: { color }\r\n        })\r\n        .eq('id', stageId);\r\n\r\n      if (error) throw error;\r\n\r\n      setStages(prev => prev.map(stage => \r\n        stage.id === stageId \r\n          ? { ...stage, title, settings: { ...stage.settings, color } }\r\n          : stage\r\n      ));\r\n\r\n      toast({\r\n        title: \"Est├ígio atualizado\",\r\n        description: `O est├ígio foi atualizado com sucesso.`,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to update stage:\", error);\r\n      toast({\r\n        title: \"Erro ao atualizar est├ígio\",\r\n        description: \"N├úo foi poss├¡vel atualizar o est├ígio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeStage = async (stageId: string) => {\r\n    try {\r\n      console.log(\"Removing stage:\", stageId);\r\n\r\n      const { error } = await supabase\r\n        .from('kanban_stages')\r\n        .delete()\r\n        .eq('id', stageId);\r\n\r\n      if (error) throw error;\r\n\r\n      setStages(prev => prev.filter(stage => stage.id !== stageId));\r\n\r\n      toast({\r\n        title: \"Est├ígio removido\",\r\n        description: \"O est├ígio foi removido com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to remove stage:\", error);\r\n      toast({\r\n        title: \"Erro ao remover est├ígio\",\r\n        description: \"N├úo foi poss├¡vel remover o est├ígio.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStages();\r\n  }, [fetchStages]);\r\n\r\n  return {\r\n    stages,\r\n    loading,\r\n    fetchStages,\r\n    addStage,\r\n    updateStage,\r\n    removeStage,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useMetricsFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useNormalizedKanbanStages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedContactsData.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'globalContactsCache' is never reassigned. Use 'const' instead.","line":7,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":12,"endColumn":2,"fix":{"range":[253,457],"text":"const globalContactsCache: {\r\n  data: Contact[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContactsService } from \"./useContactsService\";\r\nimport { Contact } from \"@/types/client\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\n// Global cache to avoid multiple API calls\r\nlet globalContactsCache: {\r\n  data: Contact[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\r\n\r\nexport const useOptimizedContactsData = () => {\r\n  const [contacts, setContacts] = useState<Contact[]>(globalContactsCache.data);\r\n  const [loadingContacts, setLoadingContacts] = useState(globalContactsCache.loading);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  \r\n  const { fetchAllContacts, updateContactKanbanStage } = useContactsService();\r\n\r\n  const notifyListeners = useCallback(() => {\r\n    globalContactsCache.listeners.forEach(listener => listener());\r\n  }, []);\r\n\r\n  const fetchClients = useCallback(async (forceRefresh = false) => {\r\n    const now = Date.now();\r\n    const isCacheValid = !forceRefresh && (now - globalContactsCache.lastFetch) < CACHE_DURATION;\r\n    \r\n    // If cache is valid and we have data, use it\r\n    if (isCacheValid && globalContactsCache.data.length > 0) {\r\n      setContacts(globalContactsCache.data);\r\n      setLoadingContacts(false);\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous requests\r\n    if (globalContactsCache.loading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      globalContactsCache.loading = true;\r\n      setLoadingContacts(true);\r\n      notifyListeners();\r\n      \r\n      console.log(\"Fetching contacts from Supabase (optimized)...\");\r\n      const fetchedContacts = await fetchAllContacts();\r\n      console.log(\"Fetched contacts (optimized):\", fetchedContacts.length);\r\n      \r\n      globalContactsCache.data = fetchedContacts;\r\n      globalContactsCache.lastFetch = now;\r\n      \r\n      setContacts(fetchedContacts);\r\n      notifyListeners();\r\n    } catch (error) {\r\n      console.error(\"Error fetching contacts:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar contatos\",\r\n        description: \"N├úo foi poss├¡vel carregar a lista de contatos.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      globalContactsCache.loading = false;\r\n      setLoadingContacts(false);\r\n      notifyListeners();\r\n    }\r\n  }, [fetchAllContacts, notifyListeners]);\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    await fetchClients(true);\r\n    setRefreshing(false);\r\n  };\r\n\r\n  const handleKanbanStageChange = async (contactId: string, newStageId: string) => {\r\n    try {\r\n      console.log(`[useOptimizedContactsData] Updating contact ${contactId} to stage ${newStageId}`);\r\n      \r\n      // Optimistic update in cache and local state\r\n      const updatedContacts = globalContactsCache.data.map(contact =>\r\n        contact.id === contactId\r\n          ? { ...contact, kanban_stage_id: newStageId, kanbanStage: newStageId }\r\n          : contact\r\n      );\r\n      \r\n      globalContactsCache.data = updatedContacts;\r\n      setContacts(updatedContacts);\r\n      notifyListeners();\r\n\r\n      // Update in database\r\n      await updateContactKanbanStage(contactId, newStageId);\r\n      \r\n      console.log(`[useOptimizedContactsData] Successfully updated contact ${contactId} stage`);\r\n      \r\n      toast({\r\n        title: \"Est├ígio atualizado\",\r\n        description: \"O est├ígio do contato foi atualizado com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating kanban stage:\", error);\r\n      \r\n      // Revert optimistic update on error\r\n      await fetchClients(true);\r\n      \r\n      toast({\r\n        title: \"Erro ao atualizar est├ígio\",\r\n        description: \"N├úo foi poss├¡vel atualizar o est├ígio do contato.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Subscribe to cache updates\r\n  useEffect(() => {\r\n    const updateFromCache = () => {\r\n      setContacts(globalContactsCache.data);\r\n      setLoadingContacts(globalContactsCache.loading);\r\n    };\r\n\r\n    globalContactsCache.listeners.add(updateFromCache);\r\n    \r\n    // Initial fetch if cache is empty or expired\r\n    if (globalContactsCache.data.length === 0 || \r\n        (Date.now() - globalContactsCache.lastFetch) > CACHE_DURATION) {\r\n      fetchClients();\r\n    }\r\n\r\n    return () => {\r\n      globalContactsCache.listeners.delete(updateFromCache);\r\n    };\r\n  }, [fetchClients]);\r\n\r\n  return {\r\n    contacts,\r\n    setContacts,\r\n    loadingContacts,\r\n    refreshing,\r\n    fetchClients,\r\n    handleKanbanStageChange,\r\n    handleRefresh,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedHosts.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'globalHostsCache' is never reassigned. Use 'const' instead.","line":10,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":15,"endColumn":2,"fix":{"range":[384,582],"text":"const globalHostsCache: {\r\n  data: Host[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Database } from '@/integrations/supabase/types';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\ntype Host = Database['public']['Tables']['employees']['Row'];\r\n\r\n// Global cache to avoid multiple API calls\r\nlet globalHostsCache: {\r\n  data: Host[];\r\n  loading: boolean;\r\n  lastFetch: number;\r\n  listeners: Set<() => void>;\r\n} = {\r\n  data: [],\r\n  loading: false,\r\n  lastFetch: 0,\r\n  listeners: new Set()\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\r\n\r\nexport const useOptimizedHosts = () => {\r\n  const { user } = useAuth();\r\n  const [hosts, setHosts] = useState<Host[]>(globalHostsCache.data);\r\n  const [loading, setLoading] = useState(globalHostsCache.loading);\r\n\r\n  const notifyListeners = useCallback(() => {\r\n    globalHostsCache.listeners.forEach(listener => listener());\r\n  }, []);\r\n\r\n  const fetchHosts = useCallback(async (forceRefresh = false) => {\r\n    if (!user) return;\r\n\r\n    const now = Date.now();\r\n    const isCacheValid = !forceRefresh && (now - globalHostsCache.lastFetch) < CACHE_DURATION;\r\n    \r\n    // If cache is valid and we have data, use it\r\n    if (isCacheValid && globalHostsCache.data.length > 0) {\r\n      setHosts(globalHostsCache.data);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous requests\r\n    if (globalHostsCache.loading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      globalHostsCache.loading = true;\r\n      setLoading(true);\r\n      notifyListeners();\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .order(\"name\", { ascending: true });\r\n\r\n      if (error) throw error;\r\n      \r\n      const hostsData = data as Host[] || [];\r\n      globalHostsCache.data = hostsData;\r\n      globalHostsCache.lastFetch = now;\r\n      \r\n      setHosts(hostsData);\r\n      notifyListeners();\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar anfitri├Áes:\", error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"N├úo foi poss├¡vel carregar os anfitri├Áes.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      globalHostsCache.loading = false;\r\n      setLoading(false);\r\n      notifyListeners();\r\n    }\r\n  }, [user, notifyListeners]);\r\n\r\n  // Subscribe to cache updates\r\n  useEffect(() => {\r\n    const updateFromCache = () => {\r\n      setHosts(globalHostsCache.data);\r\n      setLoading(globalHostsCache.loading);\r\n    };\r\n\r\n    globalHostsCache.listeners.add(updateFromCache);\r\n    \r\n    // Initial fetch if cache is empty or expired or user changed\r\n    if (user && (globalHostsCache.data.length === 0 || \r\n        (Date.now() - globalHostsCache.lastFetch) > CACHE_DURATION)) {\r\n      fetchHosts();\r\n    }\r\n\r\n    return () => {\r\n      globalHostsCache.listeners.delete(updateFromCache);\r\n    };\r\n  }, [user, fetchHosts]);\r\n\r\n  return {\r\n    hosts,\r\n    loading,\r\n    refetch: () => fetchHosts(true),\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useOptimizedRealtime.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1128,1131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1128,1131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { queryKeys, cacheUtils } from '@/lib/queryClient';\r\nimport { useDebouncedCallback } from '@/hooks/useDebouncedCallback';\r\n\r\ninterface RealtimeConfig {\r\n  enableClientUpdates?: boolean;\r\n  enableMetricsUpdates?: boolean;\r\n  enableConversationUpdates?: boolean;\r\n  debounceMs?: number;\r\n  pollingInterval?: number;\r\n}\r\n\r\n/**\r\n * Hook otimizado para atualiza├º├Áes em tempo real\r\n * \r\n * Features:\r\n * - Debounce de updates para evitar spam\r\n * - Subscriptions condicionais por tipo de dados\r\n * - Invalida├º├úo inteligente de cache\r\n * - Cleanup autom├ítico\r\n * - Polling de fallback configur├ível\r\n */\r\nexport const useOptimizedRealtime = (config: RealtimeConfig = {}) => {\r\n  const {\r\n    enableClientUpdates = true,\r\n    enableMetricsUpdates = true,\r\n    enableConversationUpdates = true,\r\n    debounceMs = 1000,\r\n    pollingInterval = 30000, // 30 segundos\r\n  } = config;\r\n\r\n  const queryClient = useQueryClient();\r\n  const subscriptionsRef = useRef<any[]>([]);\r\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Debounced invalidation functions\r\n  const debouncedInvalidateContacts = useDebouncedCallback(() => {\r\n    cacheUtils.invalidateContacts();\r\n    console.log('­ƒöä Contacts cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  const debouncedInvalidateMetrics = useDebouncedCallback(() => {\r\n    cacheUtils.invalidateMetrics();\r\n    console.log('­ƒôè Metrics cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  const debouncedInvalidateConversations = useDebouncedCallback(() => {\r\n    queryClient.invalidateQueries({ queryKey: queryKeys.conversations.all });\r\n    console.log('­ƒÆ¼ Conversations cache invalidated (debounced)');\r\n  }, debounceMs);\r\n\r\n  // Setup client updates subscription\r\n  const setupClientUpdates = useCallback(() => {\r\n    if (!enableClientUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('contacts_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'contacts' \r\n        }, \r\n        (payload) => {\r\n          console.log('­ƒæñ Contact change detected:', payload.eventType);\r\n          debouncedInvalidateContacts();\r\n          \r\n          // Otimiza├º├úo: invalidar m├®tricas apenas se for relevante\r\n          if (payload.eventType === 'INSERT' || payload.eventType === 'DELETE') {\r\n            debouncedInvalidateMetrics();\r\n          }\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('­ƒæñ Contacts subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableClientUpdates, debouncedInvalidateContacts, debouncedInvalidateMetrics]);\r\n\r\n  // Setup metrics updates subscription\r\n  const setupMetricsUpdates = useCallback(() => {\r\n    if (!enableMetricsUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('metrics_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'conversation_metrics' \r\n        }, \r\n        (payload) => {\r\n          console.log('­ƒôè Metrics change detected:', payload.eventType);\r\n          debouncedInvalidateMetrics();\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('­ƒôè Metrics subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableMetricsUpdates, debouncedInvalidateMetrics]);\r\n\r\n  // Setup conversations subscription\r\n  const setupConversationUpdates = useCallback(() => {\r\n    if (!enableConversationUpdates) return null;\r\n\r\n    const subscription = supabase\r\n      .channel('conversations_realtime')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'conversations' \r\n        }, \r\n        (payload) => {\r\n          console.log('­ƒÆ¼ Conversation change detected:', payload.eventType);\r\n          debouncedInvalidateConversations();\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        console.log('­ƒÆ¼ Conversations subscription status:', status);\r\n      });\r\n\r\n    return subscription;\r\n  }, [enableConversationUpdates, debouncedInvalidateConversations]);\r\n\r\n  // Polling de fallback para garantir sincroniza├º├úo\r\n  const setupPolling = useCallback(() => {\r\n    if (pollingInterval <= 0) return;\r\n\r\n    pollingRef.current = setInterval(() => {\r\n      console.log('­ƒöä Fallback polling - refreshing critical data');\r\n      \r\n      // Invalidar apenas dados cr├¡ticos em tempo real\r\n      queryClient.invalidateQueries({ \r\n        queryKey: queryKeys.clientStats.latest,\r\n        exact: true \r\n      });\r\n      \r\n      queryClient.invalidateQueries({ \r\n        queryKey: queryKeys.realtimeMetrics,\r\n        exact: true \r\n      });\r\n    }, pollingInterval);\r\n  }, [pollingInterval, queryClient]);\r\n\r\n  // Cleanup function\r\n  const cleanup = useCallback(() => {\r\n    console.log('­ƒº╣ Cleaning up realtime subscriptions');\r\n    \r\n    // Unsubscribe all active subscriptions\r\n    subscriptionsRef.current.forEach(subscription => {\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      }\r\n    });\r\n    subscriptionsRef.current = [];\r\n\r\n    // Clear polling\r\n    if (pollingRef.current) {\r\n      clearInterval(pollingRef.current);\r\n      pollingRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Setup all subscriptions\r\n  useEffect(() => {\r\n    console.log('­ƒÜÇ Setting up optimized realtime subscriptions');\r\n    \r\n    const subscriptions = [\r\n      setupClientUpdates(),\r\n      setupMetricsUpdates(),\r\n      setupConversationUpdates(),\r\n    ].filter(Boolean);\r\n\r\n    subscriptionsRef.current = subscriptions;\r\n\r\n    // Setup polling\r\n    setupPolling();\r\n\r\n    // Cleanup on unmount\r\n    return cleanup;\r\n  }, [\r\n    setupClientUpdates,\r\n    setupMetricsUpdates,\r\n    setupConversationUpdates,\r\n    setupPolling,\r\n    cleanup\r\n  ]);\r\n\r\n  // Manual refresh functions\r\n  const manualRefresh = useCallback(() => {\r\n    console.log('­ƒöä Manual refresh triggered');\r\n    cacheUtils.invalidateMetrics();\r\n    cacheUtils.invalidateContacts();\r\n    cacheUtils.invalidateRealtime();\r\n  }, []);\r\n\r\n  const refreshSpecific = useCallback((type: 'contacts' | 'metrics' | 'conversations') => {\r\n    console.log(`­ƒöä Manual refresh for ${type}`);\r\n    \r\n    switch (type) {\r\n      case 'contacts':\r\n        cacheUtils.invalidateContacts();\r\n        break;\r\n      case 'metrics':\r\n        cacheUtils.invalidateMetrics();\r\n        break;\r\n      case 'conversations':\r\n        queryClient.invalidateQueries({ queryKey: queryKeys.conversations.all });\r\n        break;\r\n    }\r\n  }, [queryClient]);\r\n\r\n  return {\r\n    manualRefresh,\r\n    refreshSpecific,\r\n    cleanup,\r\n    isEnabled: {\r\n      clients: enableClientUpdates,\r\n      metrics: enableMetricsUpdates,\r\n      conversations: enableConversationUpdates,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Hook simplificado para uso comum\r\n */\r\nexport const useBasicRealtime = () => {\r\n  return useOptimizedRealtime({\r\n    enableClientUpdates: true,\r\n    enableMetricsUpdates: true,\r\n    enableConversationUpdates: false, // Desabilitado por padr├úo para economizar recursos\r\n    debounceMs: 2000, // Debounce maior para uso b├ísico\r\n    pollingInterval: 60000, // 1 minuto\r\n  });\r\n};\r\n\r\n/**\r\n * Hook para dashboard com alta frequ├¬ncia de updates\r\n */\r\nexport const useDashboardRealtime = () => {\r\n  return useOptimizedRealtime({\r\n    enableClientUpdates: true,\r\n    enableMetricsUpdates: true,\r\n    enableConversationUpdates: false,\r\n    debounceMs: 500, // Resposta mais r├ípida\r\n    pollingInterval: 30000, // 30 segundos\r\n  });\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePaymentMethodOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePersonalityTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePricingQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\usePricingQueryOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useProducts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useProductsOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useRealTimeMetrics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\ninterface RealtimeMetricsUpdate {\r\n  type: 'contact_added' | 'conversation_updated' | 'metrics_updated';\r\n  data: any;\r\n  timestamp: string;\r\n}\r\n\r\nexport const useRealTimeMetrics = () => {\r\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\r\n  const [updateCount, setUpdateCount] = useState(0);\r\n  const queryClient = useQueryClient();\r\n\r\n  useEffect(() => {\r\n    // Canal para atualiza├º├Áes de contatos\r\n    const contactsChannel = supabase\r\n      .channel('contacts-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*', // INSERT, UPDATE, DELETE\r\n          schema: 'public',\r\n          table: 'contacts'\r\n        },\r\n        (payload) => {\r\n          console.log('­ƒöä Atualiza├º├úo de contato:', payload);\r\n          \r\n          // Invalidar queries relacionadas a contatos\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['consolidated-metrics'],\r\n            exact: false \r\n          });\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['time-series-data'],\r\n            exact: false \r\n          });\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['leads-by-source'],\r\n            exact: false \r\n          });\r\n          \r\n          setLastUpdate(new Date());\r\n          setUpdateCount(prev => prev + 1);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Canal para atualiza├º├Áes de conversas\r\n    const conversationsChannel = supabase\r\n      .channel('conversations-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'conversations'\r\n        },\r\n        (payload) => {\r\n          console.log('­ƒÆ¼ Atualiza├º├úo de conversa:', payload);\r\n          \r\n          // Invalidar queries relacionadas a conversas\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['consolidated-metrics'],\r\n            exact: false \r\n          });\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['time-series-data'],\r\n            exact: false \r\n          });\r\n          \r\n          setLastUpdate(new Date());\r\n          setUpdateCount(prev => prev + 1);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Canal para atualiza├º├Áes de m├®tricas\r\n    const metricsChannel = supabase\r\n      .channel('metrics-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'conversation_metrics'\r\n        },\r\n        (payload) => {\r\n          console.log('­ƒôè Atualiza├º├úo de m├®trica:', payload);\r\n          \r\n          // Invalidar todas as queries de m├®tricas\r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['consolidated-metrics'],\r\n            exact: false \r\n          });\r\n          \r\n          setLastUpdate(new Date());\r\n          setUpdateCount(prev => prev + 1);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Canal para dados UTM\r\n    const utmChannel = supabase\r\n      .channel('utm-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'utm_tracking'\r\n        },\r\n        (payload) => {\r\n          console.log('­ƒÄ» Atualiza├º├úo UTM:', payload);\r\n          \r\n          queryClient.invalidateQueries({ \r\n            queryKey: ['leads-by-source'],\r\n            exact: false \r\n          });\r\n          \r\n          setLastUpdate(new Date());\r\n          setUpdateCount(prev => prev + 1);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Cleanup na desmontagem\r\n    return () => {\r\n      supabase.removeChannel(contactsChannel);\r\n      supabase.removeChannel(conversationsChannel);\r\n      supabase.removeChannel(metricsChannel);\r\n      supabase.removeChannel(utmChannel);\r\n    };\r\n  }, [queryClient]);\r\n\r\n  // Fun├º├úo para for├ºar atualiza├º├úo manual\r\n  const forceRefresh = () => {\r\n    queryClient.invalidateQueries({ \r\n      queryKey: ['consolidated-metrics'],\r\n      exact: false \r\n    });\r\n    queryClient.invalidateQueries({ \r\n      queryKey: ['time-series-data'],\r\n      exact: false \r\n    });\r\n    queryClient.invalidateQueries({ \r\n      queryKey: ['leads-by-source'],\r\n      exact: false \r\n    });\r\n    \r\n    setLastUpdate(new Date());\r\n    setUpdateCount(prev => prev + 1);\r\n  };\r\n\r\n  return {\r\n    lastUpdate,\r\n    updateCount,\r\n    forceRefresh,\r\n    isConnected: true, // Simplificado - em produ├º├úo voc├¬ pode verificar o status da conex├úo\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useRealtimeUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleDialogs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Appointment } from \"@/types/calendar\";\nimport { CalendarEvent } from \"@/hooks/useCalendarEvents\";\n\nexport function useScheduleDialogs() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [currentAppointment, setCurrentAppointment] = useState<Appointment | null>(null);\n\n  const [isAddEventDialogOpen, setIsAddEventDialogOpen] = useState(false);\n  const [isEditEventDialogOpen, setIsEditEventDialogOpen] = useState(false);\n  const [isDeleteEventDialogOpen, setIsDeleteEventDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n\n  const handleEditClick = (appointment: Appointment, setFormData: any) => {\n    setCurrentAppointment(appointment);\n    setFormData({\n      petName: appointment.petName,\n      ownerName: appointment.ownerName,\n      phone: appointment.phone,\n      date: appointment.date,\n      service: appointment.service,\n      status: appointment.status,\n      notes: appointment.notes,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteClick = (appointment: Appointment) => {\n    setCurrentAppointment(appointment);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = (appointments: Appointment[], setAppointments: any) => {\n    if (currentAppointment) {\n      setAppointments(\n        appointments.filter((app) => app.id !== currentAppointment.id),\n      );\n      setIsDeleteDialogOpen(false);\n      setCurrentAppointment(null);\n    }\n  };\n\n  return {\n    isAddDialogOpen,\n    setIsAddDialogOpen,\n    isEditDialogOpen,\n    setIsEditDialogOpen,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    currentAppointment,\n    isAddEventDialogOpen,\n    setIsAddEventDialogOpen,\n    isEditEventDialogOpen,\n    setIsEditEventDialogOpen,\n    isDeleteEventDialogOpen,\n    setIsDeleteEventDialogOpen,\n    selectedEvent,\n    setSelectedEvent,\n    handleEditClick,\n    handleDeleteClick,\n    confirmDelete,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useScheduleState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSemanticMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[550,553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[550,553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1044,1047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1044,1047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1100,1103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1100,1103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1166,1169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1166,1169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1561,1564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1561,1564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1771,1774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1771,1774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1953,1956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1953,1956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1967,1970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1967,1970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseSemanticMemoryOptions {\r\n  sessionId: string;\r\n  useCache?: boolean;\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface UseSemanticMemoryResult {\r\n  memories: any[];\r\n  entities: any[];\r\n  relationships: any[];\r\n  loading: boolean;\r\n  error: Error | null;\r\n  refresh: () => Promise<void>;\r\n  searchBySimilarity: (query: string, limit?: number) => Promise<any[]>;\r\n  searchByEntity: (entityName: string) => Promise<any[]>;\r\n  storeMemory: (memory: any) => Promise<any>;\r\n  updateImportance: (memoryId: number, importance: number) => Promise<boolean>;\r\n  clearCache: (pattern?: string) => void;\r\n}\r\n\r\n/**\r\n * Hook para gerenciar mem├│ria sem├óntica - Simplificado durante unifica├º├úo\r\n */\r\nexport function useSemanticMemory({\r\n  sessionId,\r\n  useCache = true,\r\n  autoRefresh = false,\r\n  refreshInterval = 30000,\r\n}: UseSemanticMemoryOptions): UseSemanticMemoryResult {\r\n  const [memories, setMemories] = useState<any[]>([]);\r\n  const [entities, setEntities] = useState<any[]>([]);\r\n  const [relationships, setRelationships] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const loadSemanticData = useCallback(async () => {\r\n    logger.info('useSemanticMemory: Funcionalidade desabilitada durante unifica├º├úo');\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const searchBySimilarity = useCallback(async (query: string, limit = 10): Promise<any[]> => {\r\n    logger.info('useSemanticMemory: Busca por similaridade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  }, []);\r\n\r\n  const searchByEntity = useCallback(async (entityName: string): Promise<any[]> => {\r\n    logger.info('useSemanticMemory: Busca por entidade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  }, []);\r\n\r\n  const storeMemory = useCallback(async (memory: any): Promise<any> => {\r\n    logger.info('useSemanticMemory: Armazenamento de mem├│ria desabilitado durante unifica├º├úo');\r\n    return null;\r\n  }, []);\r\n\r\n  const updateImportance = useCallback(async (memoryId: number, importance: number): Promise<boolean> => {\r\n    logger.info('useSemanticMemory: Atualiza├º├úo de import├óncia desabilitada durante unifica├º├úo');\r\n    return false;\r\n  }, []);\r\n\r\n  const clearCache = useCallback((pattern?: string): void => {\r\n    logger.info('useSemanticMemory: Limpeza de cache desabilitada durante unifica├º├úo');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadSemanticData();\r\n  }, [loadSemanticData]);\r\n\r\n  return {\r\n    memories,\r\n    entities,\r\n    relationships,\r\n    loading,\r\n    error,\r\n    refresh: loadSemanticData,\r\n    searchBySimilarity,\r\n    searchByEntity,\r\n    storeMemory,\r\n    updateImportance,\r\n    clearCache,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscription.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'loadInvoices', 'loadPaymentMethods', 'loadSubscription', 'toast', and 'user'. Either include them or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadInvoices, loadPaymentMethods, loadSubscription, toast, user]","fix":{"range":[2176,2186],"text":"[loadInvoices, loadPaymentMethods, loadSubscription, toast, user]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'subscription'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [subscription, availablePlans]","fix":{"range":[2886,2924],"text":"[subscription, availablePlans]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSubscription'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSubscription, user]","fix":{"range":[3008,3014],"text":"[fetchSubscription, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport {\r\n  UserSubscription,\r\n  PricingPlan,\r\n  PaymentMethod,\r\n  Invoice,\r\n} from \"@/types/pricing\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\nimport { useSubscriptionLocalStorage } from \"./useSubscriptionLocalStorage\";\r\nimport { useSubscriptionActions } from \"./useSubscriptionActions\";\r\nimport { usePaymentMethodOperations } from \"./usePaymentMethodOperations\";\r\n\r\nexport function useSubscription() {\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n  const [subscription, setSubscription] = useState<UserSubscription | null>(\r\n    null,\r\n  );\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const availablePlans =\r\n    supabasePlans && supabasePlans.length > 0 ? supabasePlans : [];\r\n\r\n  const {\r\n    saveSubscription,\r\n    loadSubscription,\r\n    savePaymentMethods,\r\n    loadPaymentMethods,\r\n    saveInvoices,\r\n    loadInvoices,\r\n  } = useSubscriptionLocalStorage();\r\n\r\n  const fetchSubscription = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const storedSubscription = loadSubscription();\r\n      const storedPaymentMethods = loadPaymentMethods();\r\n      const storedInvoices = loadInvoices();\r\n\r\n      if (storedSubscription) {\r\n        setSubscription(storedSubscription);\r\n        setPaymentMethods(storedPaymentMethods);\r\n        setInvoices(storedInvoices);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setSubscription(null);\r\n      setPaymentMethods([]);\r\n      setInvoices([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching subscription:\", error);\r\n      toast({\r\n        title: \"Erro ao carregar assinatura\",\r\n        description: \"N├úo foi poss├¡vel carregar os dados da sua assinatura.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  const { processingPayment, subscribeToPlan, cancelSubscription, changePlan } =\r\n    useSubscriptionActions({\r\n      subscription,\r\n      invoices,\r\n      setSubscription,\r\n      setInvoices,\r\n      availablePlans,\r\n    });\r\n\r\n  const { addPaymentMethod, removePaymentMethod, setDefaultPaymentMethod } =\r\n    usePaymentMethodOperations({\r\n      paymentMethods,\r\n      setPaymentMethods,\r\n    });\r\n\r\n  const getCurrentPlan = useCallback((): PricingPlan | null => {\r\n    if (!subscription) return null;\r\n    const foundPlan = availablePlans.find((p) => p.id === subscription.planId);\r\n    return foundPlan\r\n      ? { ...foundPlan, description: foundPlan.description || \"\" }\r\n      : null;\r\n  }, [subscription?.planId, availablePlans]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchSubscription();\r\n    }\r\n  }, [user]);\r\n\r\n  return {\r\n    subscription,\r\n    paymentMethods,\r\n    invoices,\r\n    loading,\r\n    processingPayment,\r\n    subscribeToPlan,\r\n    cancelSubscription,\r\n    addPaymentMethod,\r\n    removePaymentMethod,\r\n    setDefaultPaymentMethod,\r\n    changePlan,\r\n    getCurrentPlan,\r\n    fetchSubscription,\r\n    saveSubscription,\r\n    savePaymentMethods,\r\n    saveInvoices,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSubscriptionPageData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'availablePlans' conditional could make the dependencies of useMemo Hook (at line 22) change on every render. To fix this, wrap the initialization of 'availablePlans' in its own useMemo() Hook.","line":11,"column":9,"nodeType":"VariableDeclarator","endLine":11,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from \"react\";\r\nimport { useSubscription } from \"@/hooks/useSubscription\";\r\nimport { usePricingQuery } from \"@/hooks/usePricingQuery\";\r\nimport { calculateDaysLeft } from \"@/utils/subscriptionUtils\";\r\nimport type { PricingPlan } from \"@/types/pricing\";\r\n\r\nexport const useSubscriptionPageData = () => {\r\n  const subscriptionData = useSubscription();\r\n  const { data: supabasePlans = [] } = usePricingQuery();\r\n\r\n  const availablePlans = supabasePlans.length > 0 ? supabasePlans : [];\r\n\r\n  const currentPlan = useMemo<PricingPlan | null>(() => {\r\n    const plan = availablePlans.find((plan) => plan.id === subscriptionData.subscription?.planId);\r\n    if (!plan) return null;\r\n    \r\n    // Ensure the plan has required description field\r\n    return {\r\n      ...plan,\r\n      description: plan.description || 'Plan description not available'\r\n    } as PricingPlan;\r\n  }, [availablePlans, subscriptionData.subscription]);\r\n\r\n  const daysLeft = useMemo(() => {\r\n    return subscriptionData.subscription\r\n      ? calculateDaysLeft(subscriptionData.subscription.currentPeriodEnd)\r\n      : 0;\r\n  }, [subscriptionData.subscription]);\r\n\r\n  return {\r\n    ...subscriptionData,\r\n    availablePlans,\r\n    currentPlan,\r\n    daysLeft,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseAIProducts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseClientStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseContacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseContactsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseConversationMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseEpisodicMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1178,1181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1178,1181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3699,3702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3699,3702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5525,5528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5525,5528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\r\nimport type { N8nChatMemory, EpisodicMemory } from '@/types/memory';\r\n\r\nexport const useSupabaseEpisodicMemory = () => {\r\n  // Since n8n_chat_memory table doesn't exist in the schema, \r\n  // we'll use the n8n_chat_messages table as a fallback\r\n  const fetchMemories = async (sessionId: string, limit = 50): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('n8n_chat_messages')\r\n        .select('*')\r\n        .eq('session_id', sessionId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) throw error;\r\n      \r\n      // Transform the data to match N8nChatMemory interface\r\n      const memories: N8nChatMemory[] = (data || []).map(msg => ({\r\n        id: msg.id,\r\n        session_id: msg.session_id,\r\n        message: msg.user_message || msg.bot_message || '',\r\n        memory_type: 'episodic' as const,\r\n        importance: 1, // Default importance\r\n        created_at: msg.created_at,\r\n        metadata: typeof msg.message_data === 'object' && msg.message_data !== null \r\n          ? msg.message_data as { [key: string]: any } \r\n          : {}\r\n      }));\r\n      \r\n      return memories;\r\n    } catch (error) {\r\n      console.error('Error fetching memories:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchTimeline = async (sessionId: string): Promise<EpisodicMemory[]> => {\r\n    try {\r\n      // Since generate_episodic_timeline function doesn't exist, \r\n      // we'll create a simplified timeline from chat messages\r\n      const { data, error } = await supabase\r\n        .from('n8n_chat_messages')\r\n        .select('*')\r\n        .eq('session_id', sessionId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n\r\n      // Transform messages into episodic memories\r\n      const timeline: EpisodicMemory[] = (data || []).map((msg, index) => ({\r\n        id: Number(msg.id),\r\n        session_id: msg.session_id,\r\n        event: msg.user_message ? 'user_message' : 'bot_message',\r\n        content: msg.user_message || msg.bot_message || '',\r\n        timestamp: msg.created_at || new Date().toISOString(),\r\n        importance: 1,\r\n        date: msg.created_at || new Date().toISOString(),\r\n        description: msg.user_message ? 'User message' : 'Bot response',\r\n        context: {\r\n          message_type: msg.message_type,\r\n          phone: msg.phone,\r\n          ...(typeof msg.message_data === 'object' && msg.message_data !== null ? msg.message_data : {})\r\n        }\r\n      }));\r\n\r\n      return timeline;\r\n    } catch (error) {\r\n      console.error('Error fetching timeline:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchMemoriesByPeriod = async (\r\n    sessionId: string,\r\n    startDate: string,\r\n    endDate: string,\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('n8n_chat_messages')\r\n        .select('*')\r\n        .eq('session_id', sessionId)\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      \r\n      // Transform the data to match N8nChatMemory interface\r\n      const memories: N8nChatMemory[] = (data || []).map(msg => ({\r\n        id: msg.id,\r\n        session_id: msg.session_id,\r\n        message: msg.user_message || msg.bot_message || '',\r\n        memory_type: 'episodic' as const,\r\n        importance: 1, // Default importance\r\n        created_at: msg.created_at,\r\n        metadata: typeof msg.message_data === 'object' && msg.message_data !== null \r\n          ? msg.message_data as { [key: string]: any } \r\n          : {}\r\n      }));\r\n      \r\n      return memories;\r\n    } catch (error) {\r\n      console.error('Error fetching memories by period:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const updateImportance = async (memoryId: number, importance: number): Promise<boolean> => {\r\n    try {\r\n      // Since n8n_chat_memory doesn't exist and n8n_chat_messages doesn't have importance field,\r\n      // we'll just return true for now\r\n      console.log(`Would update importance for memory ${memoryId} to ${importance}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating importance:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const storeMemory = async (memory: Partial<N8nChatMemory>): Promise<N8nChatMemory | null> => {\r\n    try {\r\n      // Store as a chat message since n8n_chat_memory table doesn't exist\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n\r\n      const { data, error } = await supabase\r\n        .from('n8n_chat_messages')\r\n        .insert({\r\n          session_id: memory.session_id,\r\n          user_id: user.id,\r\n          user_message: memory.message,\r\n          message_type: 'text',\r\n          message_data: memory.metadata || {},\r\n          active: true\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      // Transform back to N8nChatMemory format\r\n      const storedMemory: N8nChatMemory = {\r\n        id: data.id,\r\n        session_id: data.session_id,\r\n        message: data.user_message || '',\r\n        memory_type: 'episodic' as const,\r\n        importance: 1,\r\n        created_at: data.created_at,\r\n        metadata: typeof data.message_data === 'object' && data.message_data !== null \r\n          ? data.message_data as { [key: string]: any } \r\n          : {}\r\n      };\r\n\r\n      return storedMemory;\r\n    } catch (error) {\r\n      console.error('Error storing memory:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return { fetchMemories, fetchTimeline, fetchMemoriesByPeriod, updateImportance, storeMemory };\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseFunnelData.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":42,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":17,"fix":{"range":[1540,1768],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":42,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":24,"fix":{"range":[1540,1768],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":72,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":72,"endColumn":17,"fix":{"range":[2452,2552],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":72,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":72,"endColumn":24,"fix":{"range":[2452,2552],"text":"const { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":132,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":132,"endColumn":15,"fix":{"range":[4080,4298],"text":"const { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });"}},{"ruleId":"prefer-const","severity":2,"message":"'error' is never reassigned. Use 'const' instead.","line":132,"column":17,"nodeType":"Identifier","messageId":"useConst","endLine":132,"endColumn":22,"fix":{"range":[4080,4298],"text":"const { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { supabase } from '../integrations/supabase/client';\r\nimport type { Database } from '../integrations/supabase/types';\r\n\r\ntype FunnelData = Database['public']['Tables']['funnel_data']['Row'];\r\n\r\nexport const useSupabaseFunnelData = () => {\r\n  const [funnelData, setFunnelData] = useState<FunnelData[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch raw funnel data optionally filtered by date range\r\n  const getFunnelData = async (start?: string, end?: string) => {\r\n    let query = supabase.from('funnel_data').select('*');\r\n    if (start) query = query.gte('created_at', start);\r\n    if (end) query = query.lte('created_at', end);\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    if (error) throw error;\r\n    return data || [];\r\n  };\r\n\r\n  const fetchFunnelData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('funnel_data')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setFunnelData(data || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Erro ao carregar dados do funil');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getFunnelByDateRange = async (startDate: string, endDate: string) => {\r\n    try {\r\n      // Try conversion_funnel_view first, fallback to funnel_data\r\n      let { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        // Fallback to funnel_data table\r\n        const fallback = await supabase\r\n          .from('funnel_data')\r\n          .select('*')\r\n          .gte('created_at', startDate)\r\n          .lte('created_at', endDate)\r\n          .order('created_at', { ascending: false });\r\n        \r\n        if (fallback.error) throw fallback.error;\r\n        return fallback.data || [];\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      console.error('Erro ao buscar funil por per├¡odo:', err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getFunnelSummary = async () => {\r\n    try {\r\n      // Try conversion_funnel_view first, fallback to funnel_data\r\n      let { data, error } = await supabase\r\n        .from('conversion_funnel_view')\r\n        .select('*');\r\n\r\n      if (error) {\r\n        // Fallback to funnel_data table\r\n        const fallback = await supabase\r\n          .from('funnel_data')\r\n          .select('*');\r\n        \r\n        if (fallback.error) throw fallback.error;\r\n        return fallback.data || [];\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      console.error('Erro ao buscar resumo do funil:', err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const addFunnelData = async (item: Omit<FunnelData, 'id' | 'created_at'>) => {\r\n    const { data, error } = await supabase\r\n      .from('funnel_data')\r\n      .insert(item)\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    return data as FunnelData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFunnelData();\r\n  }, []);\r\n\r\n  return {\r\n    funnelData,\r\n    loading,\r\n    error,\r\n    refetch: fetchFunnelData,\r\n    getFunnelData,\r\n    getFunnelByDateRange,\r\n    getFunnelSummary,\r\n    addFunnelData\r\n  };\r\n};\r\n\r\n// Individual functions are already available through the hook\r\n// Export them directly for backwards compatibility\r\nconst getFunnelDataCompat = async (start?: string, end?: string) => {\r\n  let query = supabase.from('funnel_data').select('*');\r\n  if (start) query = query.gte('created_at', start);\r\n  if (end) query = query.lte('created_at', end);\r\n  const { data, error } = await query.order('created_at', { ascending: false });\r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\nconst getFunnelByDateRangeCompat = async (startDate: string, endDate: string) => {\r\n  try {\r\n    let { data, error } = await supabase\r\n      .from('conversion_funnel_view')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      const fallback = await supabase\r\n        .from('funnel_data')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (fallback.error) throw fallback.error;\r\n      return fallback.data || [];\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (err) {\r\n    console.error('Erro ao buscar funil por per├¡odo:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst addFunnelDataCompat = async (item: Omit<FunnelData, 'id' | 'created_at'>) => {\r\n  const { data, error } = await supabase\r\n    .from('funnel_data')\r\n    .insert(item)\r\n    .select()\r\n    .single();\r\n  if (error) throw error;\r\n  return data as FunnelData;\r\n};\r\n\r\nexport { getFunnelDataCompat as getFunnelData, getFunnelByDateRangeCompat as getFunnelByDateRange, addFunnelDataCompat as addFunnelData };","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabasePricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseSchedule.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useSupabaseUTMMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useThemeSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useTransformedMetricsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUTMMetricsQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUTMTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUnifiedClientInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUserProfile.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfile, user]","fix":{"range":[752,758],"text":"[fetchProfile, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  email: string;\r\n  full_name: string;\r\n  role: string;\r\n  department?: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport function useUserProfile() {\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [updating, setUpdating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchProfile();\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchProfile = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') {\r\n        throw error;\r\n      }\r\n\r\n      if (data) {\r\n        setProfile(data);\r\n      } else {\r\n        // Create a default profile if none exists\r\n        await createProfile();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"N├úo foi poss├¡vel carregar o perfil.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createProfile = async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const defaultProfile = {\r\n        id: user.id,\r\n        email: user.email || '',\r\n        full_name: user.user_metadata?.full_name || user.email || '',\r\n        role: 'user',\r\n        is_active: true,\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .insert(defaultProfile)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setProfile(data);\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updates: Partial<UserProfile>) => {\r\n    if (!user || !profile) return;\r\n\r\n    try {\r\n      setUpdating(true);\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setProfile(data);\r\n      toast({\r\n        title: \"Perfil atualizado\",\r\n        description: \"Suas informa├º├Áes foram salvas com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"N├úo foi poss├¡vel atualizar o perfil.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setUpdating(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    profile,\r\n    loading,\r\n    updating,\r\n    updateProfile,\r\n    refetchProfile: fetchProfile,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useUsers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useValidatedData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[450,453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[450,453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2401,2404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2401,2404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2430,2433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2430,2433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3841,3844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3841,3844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3893,3896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3893,3896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5370,5373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5370,5373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5391,5394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5391,5394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\r\n\r\n// Interfaces para valida├º├úo\r\nexport interface DataValidationResult<T> {\r\n  data: T;\r\n  isValid: boolean;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\nexport interface DataQualityScore {\r\n  score: number; // 0-100\r\n  completeness: number; // 0-100\r\n  accuracy: number; // 0-100\r\n  freshness: number; // 0-100\r\n}\r\n\r\n// Fun├º├úo para validar m├®tricas\r\nconst validateMetrics = (metrics: any): DataValidationResult<any> => {\r\n  const errors: string[] = [];\r\n  const warnings: string[] = [];\r\n\r\n  // Valida├º├Áes b├ísicas\r\n  if (metrics.totalLeads < 0) {\r\n    errors.push('Total de leads n├úo pode ser negativo');\r\n  }\r\n\r\n  if (metrics.responseRate < 0 || metrics.responseRate > 100) {\r\n    errors.push('Taxa de resposta deve estar entre 0% e 100%');\r\n  }\r\n\r\n  if (metrics.conversionRate < 0 || metrics.conversionRate > 100) {\r\n    errors.push('Taxa de convers├úo deve estar entre 0% e 100%');\r\n  }\r\n\r\n  if (metrics.avgResponseTime < 0) {\r\n    errors.push('Tempo m├®dio de resposta n├úo pode ser negativo');\r\n  }\r\n\r\n  // Valida├º├Áes de consist├¬ncia\r\n  if (metrics.totalRespondidas > metrics.totalConversations) {\r\n    errors.push('Conversas respondidas n├úo pode ser maior que total de conversas');\r\n  }\r\n\r\n  if (metrics.conversasNaoRespondidas + metrics.totalRespondidas !== metrics.totalConversations) {\r\n    warnings.push('Soma de conversas respondidas e n├úo respondidas n├úo confere com o total');\r\n  }\r\n\r\n  // Valida├º├Áes de plausibilidade\r\n  if (metrics.responseRate > 95) {\r\n    warnings.push('Taxa de resposta muito alta (>95%) - verificar dados');\r\n  }\r\n\r\n  if (metrics.conversionRate > 50) {\r\n    warnings.push('Taxa de convers├úo muito alta (>50%) - verificar dados');\r\n  }\r\n\r\n  if (metrics.avgResponseTime > 24) {\r\n    warnings.push('Tempo m├®dio de resposta muito alto (>24h) - verificar dados');\r\n  }\r\n\r\n  // Verificar dados faltantes\r\n  const requiredFields = [\r\n    'totalLeads', 'totalConversations', 'responseRate', \r\n    'conversionRate', 'avgResponseTime', 'ticketMedio'\r\n  ];\r\n  \r\n  for (const field of requiredFields) {\r\n    if (metrics[field] === undefined || metrics[field] === null) {\r\n      warnings.push(`Campo obrigat├│rio faltando: ${field}`);\r\n    }\r\n  }\r\n\r\n  return {\r\n    data: metrics,\r\n    isValid: errors.length === 0,\r\n    errors,\r\n    warnings,\r\n  };\r\n};\r\n\r\n// Fun├º├úo para validar dados de s├®rie temporal\r\nconst validateTimeSeriesData = (data: any[]): DataValidationResult<any[]> => {\r\n  const errors: string[] = [];\r\n  const warnings: string[] = [];\r\n\r\n  if (!Array.isArray(data)) {\r\n    errors.push('Dados de s├®rie temporal devem ser um array');\r\n    return { data: [], isValid: false, errors, warnings };\r\n  }\r\n\r\n  if (data.length === 0) {\r\n    warnings.push('Nenhum dado de s├®rie temporal encontrado');\r\n  }\r\n\r\n  // Validar cada ponto de dados\r\n  data.forEach((point, index) => {\r\n    if (!point.date) {\r\n      errors.push(`Data faltando no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.leads < 0) {\r\n      errors.push(`Leads negativos no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.converted > point.leads) {\r\n      warnings.push(`Convers├Áes maiores que leads no ponto ${index + 1}`);\r\n    }\r\n\r\n    if (point.respondidas + point.naoRespondidas !== point.iniciadas) {\r\n      warnings.push(`Inconsist├¬ncia nas conversas no ponto ${index + 1}`);\r\n    }\r\n  });\r\n\r\n  // Verificar ordena├º├úo por data\r\n  for (let i = 1; i < data.length; i++) {\r\n    const prevDate = new Date(data[i - 1].date);\r\n    const currDate = new Date(data[i].date);\r\n    \r\n    if (currDate < prevDate) {\r\n      warnings.push('Dados n├úo est├úo ordenados por data');\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    data,\r\n    isValid: errors.length === 0,\r\n    errors,\r\n    warnings,\r\n  };\r\n};\r\n\r\n// Fun├º├úo para calcular qualidade dos dados\r\nconst calculateDataQuality = (\r\n  metricsValidation: DataValidationResult<any>,\r\n  timeSeriesValidation: DataValidationResult<any[]>,\r\n  lastUpdate?: string\r\n): DataQualityScore => {\r\n  // Completeness: baseado na presen├ºa de campos obrigat├│rios\r\n  const totalFields = 10; // n├║mero de campos esperados\r\n  const missingFields = metricsValidation.warnings.filter(w => \r\n    w.includes('Campo obrigat├│rio faltando')\r\n  ).length;\r\n  const completeness = Math.max(0, (totalFields - missingFields) / totalFields * 100);\r\n\r\n  // Accuracy: baseado no n├║mero de erros e warnings\r\n  const totalIssues = metricsValidation.errors.length + \r\n                     metricsValidation.warnings.length + \r\n                     timeSeriesValidation.errors.length + \r\n                     timeSeriesValidation.warnings.length;\r\n  const accuracy = Math.max(0, 100 - (totalIssues * 10));\r\n\r\n  // Freshness: baseado na ├║ltima atualiza├º├úo\r\n  let freshness = 100;\r\n  if (lastUpdate) {\r\n    const updateTime = new Date(lastUpdate);\r\n    const now = new Date();\r\n    const diffMinutes = (now.getTime() - updateTime.getTime()) / (1000 * 60);\r\n    \r\n    if (diffMinutes > 60) {\r\n      freshness = Math.max(0, 100 - ((diffMinutes - 60) / 60 * 10));\r\n    }\r\n  }\r\n\r\n  // Score geral (m├®dia ponderada)\r\n  const score = Math.round(\r\n    (completeness * 0.4) + \r\n    (accuracy * 0.4) + \r\n    (freshness * 0.2)\r\n  );\r\n\r\n  return {\r\n    score,\r\n    completeness: Math.round(completeness),\r\n    accuracy: Math.round(accuracy),\r\n    freshness: Math.round(freshness),\r\n  };\r\n};\r\n\r\n// Hook principal\r\nexport const useValidatedData = (metrics: any, timeSeriesData: any[], lastUpdate?: string) => {\r\n  return useMemo(() => {\r\n    // Validar m├®tricas\r\n    const metricsValidation = validateMetrics(metrics || {});\r\n    \r\n    // Validar dados de s├®rie temporal\r\n    const timeSeriesValidation = validateTimeSeriesData(timeSeriesData || []);\r\n    \r\n    // Calcular qualidade dos dados\r\n    const dataQuality = calculateDataQuality(\r\n      metricsValidation, \r\n      timeSeriesValidation, \r\n      lastUpdate\r\n    );\r\n    \r\n    // Consolidar todos os erros e warnings\r\n    const allErrors = [\r\n      ...metricsValidation.errors,\r\n      ...timeSeriesValidation.errors,\r\n    ];\r\n    \r\n    const allWarnings = [\r\n      ...metricsValidation.warnings,\r\n      ...timeSeriesValidation.warnings,\r\n    ];\r\n\r\n    return {\r\n      metrics: metricsValidation,\r\n      timeSeries: timeSeriesValidation,\r\n      dataQuality,\r\n      allErrors,\r\n      allWarnings,\r\n      isDataReliable: allErrors.length === 0 && dataQuality.score >= 70,\r\n      hasWarnings: allWarnings.length > 0,\r\n    };\r\n  }, [metrics, timeSeriesData, lastUpdate]);\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsiteManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsitesData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1872,1875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1872,1875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1939,1942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1939,1942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2221,2224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2221,2224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2271,2274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2271,2274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock implementation for websites functionality since websites table doesn't exist\r\nimport { useState, useCallback } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nexport interface Website {\r\n  id: string;\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'active' | 'inactive' | 'pending' | 'indexed' | 'indexing' | 'error';\r\n  last_crawled: string;\r\n  metadata: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  tags: string[];\r\n  category: string;\r\n  language: string;\r\n  pages_indexed?: number;\r\n}\r\n\r\nexport function useWebsitesData() {\r\n  const [websites, setWebsites] = useState<Website[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchWebsites = useCallback(async () => {\r\n    console.log('Mock fetchWebsites called');\r\n    return [];\r\n  }, []);\r\n\r\n  const addWebsite = useCallback(async (websiteData: any) => {\r\n    console.log('Mock addWebsite called with:', websiteData);\r\n    return { id: 'mock', ...websiteData };\r\n  }, []);\r\n\r\n  const updateWebsite = useCallback(async (id: string, updates: any) => {\r\n    console.log('Mock updateWebsite called');\r\n    return true;\r\n  }, []);\r\n\r\n  const deleteWebsite = useCallback(async (id: string) => {\r\n    console.log('Mock deleteWebsite called');\r\n    return true;\r\n  }, []);\r\n\r\n  return {\r\n    websites,\r\n    loading,\r\n    error,\r\n    fetchWebsites,\r\n    addWebsite,\r\n    updateWebsite,\r\n    deleteWebsite\r\n  };\r\n}\r\n\r\n// Mock query hook for React Query compatibility\r\nexport const useWebsitesQuery = () => {\r\n  return useQuery({\r\n    queryKey: ['websites'],\r\n    queryFn: async () => [] as Website[],\r\n    initialData: [],\r\n  });\r\n};\r\n\r\n// Mock mutation hooks with full React Query mutation interface\r\nexport const useCreateWebsiteMutation = () => ({\r\n  mutateAsync: async (websiteData: any) => ({ id: 'mock', ...websiteData }),\r\n  mutate: (websiteData: any) => console.log('Creating website:', websiteData),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useUpdateWebsiteMutation = () => ({\r\n  mutateAsync: async (updates: any) => ({ success: true }),\r\n  mutate: (updates: any) => console.log('Updating website:', updates),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useDeleteWebsiteMutation = () => ({\r\n  mutateAsync: async (id: string) => ({ success: true }),\r\n  mutate: (id: string) => console.log('Deleting website:', id),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});\r\n\r\nexport const useCrawlWebsiteMutation = () => ({\r\n  mutateAsync: async (id: string) => ({ success: true }),\r\n  mutate: (id: string) => console.log('Crawling website:', id),\r\n  isPending: false,\r\n  isLoading: false,\r\n  error: null,\r\n  data: undefined,\r\n  isError: false,\r\n  isSuccess: false,\r\n  reset: () => {},\r\n});","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWebsitesDataMock.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[320,323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[320,323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock implementation for websites functionality since websites table doesn't exist\r\nimport { useState, useCallback } from 'react';\r\n\r\nexport interface Website {\r\n  id: string;\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'active' | 'inactive' | 'pending';\r\n  last_crawled: string;\r\n  metadata: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  tags: string[];\r\n  category: string;\r\n  language: string;\r\n}\r\n\r\nexport function useWebsitesData() {\r\n  const [websites, setWebsites] = useState<Website[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const addWebsite = useCallback(async (websiteData: Omit<Website, 'id' | 'created_at' | 'updated_at'>) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Mock addWebsite called with:', websiteData);\r\n      const newWebsite: Website = {\r\n        ...websiteData,\r\n        id: `mock_${Date.now()}`,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      setWebsites(prev => [...prev, newWebsite]);\r\n      return newWebsite;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const updateWebsite = useCallback(async (id: string, updates: Partial<Website>) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Mock updateWebsite called with:', { id, updates });\r\n      setWebsites(prev => prev.map(website => \r\n        website.id === id ? { ...website, ...updates, updated_at: new Date().toISOString() } : website\r\n      ));\r\n      return true;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const deleteWebsite = useCallback(async (id: string) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Mock deleteWebsite called with id:', id);\r\n      setWebsites(prev => prev.filter(website => website.id !== id));\r\n      return true;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchWebsites = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Mock fetchWebsites called');\r\n      // Return empty array for now\r\n      return [];\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unknown error');\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    websites,\r\n    loading,\r\n    error,\r\n    addWebsite,\r\n    updateWebsite,\r\n    deleteWebsite,\r\n    fetchWebsites\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\useWhatsAppConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1877,1880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1877,1880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport const useWhatsAppConnection = () => {\r\n  const { toast } = useToast();\r\n  const [qrCodeData, setQrCodeData] = useState<string | null>(null);\r\n  const [confirmationStatus, setConfirmationStatus] = useState<'waiting' | 'confirmed' | 'failed' | null>(null);\r\n  const statusCheckIntervalRef = useRef<number | null>(null);\r\n  const retryCountRef = useRef<number>(0);\r\n  const maxRetries = 3;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (statusCheckIntervalRef.current !== null) {\r\n        clearInterval(statusCheckIntervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const stopStatusCheckInterval = () => {\r\n    if (statusCheckIntervalRef.current !== null) {\r\n      clearInterval(statusCheckIntervalRef.current);\r\n      statusCheckIntervalRef.current = null;\r\n    }\r\n  };\r\n\r\n  const handleSuccessfulConnection = () => {\r\n    stopStatusCheckInterval();\r\n    setConfirmationStatus('confirmed');\r\n    retryCountRef.current = 0;\r\n    toast({\r\n      title: 'Conex├úo estabelecida!',\r\n      description: 'Seu WhatsApp foi conectado com sucesso.',\r\n      variant: 'default',\r\n    });\r\n  };\r\n\r\n  const handleConnectionFailure = () => {\r\n    retryCountRef.current += 1;\r\n    if (retryCountRef.current >= maxRetries) {\r\n      stopStatusCheckInterval();\r\n      setConfirmationStatus('failed');\r\n      retryCountRef.current = 0;\r\n      toast({\r\n        title: 'Falha na conex├úo',\r\n        description: 'N├úo foi poss├¡vel conectar ap├│s v├írias tentativas. Obtendo novo QR code...',\r\n        variant: 'destructive',\r\n      });\r\n    } else {\r\n      toast({\r\n        title: 'Tentando novamente',\r\n        description: `Tentativa ${retryCountRef.current} de ${maxRetries}`,\r\n        variant: 'default',\r\n      });\r\n    }\r\n  };\r\n\r\n  const processConnectionResponse = (responseData: any) => {\r\n    if (responseData && typeof responseData.respond === 'string') {\r\n      const status = responseData.respond;\r\n      if (status === 'positivo') {\r\n        handleSuccessfulConnection();\r\n      } else if (status === 'negativo') {\r\n        handleConnectionFailure();\r\n      } else {\r\n        toast({\r\n          title: 'Status desconhecido',\r\n          description: 'Recebemos uma resposta inesperada do servidor.',\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        title: 'Formato inesperado',\r\n        description: 'A resposta do servidor n├úo est├í no formato esperado.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkConnectionStatus = async (instanceName: string) => {\r\n    try {\r\n      const response = await fetch('https://webhook.comercial247.com.br/webhook/confirma', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ instanceName: instanceName.trim() }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const responseText = await response.text();\r\n        try {\r\n          const responseData = JSON.parse(responseText);\r\n          processConnectionResponse(responseData);\r\n        } catch {\r\n          toast({\r\n            title: 'Erro de formato',\r\n            description: 'A resposta do servidor n├úo est├í em formato JSON v├ílido.',\r\n            variant: 'destructive',\r\n          });\r\n        }\r\n      } else {\r\n        toast({\r\n          title: 'Erro de conex├úo',\r\n          description: `Erro HTTP: ${response.status} ${response.statusText}`,\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } catch {\r\n      toast({\r\n        title: 'Erro de rede',\r\n        description: 'N├úo foi poss├¡vel conectar ao servidor.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateQrCode = async (instanceName: string) => {\r\n    try {\r\n      const response = await fetch('https://webhook.comercial247.com.br/webhook/qrcode', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ instanceName: instanceName.trim() }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const responseText = await response.text();\r\n        try {\r\n          const responseData = JSON.parse(responseText);\r\n          if (responseData && responseData.qrcode) {\r\n            setQrCodeData(responseData.qrcode);\r\n            setConfirmationStatus('waiting');\r\n            retryCountRef.current = 0;\r\n          } else {\r\n            toast({\r\n              title: 'Erro no QR code',\r\n              description: 'N├úo foi poss├¡vel obter o QR code do servidor.',\r\n              variant: 'destructive',\r\n            });\r\n          }\r\n        } catch {\r\n          toast({\r\n            title: 'Erro de formato',\r\n            description: 'A resposta do QR code n├úo est├í em formato JSON v├ílido.',\r\n            variant: 'destructive',\r\n          });\r\n        }\r\n      } else {\r\n        toast({\r\n          title: 'Erro ao obter QR code',\r\n          description: `Erro HTTP: ${response.status} ${response.statusText}`,\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } catch {\r\n      toast({\r\n        title: 'Erro de rede',\r\n        description: 'N├úo foi poss├¡vel conectar ao servidor para obter o QR code.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const startStatusMonitoring = (instanceName: string) => {\r\n    statusCheckIntervalRef.current = window.setInterval(() => {\r\n      checkConnectionStatus(instanceName);\r\n    }, 5000);\r\n  };\r\n\r\n  const resetQrCode = () => {\r\n    stopStatusCheckInterval();\r\n    setQrCodeData(null);\r\n    setConfirmationStatus(null);\r\n    retryCountRef.current = 0;\r\n  };\r\n\r\n  return {\r\n    qrCodeData,\r\n    confirmationStatus,\r\n    retryCountRef,\r\n    maxRetries,\r\n    updateQrCode,\r\n    checkConnectionStatus,\r\n    startStatusMonitoring,\r\n    resetQrCode,\r\n  };\r\n};\r\n\r\nexport default useWhatsAppConnection;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\hooks\\utils\\retryFetch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\chatService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsQueryKeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[390,393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[390,393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1464,1467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1464,1467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2082,2085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2082,2085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2443,2446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2443,2446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2457,2460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2457,2460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { getCurrentAuthUser } from '@/hooks/useAuthUser';\r\n\r\nexport interface ContactFilters {\r\n  kanban_stage?: string;\r\n  lead_source?: string;\r\n  search?: string;\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n}\r\n\r\nexport const contactsService = {\r\n  async fetchContacts(filters: ContactFilters = {}): Promise<any[]> {\r\n    // Verify user authentication\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    let query = supabase\r\n      .from('contacts')\r\n      .select('id, name, email, phone, kanban_stage_id, created_at, updated_at, sales, budget')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    // Apply filters\r\n    if (filters.kanban_stage) {\r\n      query = query.eq('kanban_stage_id', filters.kanban_stage);\r\n    }\r\n\r\n    if (filters.search) {\r\n      query = query.or(`name.ilike.%${filters.search}%,email.ilike.%${filters.search}%,company.ilike.%${filters.search}%`);\r\n    }\r\n\r\n    if (filters.dateRange) {\r\n      query = query\r\n        .gte('created_at', filters.dateRange.start)\r\n        .lte('created_at', filters.dateRange.end);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error fetching contacts:', error);\r\n      throw new Error(`Failed to fetch contacts: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  },\r\n\r\n  async fetchContactsByKanbanStage(stage: string): Promise<any[]> {\r\n    // Verify user authentication\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .select('id, name, email, phone, kanban_stage_id, created_at, updated_at')\r\n      .eq('user_id', user.id)\r\n      .eq('kanban_stage_id', stage)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching contacts by stage:', error);\r\n      throw new Error(`Failed to fetch contacts by stage: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  },\r\n\r\n  async createContact(contact: any): Promise<any> {\r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .insert([contact])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating contact:', error);\r\n      throw new Error(`Failed to create contact: ${error.message}`);\r\n    }\r\n\r\n    return data;\r\n  },\r\n\r\n  async updateContact({ id, ...updates }: any): Promise<any> {\r\n    // Verify user authentication and ownership\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { data, error } = await supabase\r\n      .from('contacts')\r\n      .update({ ...updates, updated_at: new Date().toISOString() })\r\n      .eq('id', id)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error updating contact:', error);\r\n      throw new Error(`Failed to update contact: ${error.message}`);\r\n    }\r\n\r\n    return data;\r\n  },\r\n\r\n  async deleteContact(id: string): Promise<void> {\r\n    // Verify user authentication and ownership\r\n    const user = await getCurrentAuthUser();\r\n    \r\n    const { error } = await supabase\r\n      .from('contacts')\r\n      .delete()\r\n      .eq('id', id)\r\n      .eq('user_id', user.id);\r\n\r\n    if (error) {\r\n      console.error('Error deleting contact:', error);\r\n      throw new Error(`Failed to delete contact: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contactsUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\contextualMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[314,317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[314,317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[610,613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[610,613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Servi├ºo para gerenciar mem├│ria contextual - Simplificado para nova estrutura\r\n */\r\nexport const contextualMemoryService = {\r\n  /**\r\n   * Armazena uma mem├│ria contextual - Desabilitado temporariamente\r\n   */\r\n  storeContextualMemory: async (memory: any): Promise<any> => {\r\n    logger.info('contextualMemoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return null;\r\n  },\r\n  \r\n  /**\r\n   * Obt├®m todas as mem├│rias contextuais - Desabilitado temporariamente\r\n   */\r\n  getContextualMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('contextualMemoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n  \r\n  /**\r\n   * Limpa o cache\r\n   */\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('contextualMemoryService: Cache clearing desabilitado durante unifica├º├úo');\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\episodicMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2871,2874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2871,2874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4147,4150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4147,4150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\r\nimport { MemoryCache } from './memoryCache';\r\nimport { N8nChatMemory, MemoryType, MemoryLevel } from '@/types/memory';\r\nimport { logger } from '@/utils/logger';\r\n\r\n// Simplified cache\r\nconst episodicCache = new MemoryCache({ maxSize: 50 });\r\n\r\nexport const episodicMemoryService = {\r\n  /**\r\n   * Armazena uma mem├│ria epis├│dica\r\n   */\r\n  storeEpisodicMemory: async (\r\n    memory: Partial<N8nChatMemory>\r\n  ): Promise<N8nChatMemory | null> => {\r\n    try {\r\n      // Mock implementation - return null for now since table structure is complex\r\n      console.log('Mock storeEpisodicMemory called', { memory });\r\n      return null;\r\n    } catch (err) {\r\n      logger.error('Erro ao armazenar mem├│ria epis├│dica:', err);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Obt├®m mem├│rias epis├│dicas de uma sess├úo\r\n   */\r\n  getEpisodicMemories: async (\r\n    sessionId: string,\r\n    limit = 50,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation - return empty array\r\n      console.log('Mock getEpisodicMemories called', { sessionId, limit, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar mem├│rias epis├│dicas:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Busca mem├│rias por import├óncia\r\n   */\r\n  getMemoriesByImportance: async (\r\n    sessionId: string,\r\n    minImportance = 3,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getMemoriesByImportance called', { sessionId, minImportance, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar mem├│rias por import├óncia:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Atualiza uma mem├│ria epis├│dica\r\n   */\r\n  updateEpisodicMemory: async (\r\n    memoryId: number,\r\n    updates: Partial<N8nChatMemory>\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock updateEpisodicMemory called', { memoryId, updates });\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Erro ao atualizar mem├│ria epis├│dica:', err);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove mem├│rias epis├│dicas expiradas\r\n   */\r\n  removeExpiredMemories: async (): Promise<number> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock removeExpiredMemories called');\r\n      return 0;\r\n    } catch (err) {\r\n      logger.error('Erro ao remover mem├│rias epis├│dicas expiradas:', err);\r\n      return 0;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Limpa o cache de mem├│ria epis├│dica\r\n   */\r\n  clearCache: (sessionId?: string): void => {\r\n    console.log('Mock clearCache called', { sessionId });\r\n    episodicCache.clear();\r\n  },\r\n\r\n  /**\r\n   * Gera linha do tempo epis├│dica\r\n   */\r\n  generateTimeline: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock generateTimeline called', { sessionId, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao gerar linha do tempo:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Busca mem├│rias por per├¡odo\r\n   */\r\n  getEpisodicMemoriesByPeriod: async (\r\n    sessionId: string,\r\n    startDate: string,\r\n    endDate: string,\r\n    useCache = true\r\n  ): Promise<N8nChatMemory[]> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getEpisodicMemoriesByPeriod called', { sessionId, startDate, endDate, useCache });\r\n      return [];\r\n    } catch (err) {\r\n      logger.error('Erro ao buscar mem├│rias por per├¡odo:', err);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Atualiza import├óncia de uma mem├│ria\r\n   */\r\n  updateImportance: async (memoryId: number, importance: number): Promise<boolean> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock updateImportance called', { memoryId, importance });\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Erro ao atualizar import├óncia:', err);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Gera estat├¡sticas da mem├│ria epis├│dica\r\n   */\r\n  getMemoryStats: async (sessionId: string): Promise<any> => {\r\n    try {\r\n      // Mock implementation\r\n      console.log('Mock getMemoryStats called', { sessionId });\r\n      return {\r\n        total: 0,\r\n        byImportance: { low: 0, medium: 0, high: 0 },\r\n        byLevel: { short_term: 0, medium_term: 0, long_term: 0 },\r\n        mostRecent: null,\r\n        mostImportant: null,\r\n      };\r\n    } catch (err) {\r\n      logger.error('Erro ao gerar estat├¡sticas da mem├│ria:', err);\r\n      return {\r\n        total: 0,\r\n        byImportance: { low: 0, medium: 0, high: 0 },\r\n        byLevel: { short_term: 0, medium_term: 0, long_term: 0 },\r\n        mostRecent: null,\r\n        mostImportant: null,\r\n      };\r\n    }\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\memoryCache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1020,1023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1020,1023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7100,7103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7100,7103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Sistema de cache em mem├│ria para otimiza├º├úo do servi├ºo de mem├│ria da IA\r\n * \r\n * Este m├│dulo implementa um sistema de cache em mem├│ria para reduzir consultas\r\n * repetidas ao banco de dados e melhorar a performance do sistema de mem├│ria.\r\n */\r\n\r\nimport { logger } from '../utils/logger';\r\n\r\ninterface CacheOptions {\r\n  /** Tempo de vida em milissegundos */\r\n  ttl?: number;\r\n  /** Tamanho m├íximo do cache (n├║mero de itens) */\r\n  maxSize?: number;\r\n  /** Nome do cache para logs */\r\n  name?: string;\r\n}\r\n\r\ninterface CacheStats {\r\n  /** N├║mero total de acessos ao cache */\r\n  accesses: number;\r\n  /** N├║mero de acertos no cache */\r\n  hits: number;\r\n  /** N├║mero de erros no cache */\r\n  misses: number;\r\n  /** Taxa de acertos (hits/accesses) */\r\n  hitRate: number;\r\n  /** N├║mero de itens atualmente no cache */\r\n  size: number;\r\n  /** N├║mero de itens expirados removidos */\r\n  evictions: number;\r\n}\r\n\r\n/**\r\n * Classe que implementa um cache em mem├│ria com TTL e limite de tamanho\r\n */\r\nexport class MemoryCache<T = any> {\r\n  private data: Map<string, T>;\r\n  private ttls: Map<string, number>;\r\n  private lastAccess: Map<string, number>;\r\n  private readonly options: Required<CacheOptions>;\r\n  private stats: CacheStats;\r\n\r\n  /**\r\n   * Cria uma nova inst├óncia de cache em mem├│ria\r\n   * @param options Op├º├Áes de configura├º├úo do cache\r\n   */\r\n  constructor(options: CacheOptions = {}) {\r\n    this.data = new Map<string, T>();\r\n    this.ttls = new Map<string, number>();\r\n    this.lastAccess = new Map<string, number>();\r\n    this.options = {\r\n      ttl: options.ttl ?? 5 * 60 * 1000, // 5 minutos por padr├úo\r\n      maxSize: options.maxSize ?? 1000, // 1000 itens por padr├úo\r\n      name: options.name ?? 'memory-cache',\r\n    };\r\n    this.stats = {\r\n      accesses: 0,\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      size: 0,\r\n      evictions: 0,\r\n    };\r\n\r\n    // Iniciar limpeza peri├│dica de itens expirados\r\n    this.startCleanupInterval();\r\n  }\r\n\r\n  /**\r\n   * Obt├®m um item do cache\r\n   * @param key Chave do item\r\n   * @returns O item ou undefined se n├úo encontrado ou expirado\r\n   */\r\n  get(key: string): T | undefined {\r\n    this.stats.accesses++;\r\n    \r\n    // Verificar se o item existe\r\n    if (!this.data.has(key)) {\r\n      this.stats.misses++;\r\n      this.updateHitRate();\r\n      return undefined;\r\n    }\r\n\r\n    // Verificar se o item expirou\r\n    if (this.isExpired(key)) {\r\n      this.delete(key);\r\n      this.stats.misses++;\r\n      this.updateHitRate();\r\n      return undefined;\r\n    }\r\n\r\n    // Atualizar ├║ltimo acesso\r\n    this.lastAccess.set(key, Date.now());\r\n    \r\n    // Registrar acerto\r\n    this.stats.hits++;\r\n    this.updateHitRate();\r\n    \r\n    return this.data.get(key);\r\n  }\r\n\r\n  /**\r\n   * Armazena um item no cache\r\n   * @param key Chave do item\r\n   * @param value Valor a ser armazenado\r\n   * @param ttl Tempo de vida em milissegundos (opcional, usa o padr├úo se n├úo informado)\r\n   */\r\n  set(key: string, value: T, ttl?: number): void {\r\n    // Verificar se o cache est├í cheio e remover itens se necess├írio\r\n    if (this.data.size >= this.options.maxSize && !this.data.has(key)) {\r\n      this.evictLeastRecentlyUsed();\r\n    }\r\n\r\n    // Armazenar o item\r\n    this.data.set(key, value);\r\n    this.ttls.set(key, Date.now() + (ttl ?? this.options.ttl));\r\n    this.lastAccess.set(key, Date.now());\r\n    this.stats.size = this.data.size;\r\n\r\n    logger.debug(`[${this.options.name}] Item adicionado ao cache: ${key}`);\r\n  }\r\n\r\n  /**\r\n   * Remove um item do cache\r\n   * @param key Chave do item a ser removido\r\n   * @returns true se o item foi removido, false se n├úo existia\r\n   */\r\n  delete(key: string): boolean {\r\n    const existed = this.data.delete(key);\r\n    this.ttls.delete(key);\r\n    this.lastAccess.delete(key);\r\n    this.stats.size = this.data.size;\r\n\r\n    if (existed) {\r\n      logger.debug(`[${this.options.name}] Item removido do cache: ${key}`);\r\n    }\r\n\r\n    return existed;\r\n  }\r\n\r\n  /**\r\n   * Limpa todo o cache\r\n   */\r\n  clear(): void {\r\n    this.data.clear();\r\n    this.ttls.clear();\r\n    this.lastAccess.clear();\r\n    this.stats.size = 0;\r\n    logger.debug(`[${this.options.name}] Cache limpo`);\r\n  }\r\n\r\n  /**\r\n   * Verifica se um item expirou\r\n   * @param key Chave do item\r\n   * @returns true se o item expirou, false caso contr├írio\r\n   */\r\n  private isExpired(key: string): boolean {\r\n    const expiry = this.ttls.get(key);\r\n    return expiry !== undefined && expiry < Date.now();\r\n  }\r\n\r\n  /**\r\n   * Remove o item menos recentemente acessado\r\n   */\r\n  private evictLeastRecentlyUsed(): void {\r\n    if (this.data.size === 0) return;\r\n\r\n    let oldestKey: string | null = null;\r\n    let oldestAccess = Infinity;\r\n\r\n    // Encontrar o item menos recentemente acessado\r\n    for (const [key, lastAccess] of this.lastAccess.entries()) {\r\n      if (lastAccess < oldestAccess) {\r\n        oldestAccess = lastAccess;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    // Remover o item\r\n    if (oldestKey) {\r\n      this.delete(oldestKey);\r\n      this.stats.evictions++;\r\n      logger.debug(`[${this.options.name}] Item removido por pol├¡tica LRU: ${oldestKey}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicia um intervalo para limpar itens expirados periodicamente\r\n   */\r\n  private startCleanupInterval(): void {\r\n    const cleanupInterval = Math.min(this.options.ttl / 2, 60 * 1000); // Metade do TTL ou 1 minuto, o que for menor\r\n\r\n    setInterval(() => {\r\n      this.cleanupExpired();\r\n    }, cleanupInterval);\r\n\r\n    logger.debug(`[${this.options.name}] Limpeza peri├│dica iniciada (intervalo: ${cleanupInterval}ms)`);\r\n  }\r\n\r\n  /**\r\n   * Remove todos os itens expirados do cache\r\n   */\r\n  private cleanupExpired(): void {\r\n    const now = Date.now();\r\n    let expiredCount = 0;\r\n\r\n    for (const [key, expiry] of this.ttls.entries()) {\r\n      if (expiry < now) {\r\n        this.delete(key);\r\n        expiredCount++;\r\n        this.stats.evictions++;\r\n      }\r\n    }\r\n\r\n    if (expiredCount > 0) {\r\n      logger.debug(`[${this.options.name}] ${expiredCount} itens expirados removidos`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza a taxa de acertos do cache\r\n   */\r\n  private updateHitRate(): void {\r\n    this.stats.hitRate = this.stats.accesses > 0 \r\n      ? this.stats.hits / this.stats.accesses \r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Obt├®m estat├¡sticas do cache\r\n   * @returns Estat├¡sticas atuais do cache\r\n   */\r\n  getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Obt├®m o n├║mero de itens no cache\r\n   * @returns N├║mero de itens no cache\r\n   */\r\n  size(): number {\r\n    return this.data.size;\r\n  }\r\n\r\n  /**\r\n   * Verifica se uma chave existe no cache (mesmo que expirada)\r\n   * @param key Chave a verificar\r\n   * @returns true se a chave existe, false caso contr├írio\r\n   */\r\n  has(key: string): boolean {\r\n    return this.data.has(key);\r\n  }\r\n\r\n  /**\r\n   * Obt├®m todas as chaves no cache\r\n   * @returns Array com todas as chaves\r\n   */\r\n  keys(): string[] {\r\n    return Array.from(this.data.keys());\r\n  }\r\n}\r\n\r\n/**\r\n * Cache global para mem├│rias\r\n * Uso: import { memoryCache } from './memoryCache';\r\n */\r\nexport const memoryCache = new MemoryCache<any>({\r\n  name: 'memory-service-cache',\r\n  ttl: 10 * 60 * 1000, // 10 minutos\r\n  maxSize: 2000,\r\n});","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\memoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[559,562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[559,562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[843,846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[843,846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1187,1190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1187,1190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Servi├ºo de mem├│ria - Simplificado durante unifica├º├úo\r\n */\r\nexport const memoryService = {\r\n  /**\r\n   * Obt├®m todas as mem├│rias - Desabilitado temporariamente\r\n   */\r\n  getAllMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('memoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Busca mem├│rias por sess├úo - Desabilitado temporariamente\r\n   */\r\n  getMemoriesBySession: async (\r\n    sessionId: string,\r\n    memoryType?: any,\r\n    limit = 50,\r\n    useCache = true\r\n  ): Promise<any[]> => {\r\n    logger.info('memoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Armazena uma nova mem├│ria - Desabilitado temporariamente\r\n   */\r\n  storeMemory: async (memory: any): Promise<any> => {\r\n    logger.info('memoryService: Armazenamento de mem├│ria desabilitado durante unifica├º├úo');\r\n    return null;\r\n  },\r\n\r\n  /**\r\n   * Busca mem├│rias por import├óncia - Desabilitado temporariamente\r\n   */\r\n  getMemoriesByImportance: async (\r\n    sessionId: string,\r\n    minImportance = 3,\r\n    useCache = true\r\n  ): Promise<any[]> => {\r\n    logger.info('memoryService: Busca por import├óncia desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n\r\n  /**\r\n   * Limpa o cache\r\n   */\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('memoryService: Limpeza de cache desabilitada durante unifica├º├úo');\r\n  },\r\n\r\n  /**\r\n   * Obt├®m estat├¡sticas do cache\r\n   */\r\n  getCacheStats: () => {\r\n    logger.info('memoryService: Estat├¡sticas de cache desabilitadas durante unifica├º├úo');\r\n    return {};\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\queryClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3058,3061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3058,3061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3126,3129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3126,3129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient } from '@tanstack/react-query';\r\n\r\n/**\r\n * Configura├º├úo OTIMIZADA do QueryClient para m├íxima performance\r\n * \r\n * Features implementadas:\r\n * - Cache hier├írquico por tipo de dados\r\n * - Retry strategy inteligente\r\n * - Background refetch otimizado\r\n * - Performance m├íxima em produ├º├úo\r\n * - Prefetch autom├ítico\r\n * - Garbage collection otimizada\r\n */\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      // Cache Strategy - Hier├írquico por import├óncia\r\n      staleTime: 5 * 60 * 1000, // 5 minutos default\r\n      gcTime: 15 * 60 * 1000, // 15 minutos no cache\r\n      \r\n      // Network Strategy Otimizada\r\n      refetchOnWindowFocus: false, // Evita refetch desnecess├írio\r\n      refetchOnReconnect: 'always', // Sempre refetch ao reconectar\r\n      refetchOnMount: true, // Refetch inteligente ao montar\r\n      \r\n      // Retry Strategy Inteligente\r\n      retry: (failureCount, error) => {\r\n        // N├úo retry em erros 4xx (client errors)\r\n        if (error?.message?.includes('4')) return false;\r\n        return failureCount < 2;\r\n      },\r\n      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 5000),\r\n      \r\n      // Performance Optimizations\r\n      networkMode: 'online',\r\n      notifyOnChangeProps: 'all', // Otimiza re-renders\r\n      \r\n      // Background Updates\r\n      refetchInterval: false, // Controlado manualmente\r\n      refetchIntervalInBackground: false,\r\n    },\r\n    mutations: {\r\n      // Retry otimizado para mutations\r\n      retry: (failureCount, error) => {\r\n        if (error?.message?.includes('4')) return false;\r\n        return failureCount < 1;\r\n      },\r\n      retryDelay: 1500,\r\n      networkMode: 'online',\r\n      \r\n      // Performance para mutations\r\n      onSettled: () => {\r\n        // Cleanup autom├ítico ap├│s mutations\r\n        queryClient.resumePausedMutations();\r\n      },\r\n    },\r\n  },\r\n  \r\n  // Configura├º├Áes globais do cache\r\n  mutationCache: undefined,\r\n  queryCache: undefined,\r\n});\r\n\r\n/**\r\n * Configura├º├Áes espec├¡ficas por tipo de dados\r\n */\r\nexport const queryKeys = {\r\n  // Client Stats\r\n  clientStats: {\r\n    all: ['client-stats'] as const,\r\n    latest: ['client-stats', 'latest'] as const,\r\n    byDateRange: (start: string, end: string) => ['client-stats', 'date-range', start, end] as const,\r\n  },\r\n  \r\n  // Dashboard\r\n  dashboard: {\r\n    metrics: ['dashboard-metrics'] as const,\r\n  },\r\n  \r\n  // Conversations\r\n  conversations: {\r\n    all: ['conversations'] as const,\r\n    metrics: ['conversation-metrics'] as const,\r\n    latest: ['conversation-metrics', 'latest'] as const,\r\n    byDateRange: (start: string, end: string) => ['conversation-metrics', 'date-range', start, end] as const,\r\n  },\r\n  \r\n  // UTM Metrics\r\n  utmMetrics: {\r\n    all: ['utm-metrics'] as const,\r\n    byCampaign: (campaign: string) => ['utm-metrics', 'campaign', campaign] as const,\r\n    analytics: ['utm-analytics'] as const,\r\n  },\r\n  \r\n  // Outros dados\r\n  aiProducts: ['ai-products'] as const,\r\n  kanbanStages: ['kanban-stages'] as const,\r\n  contacts: (filters?: any) => ['contacts', filters] as const,\r\n  funnelData: (dateRange?: any) => ['funnel-data', dateRange] as const,\r\n  realtimeMetrics: ['realtime-metrics'] as const,\r\n  notifications: ['notifications'] as const,\r\n} as const;\r\n\r\n/**\r\n * Configura├º├Áes de cache espec├¡ficas por tipo de query\r\n */\r\nexport const cacheConfig = {\r\n  // Dados cr├¡ticos - cache longo\r\n  critical: {\r\n    staleTime: 10 * 60 * 1000, // 10 minutos\r\n    gcTime: 20 * 60 * 1000, // 20 minutos\r\n  },\r\n  \r\n  // Dados est├íticos - cache longo\r\n  static: {\r\n    staleTime: 15 * 60 * 1000, // 15 minutos\r\n    gcTime: 30 * 60 * 1000, // 30 minutos\r\n  },\r\n  \r\n  // Dados din├ómicos - cache m├®dio\r\n  dynamic: {\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    gcTime: 10 * 60 * 1000, // 10 minutos\r\n  },\r\n  \r\n  // M├®tricas - cache curto\r\n  metrics: {\r\n    staleTime: 2 * 60 * 1000, // 2 minutos\r\n    gcTime: 5 * 60 * 1000, // 5 minutos\r\n  },\r\n  \r\n  // Tempo real - cache muito curto\r\n  realtime: {\r\n    staleTime: 30 * 1000, // 30 segundos\r\n    gcTime: 2 * 60 * 1000, // 2 minutos\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Utilit├írios para invalida├º├úo de cache\r\n */\r\nexport const cacheUtils = {\r\n  /**\r\n   * Invalida todas as queries relacionadas a m├®tricas\r\n   */\r\n  invalidateMetrics: () => {\r\n    queryClient.invalidateQueries({ queryKey: ['dashboard-metrics'] });\r\n    queryClient.invalidateQueries({ queryKey: ['funnel-data'] });\r\n    queryClient.invalidateQueries({ queryKey: ['utm-metrics'] });\r\n    queryClient.invalidateQueries({ queryKey: ['conversation-metrics'] });\r\n  },\r\n  \r\n  /**\r\n   * Invalida dados de contatos e relacionados\r\n   */\r\n  invalidateContacts: () => {\r\n    queryClient.invalidateQueries({ queryKey: ['contacts'] });\r\n    queryClient.invalidateQueries({ queryKey: ['client-stats'] });\r\n  },\r\n  \r\n  /**\r\n   * Invalida dados em tempo real\r\n   */\r\n  invalidateRealtime: () => {\r\n    queryClient.invalidateQueries({ queryKey: ['realtime-metrics'] });\r\n    queryClient.invalidateQueries({ queryKey: ['notifications'] });\r\n  },\r\n  \r\n  /**\r\n   * Limpa todo o cache (usar com cuidado)\r\n   */\r\n  clearAll: () => {\r\n    queryClient.clear();\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\semanticMemoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[225,228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[225,228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Servi├ºo para gerenciar mem├│ria sem├óntica - Simplificado durante unifica├º├úo\r\n */\r\nexport const semanticMemoryService = {\r\n  storeSemanticMemory: async (memory: any): Promise<any> => {\r\n    logger.info('semanticMemoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return null;\r\n  },\r\n\r\n  getSemanticMemories: async (sessionId: string, useCache = true): Promise<any[]> => {\r\n    logger.info('semanticMemoryService: Funcionalidade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n\r\n  searchBySimilarity: async (query: string, limit = 10): Promise<any[]> => {\r\n    logger.info('semanticMemoryService: Busca por similaridade desabilitada durante unifica├º├úo');\r\n    return [];\r\n  },\r\n\r\n  clearCache: (pattern?: string): void => {\r\n    logger.info('semanticMemoryService: Limpeza de cache desabilitada durante unifica├º├úo');\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabase-migration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1445,1448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1445,1448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'query' is never reassigned. Use 'const' instead.","line":164,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":164,"endColumn":14,"fix":{"range":[4616,4669],"text":"const query = supabase.from(\"funnel_data\").select(\"*\");"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":470,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12483,12486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12483,12486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// =====================================================\r\n// MIGRA├ç├âO E INTEGRA├ç├âO COM SUPABASE\r\n// Substitui dados mockup por dados reais do banco\r\n// =====================================================\r\n\r\nimport type { Database } from \"@/types/supabase\";\r\nimport { supabase } from \"./supabaseClient\";\r\n\r\n// =====================================================\r\n// TIPOS PARA DADOS DO SUPABASE\r\n// =====================================================\r\n\r\nexport interface SupabaseContact {\r\n  id: string;\r\n  name: string;\r\n  email: string | null;\r\n  phone: string | null;\r\n  address: string | null;\r\n  client_name: string | null;\r\n  client_size: string | null;\r\n  client_type: string | null;\r\n  cpf_cnpj: string | null;\r\n  asaas_customer_id: string | null;\r\n  status: string | null;\r\n  notes: string | null;\r\n  last_contact: string | null;\r\n  kanban_stage_id: string | null;\r\n  last_message: string | null;\r\n  last_message_time: string | null;\r\n  unread_count: number | null;\r\n  session_id: string | null;\r\n  tags: string[] | null;\r\n  responsible_user: string | null;\r\n  sales: number | null;\r\n  client_sector: string | null;\r\n  budget: number | null;\r\n  payment_method: string | null;\r\n  client_objective: string | null;\r\n  loss_reason: string | null;\r\n  contract_number: string | null;\r\n  contract_date: string | null;\r\n  payment: string | null;\r\n  uploaded_files: string[] | null;\r\n  consultation_stage: string | null;\r\n  files_metadata: any;\r\n  deleted_at: string | null;\r\n  user_id: string;\r\n  created_at: string | null;\r\n  updated_at: string | null;\r\n}\r\n\r\nexport interface SupabaseMetrics {\r\n  total_conversations: number;\r\n  response_rate: number;\r\n  conversion_rate: number;\r\n  negotiated_value: number;\r\n  total_clients: number;\r\n  total_chats: number;\r\n  new_clients_this_month: number;\r\n}\r\n\r\nexport interface SupabaseFunnelData {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\n// =====================================================\r\n// FUN├ç├òES DE MIGRA├ç├âO\r\n// =====================================================\r\n\r\n/**\r\n * Executa o script SQL de migra├º├úo no Supabase\r\n * ATEN├ç├âO: Execute apenas uma vez para criar as tabelas e inserir dados iniciais\r\n */\r\nexport async function executeMigration() {\r\n  try {\r\n    console.log(\"­ƒÜÇ Iniciando migra├º├úo para Supabase...\");\r\n\r\n    // Nota: O script SQL deve ser executado diretamente no painel do Supabase\r\n    // ou via CLI, pois o cliente JavaScript n├úo suporta DDL commands\r\n    console.log(\r\n      \"ÔÜá´©Å  Execute o arquivo supabase-migration.sql no painel do Supabase:\",\r\n    );\r\n    console.log(\"1. Acesse https://supabase.com/dashboard\");\r\n    console.log(\"2. V├í para SQL Editor\");\r\n    console.log(\"3. Cole o conte├║do do arquivo supabase-migration.sql\");\r\n    console.log(\"4. Execute o script\");\r\n\r\n    return {\r\n      success: false,\r\n      message: \"Execute o script SQL manualmente no painel do Supabase\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"ÔØî Erro na migra├º├úo:\", error);\r\n    return {\r\n      success: false,\r\n      error: error,\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUN├ç├òES PARA SUBSTITUIR DADOS MOCKUP\r\n// =====================================================\r\n\r\n/**\r\n * Busca todos os contatos do Supabase\r\n * Substitui mockClients\r\n */\r\nexport async function getContactsFromSupabase(): Promise<SupabaseContact[]> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar contatos:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getContactsFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca m├®tricas do dashboard do Supabase\r\n * Substitui mockClientStats e mockConversationMetrics\r\n */\r\nexport async function getMetricsFromSupabase(): Promise<SupabaseMetrics | null> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"dashboard_metrics\")\r\n      .select(\"*\")\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar m├®tricas:\", error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getMetricsFromSupabase:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados do funil de convers├úo com filtro de data\r\n * Substitui funnelData do mockConversationMetrics\r\n */\r\nexport async function getFunnelDataFromSupabase(\r\n  startDate?: string,\r\n  endDate?: string,\r\n): Promise<SupabaseFunnelData[]> {\r\n  try {\r\n    let query = supabase.from(\"funnel_data\").select(\"*\");\r\n\r\n    if (startDate && endDate) {\r\n      // Usar fun├º├úo SQL para filtro por data\r\n      const { data, error } = await supabase.rpc(\"get_funnel_by_date_range\", {\r\n        start_date: startDate,\r\n        end_date: endDate,\r\n      });\r\n\r\n      if (error) {\r\n        console.error(\"Erro ao buscar funil com filtro:\", error);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    } else {\r\n      const { data, error } = await query.order(\"value\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erro ao buscar funil:\", error);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getFunnelDataFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados de convers├úo por tempo\r\n * Substitui conversionByTimeData\r\n */\r\nexport async function getConversionByTimeFromSupabase() {\r\n  try {\r\n    // Using funnel_data as alternative since conversion_by_time doesn't exist in types\r\n    const { data, error } = await supabase\r\n      .from(\"funnel_data\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar convers├úo por tempo:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getConversionByTimeFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca leads por fonte\r\n * Substitui leadsBySource\r\n */\r\nexport async function getLeadsBySourceFromSupabase() {\r\n  try {\r\n    // Using utm_tracking as alternative since leads_by_source doesn't exist in types\r\n    const { data, error } = await supabase\r\n      .from(\"utm_tracking\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar leads por fonte:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getLeadsBySourceFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca produtos AI do Supabase\r\n * Substitui aiProducts mock\r\n */\r\nexport async function getAIProductsFromSupabase() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"ai_products\")\r\n      .select(\"*\")\r\n      .order(\"popular\", { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao buscar produtos AI:\", error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getAIProductsFromSupabase:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Busca dados UTM e campanhas\r\n * Substitui mockUTMMetrics\r\n */\r\nexport async function getUTMDataFromSupabase() {\r\n  try {\r\n    const [metricsResult, campaignsResult, trackingResult] = await Promise.all([\r\n      supabase.from(\"utm_metrics\").select(\"*\").limit(1).single(),\r\n      supabase\r\n        .from(\"utm_tracking\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false }),\r\n      supabase\r\n        .from(\"utm_tracking\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false }),\r\n    ]);\r\n\r\n    return {\r\n      metrics: metricsResult.data,\r\n      campaigns: campaignsResult.data || [],\r\n      tracking: trackingResult.data || [],\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo getUTMDataFromSupabase:\", error);\r\n    return {\r\n      metrics: null,\r\n      campaigns: [],\r\n      tracking: [],\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUN├ç├òES DE INSER├ç├âO E ATUALIZA├ç├âO\r\n// =====================================================\r\n\r\n/**\r\n * Adiciona um novo contato\r\n */\r\nexport async function addContact(\r\n  contact: Omit<SupabaseContact, \"id\" | \"created_at\" | \"updated_at\">,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .insert(contact)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao adicionar contato:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo addContact:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Atualiza um contato existente\r\n */\r\nexport async function updateContact(\r\n  id: string,\r\n  updates: Partial<SupabaseContact>,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .update(updates)\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao atualizar contato:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo updateContact:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Adiciona dados ao funil (para testes)\r\n */\r\nexport async function addFunnelData(\r\n  funnelData: Omit<SupabaseFunnelData, \"id\" | \"created_at\">,\r\n) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"funnel_data\")\r\n      .insert([funnelData])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Erro ao adicionar dados do funil:\", error);\r\n      return { success: false, error };\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error(\"Erro na fun├º├úo addFunnelData:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HOOK PERSONALIZADO PARA USAR NO REACT\r\n// =====================================================\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Hook para buscar dados do Supabase com loading state\r\n */\r\nexport function useSupabaseData() {\r\n  const [contacts, setContacts] = useState<SupabaseContact[]>([]);\r\n  const [metrics, setMetrics] = useState<SupabaseMetrics | null>(null);\r\n  const [funnelData, setFunnelData] = useState<SupabaseFunnelData[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const loadData = async (dateFilter?: { start: string; end: string }) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [contactsData, metricsData, funnelDataResult] = await Promise.all([\r\n        getContactsFromSupabase(),\r\n        getMetricsFromSupabase(),\r\n        getFunnelDataFromSupabase(dateFilter?.start, dateFilter?.end),\r\n      ]);\r\n\r\n      setContacts(contactsData);\r\n      setMetrics(metricsData);\r\n      setFunnelData(funnelDataResult);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"Erro desconhecido\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  return {\r\n    contacts,\r\n    metrics,\r\n    funnelData,\r\n    loading,\r\n    error,\r\n    refetch: loadData,\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// UTILIT├üRIOS PARA MIGRA├ç├âO\r\n// =====================================================\r\n\r\n/**\r\n * Verifica se as tabelas existem no Supabase\r\n */\r\nexport async function checkTablesExist() {\r\n  try {\r\n    const tables = [\r\n      \"contacts\",\r\n      \"conversation_metrics\",\r\n      \"funnel_data\",\r\n      \"ai_products\",\r\n    ];\r\n    const results = [];\r\n\r\n    for (const table of tables) {\r\n      try {\r\n        // Only check tables that exist in types\r\n        const validTables = [\r\n          \"contacts\",\r\n          \"ai_products\",\r\n          \"client_stats\",\r\n          \"conversation_metrics\",\r\n          \"funnel_data\",\r\n          \"utm_metrics\",\r\n          \"utm_tracking\",\r\n        ];\r\n        if (!validTables.includes(table)) {\r\n          results.push({\r\n            table,\r\n            exists: false,\r\n            error: `Table ${table} not found in types`,\r\n          });\r\n          continue;\r\n        }\r\n\r\n        const { data, error } = await supabase\r\n          .from(table as any)\r\n          .select(\"id\")\r\n          .limit(1);\r\n\r\n        results.push({\r\n          table,\r\n          exists: !error,\r\n          error: error?.message,\r\n        });\r\n      } catch (tableError) {\r\n        results.push({\r\n          table,\r\n          exists: false,\r\n          error:\r\n            tableError instanceof Error ? tableError.message : \"Unknown error\",\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Erro ao verificar tabelas:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Fun├º├úo para testar a conex├úo com Supabase\r\n */\r\nexport async function testSupabaseConnection() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"contacts\")\r\n      .select(\"count\")\r\n      .limit(1);\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: \"Erro na conex├úo: \" + error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Conex├úo com Supabase estabelecida com sucesso!\",\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      message:\r\n        \"Erro na conex├úo: \" +\r\n        (error instanceof Error ? error.message : \"Erro desconhecido\"),\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// EXEMPLO DE USO\r\n// =====================================================\r\n\r\n/*\r\n// Em um componente React:\r\n\r\nimport { useSupabaseData, testSupabaseConnection } from '@/lib/supabase-migration';\r\n\r\nfunction MetricsComponent() {\r\n  const { contacts, metrics, funnelData, loading, error, refetch } = useSupabaseData();\r\n  \r\n  // Para filtrar por data:\r\n  const handleDateFilter = (startDate: string, endDate: string) => {\r\n    refetch({ start: startDate, end: endDate });\r\n  };\r\n  \r\n  if (loading) return <div>Carregando...</div>;\r\n  if (error) return <div>Erro: {error}</div>;\r\n  \r\n  return (\r\n    <div>\r\n      <h2>M├®tricas do Supabase</h2>\r\n      <p>Total de contatos: {contacts.length}</p>\r\n      <p>Taxa de convers├úo: {metrics?.conversion_rate}%</p>\r\n      \r\n      <h3>Funil de Convers├úo</h3>\r\n      {funnelData.map(item => (\r\n        <div key={item.name}>\r\n          {item.name}: {item.value} ({item.percentage}%)\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Para testar a conex├úo:\r\nconst testConnection = async () => {\r\n  const result = await testSupabaseConnection();\r\n  console.log(result.message);\r\n};\r\n\r\n*/\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\clientsMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\metricsMock.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2498,2501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2498,2501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock data for the metrics dashboard\r\n\r\nexport interface ClientStats {\r\n  totalClients: number;\r\n  totalChats: number;\r\n  newClientsThisMonth: number;\r\n  monthlyGrowth: Array<{ month: string; clients: number }>;\r\n  ChatBreeds: Array<{ name: string; value: number; color: string }>;\r\n  recentClients: Array<{\r\n    id: number;\r\n    name: string;\r\n    phone: string;\r\n    Chats: number;\r\n    lastVisit: string;\r\n  }>;\r\n}\r\n\r\nexport interface ConversationMetrics {\r\n  totalConversations: number;\r\n  responseRate: number;\r\n  totalRespondidas: number;\r\n  avgResponseTime: number;\r\n  conversionRate: number;\r\n  avgClosingTime: number;\r\n  avgResponseStartTime: number; // Nova m├®trica em minutos\r\n  conversationData: Array<{\r\n    date: string;\r\n    respondidas: number;\r\n    naoRespondidas: number;\r\n  }>;\r\n  funnelData: Array<{ name: string; value: number; percentage: number }>;\r\n  conversionByTimeData: Array<{\r\n    day: string;\r\n    morning: number;\r\n    afternoon: number;\r\n    evening: number;\r\n  }>;\r\n  leadsAverageByTimeData: Array<{\r\n    day: string;\r\n    morning: number;\r\n    afternoon: number;\r\n    evening: number;\r\n  }>; // Nova m├®trica\r\n  leadsData: Array<{\r\n    id: string;\r\n    name: string;\r\n    lastContact: string;\r\n    status: string;\r\n    value: number;\r\n  }>;\r\n  secondaryResponseRate: number;\r\n  totalSecondaryResponses: number;\r\n  negotiatedValue: number;\r\n  averageNegotiatedValue: number;\r\n  totalNegotiatingValue: number;\r\n  previousPeriodValue: number;\r\n  leadsBySource: Array<{ name: string; value: number; color: string }>;\r\n  leadsOverTime: Array<{ month: string; clients: number; leads: number }>;\r\n  leadsByArrivalFunnel: Array<{\r\n    name: string;\r\n    value: number;\r\n    percentage: number;\r\n    color: string;\r\n  }>;\r\n  isStale: boolean;\r\n}\r\n\r\nexport interface UTMMetrics {\r\n  totalCampaigns: number;\r\n  totalLeads: number;\r\n  conversionRate: number;\r\n  campaignData: Array<{\r\n    name: string;\r\n    leads: number;\r\n    conversions: number;\r\n    value: number;\r\n  }>;\r\n  sourceData: Array<{ name: string; leads: number; conversions: number }>;\r\n  deviceData: Array<{ name: string; value: number }>;\r\n  geoData: Array<{ location: string; leads: number; conversions: number }>;\r\n  timeToConversion: {\r\n    average: number;\r\n    median: number;\r\n    min: number;\r\n    max: number;\r\n  };\r\n  topCampaigns: Array<{\r\n    campaign: string;\r\n    count: number;\r\n    conversions: number;\r\n    value: number;\r\n    ctr: number;\r\n    roas: number;\r\n  }>;\r\n  recentTracking: Array<any>; // simplified\r\n  isStale: boolean;\r\n}\r\n\r\nexport const mockClientStats: ClientStats = {\r\n  totalClients: 120,\r\n  totalChats: 250,\r\n  newClientsThisMonth: 15,\r\n  monthlyGrowth: [\r\n    { month: \"Jan\", clients: 8 },\r\n    { month: \"Fev\", clients: 10 },\r\n    { month: \"Mar\", clients: 12 },\r\n    { month: \"Abr\", clients: 14 },\r\n    { month: \"Mai\", clients: 11 },\r\n    { month: \"Jun\", clients: 9 },\r\n    { month: \"Jul\", clients: 10 },\r\n    { month: \"Ago\", clients: 8 },\r\n    { month: \"Set\", clients: 12 },\r\n    { month: \"Out\", clients: 7 },\r\n    { month: \"Nov\", clients: 6 },\r\n    { month: \"Dez\", clients: 13 },\r\n  ],\r\n  ChatBreeds: [\r\n    { name: \"Labrador\", value: 10, color: \"#8B5CF6\" },\r\n    { name: \"Pug\", value: 7, color: \"#EC4899\" },\r\n    { name: \"Vira-lata\", value: 5, color: \"#10B981\" },\r\n  ],\r\n  recentClients: [\r\n    {\r\n      id: 1,\r\n      name: \"Jo├úo Silva\",\r\n      phone: \"(11) 98765-4321\",\r\n      Chats: 1,\r\n      lastVisit: \"01/04/2024\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Maria Oliveira\",\r\n      phone: \"(11) 91234-5678\",\r\n      Chats: 1,\r\n      lastVisit: \"05/04/2024\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Pedro Santos\",\r\n      phone: \"(11) 99876-5432\",\r\n      Chats: 2,\r\n      lastVisit: \"08/04/2024\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport const mockConversationMetrics: ConversationMetrics = {\r\n  totalConversations: 340,\r\n  responseRate: 85,\r\n  totalRespondidas: 289,\r\n  avgResponseTime: 2,\r\n  conversionRate: 30,\r\n  avgClosingTime: 5,\r\n  avgResponseStartTime: 45, // 45 minutos para primeira resposta\r\n  conversationData: [\r\n    { date: \"Seg\", respondidas: 40, naoRespondidas: 5 },\r\n    { date: \"Ter\", respondidas: 45, naoRespondidas: 8 },\r\n    { date: \"Qua\", respondidas: 50, naoRespondidas: 9 },\r\n    { date: \"Qui\", respondidas: 55, naoRespondidas: 12 },\r\n    { date: \"Sex\", respondidas: 60, naoRespondidas: 10 },\r\n    { date: \"S├íb\", respondidas: 25, naoRespondidas: 6 },\r\n    { date: \"Dom\", respondidas: 14, naoRespondidas: 1 },\r\n  ],\r\n  funnelData: [\r\n    { name: \"Entraram\", value: 340, percentage: 100 },\r\n    { name: \"Contato\", value: 250, percentage: 74 },\r\n    { name: \"Reuni├úo\", value: 150, percentage: 44 },\r\n    { name: \"Fechamento\", value: 100, percentage: 29 },\r\n  ],\r\n  conversionByTimeData: [\r\n    { day: \"Segunda\", morning: 12, afternoon: 18, evening: 5 },\r\n    { day: \"Ter├ºa\", morning: 14, afternoon: 20, evening: 6 },\r\n    { day: \"Quarta\", morning: 16, afternoon: 22, evening: 7 },\r\n    { day: \"Quinta\", morning: 18, afternoon: 24, evening: 8 },\r\n    { day: \"Sexta\", morning: 20, afternoon: 26, evening: 9 },\r\n    { day: \"S├íbado\", morning: 10, afternoon: 15, evening: 12 },\r\n    { day: \"Domingo\", morning: 8, afternoon: 10, evening: 7 },\r\n  ],\r\n  leadsAverageByTimeData: [\r\n    { day: \"Segunda\", morning: 8, afternoon: 15, evening: 4 },\r\n    { day: \"Ter├ºa\", morning: 10, afternoon: 18, evening: 5 },\r\n    { day: \"Quarta\", morning: 12, afternoon: 20, evening: 6 },\r\n    { day: \"Quinta\", morning: 14, afternoon: 22, evening: 7 },\r\n    { day: \"Sexta\", morning: 16, afternoon: 24, evening: 8 },\r\n    { day: \"S├íbado\", morning: 6, afternoon: 12, evening: 10 },\r\n    { day: \"Domingo\", morning: 4, afternoon: 8, evening: 6 },\r\n  ],\r\n  leadsData: [\r\n    {\r\n      id: \"1\",\r\n      name: \"Empresa Alpha\",\r\n      lastContact: \"01/04/2024\",\r\n      status: \"Contato Feito\",\r\n      value: 0,\r\n    },\r\n    {\r\n      id: \"2\",\r\n      name: \"Empresa Beta\",\r\n      lastContact: \"03/04/2024\",\r\n      status: \"Reuni├úo\",\r\n      value: 0,\r\n    },\r\n    {\r\n      id: \"3\",\r\n      name: \"Empresa Gamma\",\r\n      lastContact: \"07/04/2024\",\r\n      status: \"Fechamento\",\r\n      value: 0,\r\n    },\r\n  ],\r\n  secondaryResponseRate: 70,\r\n  totalSecondaryResponses: 200,\r\n  negotiatedValue: 50000,\r\n  averageNegotiatedValue: 16666,\r\n  totalNegotiatingValue: 125000,\r\n  previousPeriodValue: 42000,\r\n  leadsBySource: [\r\n    { name: \"Facebook\", value: 80, color: \"#3B82F6\" },\r\n    { name: \"Google\", value: 60, color: \"#10B981\" },\r\n    { name: \"Indica├º├úo\", value: 30, color: \"#F59E0B\" },\r\n  ],\r\n  leadsOverTime: [\r\n    { month: \"Jan\", clients: 5, leads: 15 },\r\n    { month: \"Fev\", clients: 6, leads: 18 },\r\n    { month: \"Mar\", clients: 7, leads: 20 },\r\n    { month: \"Abr\", clients: 8, leads: 22 },\r\n    { month: \"Mai\", clients: 9, leads: 24 },\r\n    { month: \"Jun\", clients: 10, leads: 26 },\r\n  ],\r\n  leadsByArrivalFunnel: [\r\n    { name: \"├Ültimas 24h\", value: 20, percentage: 20, color: \"#10B981\" },\r\n    { name: \"├Ültimos 7 dias\", value: 40, percentage: 40, color: \"#3B82F6\" },\r\n    { name: \"├Ültimos 30 dias\", value: 30, percentage: 30, color: \"#8B5CF6\" },\r\n    { name: \"Mais antigos\", value: 10, percentage: 10, color: \"#F59E0B\" },\r\n  ],\r\n  isStale: false,\r\n};\r\n\r\nexport const mockUTMMetrics: UTMMetrics = {\r\n  totalCampaigns: 5,\r\n  totalLeads: 60,\r\n  conversionRate: 25,\r\n  campaignData: [\r\n    { name: \"verao2024\", leads: 30, conversions: 10, value: 5000 },\r\n    { name: \"inverno2024\", leads: 20, conversions: 5, value: 3000 },\r\n    { name: \"black_friday\", leads: 10, conversions: 5, value: 4000 },\r\n  ],\r\n  sourceData: [\r\n    { name: \"facebook\", leads: 25, conversions: 8 },\r\n    { name: \"google\", leads: 20, conversions: 7 },\r\n    { name: \"instagram\", leads: 15, conversions: 5 },\r\n  ],\r\n  deviceData: [\r\n    { name: \"mobile\", value: 35 },\r\n    { name: \"desktop\", value: 25 },\r\n  ],\r\n  geoData: [\r\n    { location: \"S├úo Paulo, BR\", leads: 20, conversions: 5 },\r\n    { location: \"Rio de Janeiro, BR\", leads: 15, conversions: 4 },\r\n    { location: \"Belo Horizonte, BR\", leads: 10, conversions: 3 },\r\n  ],\r\n  timeToConversion: { average: 24, median: 20, min: 5, max: 72 },\r\n  topCampaigns: [\r\n    {\r\n      campaign: \"verao2024\",\r\n      count: 30,\r\n      conversions: 10,\r\n      value: 5000,\r\n      ctr: 3,\r\n      roas: 400,\r\n    },\r\n    {\r\n      campaign: \"inverno2024\",\r\n      count: 20,\r\n      conversions: 5,\r\n      value: 3000,\r\n      ctr: 2.5,\r\n      roas: 250,\r\n    },\r\n    {\r\n      campaign: \"black_friday\",\r\n      count: 10,\r\n      conversions: 5,\r\n      value: 4000,\r\n      ctr: 5,\r\n      roas: 600,\r\n    },\r\n  ],\r\n  recentTracking: [\r\n    {\r\n      id: \"1\",\r\n      lead_id: \"L1\",\r\n      utm_source: \"facebook\",\r\n      utm_medium: \"cpc\",\r\n      utm_campaign: \"verao2024\",\r\n      utm_term: \"marketing\",\r\n      utm_content: \"anuncio1\",\r\n      utm_created_at: new Date().toISOString(),\r\n      utm_conversion: true,\r\n      utm_conversion_value: 500,\r\n      utm_conversion_stage: \"Fechamento\",\r\n      landing_page: \"/\",\r\n      device_type: \"mobile\",\r\n    },\r\n  ],\r\n  isStale: false,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\mocks\\scheduleMock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\AIStore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ChatsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ChatsDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ClientsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Evolution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\KnowledgeManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\MetricsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\MetricsDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Pricing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Schedule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\Subscription.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\ThemeSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\pages\\UserManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2448,2451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2448,2451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { useUsers } from '@/hooks/useUsers';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { UserPlus, Edit, Trash2, Users, Activity, Calendar } from 'lucide-react';\r\nimport { UserFormData } from '@/types/user';\r\n\r\nconst UserManagement = () => {\r\n  const { users, loading, addUser, updateUser, deleteUser } = useUsers();\r\n  const { toast } = useToast();\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<any>(null);\r\n  const [formData, setFormData] = useState<UserFormData>({\r\n    email: '',\r\n    password: '',\r\n    full_name: '',\r\n    role: 'user',\r\n    ai_access: []\r\n  });\r\n\r\n  const handleAddUser = async () => {\r\n    const success = await addUser(formData);\r\n    if (success) {\r\n      setIsAddDialogOpen(false);\r\n      setFormData({\r\n        email: '',\r\n        password: '',\r\n        full_name: '',\r\n        role: 'user',\r\n        ai_access: []\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditUser = async () => {\r\n    if (!selectedUser) return;\r\n    \r\n    const success = await updateUser(selectedUser.id, {\r\n      full_name: formData.full_name,\r\n      role: formData.role,\r\n      ai_access: formData.ai_access\r\n    });\r\n    \r\n    if (success) {\r\n      setIsEditDialogOpen(false);\r\n      setSelectedUser(null);\r\n      setFormData({\r\n        email: '',\r\n        password: '',\r\n        full_name: '',\r\n        role: 'user',\r\n        ai_access: []\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteUser = async (userId: string) => {\r\n    if (window.confirm('Tem certeza que deseja excluir este usu├írio?')) {\r\n      await deleteUser(userId);\r\n    }\r\n  };\r\n\r\n  const openEditDialog = (user: any) => {\r\n    setSelectedUser(user);\r\n    setFormData({\r\n      email: user.email,\r\n      password: '',\r\n      full_name: user.full_name || '',\r\n      role: user.role,\r\n      ai_access: user.ai_access || []\r\n    });\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const getRoleBadgeColor = (role: string) => {\r\n    switch (role) {\r\n      case 'admin':\r\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\r\n      case 'user':\r\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR');\r\n  };\r\n\r\n  const activeUsers = users.filter(u => u.last_sign_in_at);\r\n  const totalUsers = users.length;\r\n  const adminUsers = users.filter(u => u.role === 'admin').length;\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n            Gerenciamento de Usu├írios\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Gerencie usu├írios, permiss├Áes e relat├│rios de uso\r\n          </p>\r\n        </div>\r\n        \r\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n          <DialogTrigger asChild>\r\n            <Button className=\"flex items-center gap-2\">\r\n              <UserPlus className=\"h-4 w-4\" />\r\n              Adicionar Usu├írio\r\n            </Button>\r\n          </DialogTrigger>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>Adicionar Novo Usu├írio</DialogTitle>\r\n            </DialogHeader>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(e) => setFormData({...formData, email: e.target.value})}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"password\">Senha</Label>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  value={formData.password}\r\n                  onChange={(e) => setFormData({...formData, password: e.target.value})}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"full_name\">Nome Completo</Label>\r\n                <Input\r\n                  id=\"full_name\"\r\n                  value={formData.full_name}\r\n                  onChange={(e) => setFormData({...formData, full_name: e.target.value})}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"role\">Fun├º├úo</Label>\r\n                <Select \r\n                  value={formData.role} \r\n                  onValueChange={(value: 'admin' | 'user') => setFormData({...formData, role: value})}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione uma fun├º├úo\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"user\">Usu├írio</SelectItem>\r\n                    <SelectItem value=\"admin\">Administrador</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <Button onClick={handleAddUser} className=\"flex-1\">\r\n                  Adicionar\r\n                </Button>\r\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} className=\"flex-1\">\r\n                  Cancelar\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"overview\">Vis├úo Geral</TabsTrigger>\r\n          <TabsTrigger value=\"users\">Usu├írios</TabsTrigger>\r\n          <TabsTrigger value=\"usage\">Relat├│rio de Uso</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Total de Usu├írios</CardTitle>\r\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{totalUsers}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  {activeUsers.length} ativos\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Administradores</CardTitle>\r\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{adminUsers}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Com acesso total\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">├Ültimo Acesso</CardTitle>\r\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">Hoje</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  M├®dia de atividade\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"users\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Lista de Usu├írios</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {loading ? (\r\n                <div className=\"text-center py-8\">Carregando usu├írios...</div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Nome</TableHead>\r\n                      <TableHead>Email</TableHead>\r\n                      <TableHead>Fun├º├úo</TableHead>\r\n                      <TableHead>Criado em</TableHead>\r\n                      <TableHead>├Ültimo Acesso</TableHead>\r\n                      <TableHead className=\"text-right\">A├º├Áes</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {users.map((user) => (\r\n                      <TableRow key={user.id}>\r\n                        <TableCell className=\"font-medium\">\r\n                          {user.full_name || 'N/A'}\r\n                        </TableCell>\r\n                        <TableCell>{user.email}</TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getRoleBadgeColor(user.role)}>\r\n                            {user.role === 'admin' ? 'Admin' : 'Usu├írio'}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>{formatDate(user.created_at)}</TableCell>\r\n                        <TableCell>\r\n                          {user.last_sign_in_at ? formatDate(user.last_sign_in_at) : 'Nunca'}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          <div className=\"flex items-center justify-end gap-2\">\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => openEditDialog(user)}\r\n                            >\r\n                              <Edit className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteUser(user.id)}\r\n                              className=\"text-red-600 hover:text-red-800\"\r\n                            >\r\n                              <Trash2 className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"usage\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Relat├│rio de Uso do Sistema</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">Usu├írios Ativos (├Ültimo m├¬s)</h4>\r\n                    <p className=\"text-2xl font-bold\">{activeUsers.length}</p>\r\n                  </div>\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">Total de Conversas</h4>\r\n                    <p className=\"text-2xl font-bold\">0</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">\r\n                  * Dados baseados na atividade dos ├║ltimos 30 dias\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Edit User Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Editar Usu├írio</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"edit_email\">Email</Label>\r\n              <Input\r\n                id=\"edit_email\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                disabled\r\n                className=\"bg-gray-100 dark:bg-gray-800\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"edit_full_name\">Nome Completo</Label>\r\n              <Input\r\n                id=\"edit_full_name\"\r\n                value={formData.full_name}\r\n                onChange={(e) => setFormData({...formData, full_name: e.target.value})}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"edit_role\">Fun├º├úo</Label>\r\n              <Select \r\n                value={formData.role} \r\n                onValueChange={(value: 'admin' | 'user') => setFormData({...formData, role: value})}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione uma fun├º├úo\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"user\">Usu├írio</SelectItem>\r\n                  <SelectItem value=\"admin\">Administrador</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button onClick={handleEditUser} className=\"flex-1\">\r\n                Salvar\r\n              </Button>\r\n              <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} className=\"flex-1\">\r\n                Cancelar\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\providers\\QueryProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1002,1005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1002,1005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from '../lib/queryClient';\n\ninterface QueryProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Provider do React Query para gerenciamento de estado de servidor\n * \n * Features:\n * - Cache inteligente configurado\n * - DevTools para desenvolvimento\n * - Error boundaries integrados\n * - Performance otimizada\n */\nexport const QueryProvider: React.FC<QueryProviderProps> = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\n/**\n * Hook para acessar o QueryClient em qualquer lugar da aplica├º├úo\n */\nexport { queryClient };\n\n/**\n * Error Boundary espec├¡fico para React Query\n */\nexport class QueryErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback?: React.ComponentType<{ error: Error; resetError: () => void }> },\n  { hasError: boolean; error: Error | null }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Query Error Boundary caught an error:', error, errorInfo);\n    \n    // Log para monitoramento em produ├º├úo\n    if (process.env.NODE_ENV === 'production') {\n      // Aqui voc├¬ pode integrar com servi├ºos como Sentry\n      console.error('Production Query Error:', {\n        error: error.message,\n        stack: error.stack,\n        componentStack: errorInfo.componentStack,\n      });\n    }\n  }\n\n  resetError = () => {\n    this.setState({ hasError: false, error: null });\n    // Limpar cache corrompido se necess├írio\n    queryClient.clear();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback;\n      \n      if (FallbackComponent) {\n        return <FallbackComponent error={this.state.error!} resetError={this.resetError} />;\n      }\n      \n      return (\n        <div className=\"flex flex-col items-center justify-center min-h-[200px] p-6 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"text-red-600 text-lg font-semibold mb-2\">\n            Erro no carregamento dos dados\n          </div>\n          <div className=\"text-red-500 text-sm mb-4 text-center\">\n            {this.state.error?.message || 'Ocorreu um erro inesperado'}\n          </div>\n          <button\n            onClick={this.resetError}\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          >\n            Tentar Novamente\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * Wrapper que combina QueryProvider com ErrorBoundary\n */\nexport const QueryProviderWithErrorBoundary: React.FC<QueryProviderProps> = ({ children }) => {\n  return (\n    <QueryErrorBoundary>\n      <QueryProvider>\n        {children}\n      </QueryProvider>\n    </QueryErrorBoundary>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\scripts\\seedPersonalityTemplates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2473,2476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2473,2476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { aiPersonalityTemplates } from \"@/data/aiPersonalityTemplates\";\n\nexport const seedPersonalityTemplates = async () => {\n  try {\n    console.log('Iniciando inser├º├úo dos templates de personalidade...');\n    \n    // Primeiro, vamos verificar se j├í existem templates\n    const { data: existingTemplates, error: fetchError } = await supabase\n      .from('ai_personalities')\n      .select('name')\n      .in('name', aiPersonalityTemplates.map(t => t.name));\n    \n    if (fetchError) {\n      console.error('Erro ao verificar templates existentes:', fetchError);\n      return;\n    }\n    \n    const existingNames = existingTemplates?.map(t => t.name) || [];\n    const templatesToInsert = aiPersonalityTemplates.filter(\n      template => !existingNames.includes(template.name)\n    );\n    \n    if (templatesToInsert.length === 0) {\n      console.log('Todos os templates j├í existem no banco de dados.');\n      return;\n    }\n    \n    console.log(`Inserindo ${templatesToInsert.length} novos templates...`);\n    \n    // Preparar dados para inser├º├úo\n    const templatesData = templatesToInsert.map(template => ({\n      name: template.name,\n      description: template.description,\n      personality_type: template.settings.personality_type,\n      tone: template.settings.tone,\n      temperature: template.settings.temperature,\n      greeting_message: template.settings.greeting_message,\n      custom_instructions: template.settings.custom_instructions,\n      max_tokens: template.settings.max_tokens,\n      response_style: template.settings.response_style,\n      language: template.settings.language,\n      is_active: true,\n      user_id: '00000000-0000-0000-0000-000000000000', // Template user ID\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    \n    // Inserir templates no banco\n    const { data, error } = await supabase\n      .from('ai_personalities')\n      .insert(templatesData)\n      .select();\n    \n    if (error) {\n      console.error('Erro ao inserir templates:', error);\n      return;\n    }\n    \n    console.log(`Ô£à ${data?.length || 0} templates inseridos com sucesso!`);\n    console.log('Templates inseridos:', data?.map(t => t.name));\n    \n  } catch (error) {\n    console.error('Erro geral ao inserir templates:', error);\n  }\n};\n\n// Fun├º├úo para executar o seeding\nif (typeof window !== 'undefined') {\n  // Executar apenas no browser para debug\n  (window as any).seedPersonalityTemplates = seedPersonalityTemplates;\n  console.log('Fun├º├úo seedPersonalityTemplates dispon├¡vel no console do browser');\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\ai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[669,672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[669,672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AI-related type definitions\r\n\r\nexport interface AIMessage {\r\n  id: string;\r\n  content: string;\r\n  role?: 'assistant' | 'user';\r\n  timestamp?: string;\r\n  category?: string;\r\n  name?: string;\r\n  variables?: string[];\r\n  context?: string;\r\n  is_active?: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface AIStage {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  stage_order?: number;\r\n  order?: number;\r\n  order_position?: number; // Backward compatibility\r\n  is_active?: boolean;\r\n  personality_id?: string;\r\n  actions?: any[];\r\n  trigger?: string;\r\n  next_stage?: string;\r\n  next_stage_id?: string;\r\n  trigger_conditions?: Record<string, any>;\r\n  timeout_minutes?: number;\r\n  is_final_stage?: boolean;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n}\r\n\r\nexport interface AIPersonality {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  personality_type: string;\r\n  system_prompt?: string;\r\n  greeting_message?: string;\r\n  response_style?: string;\r\n  tone?: string;\r\n  language?: string;\r\n  temperature?: number;\r\n  max_tokens?: number;\r\n  is_active?: boolean;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n  custom_instructions?: string;\r\n  fallback_responses?: any;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\calendar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\chat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[959,962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[959,962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Message {\r\n  id: string;\r\n  content: string;\r\n  sender: \"user\" | \"bot\";\r\n  timestamp: Date;\r\n  type?: \"text\" | \"image\" | \"file\";\r\n}\r\n\r\nexport interface Conversation {\r\n  id: string;\r\n  name: string;\r\n  lastMessage: string;\r\n  time: string;\r\n  unread: number;\r\n  avatar?: string;\r\n  phone: string;\r\n  email?: string;\r\n  address?: string;\r\n  clientName?: string;\r\n  clientSize?: string;\r\n  clientType?: string;\r\n  sessionId: string;\r\n}\r\n\r\n// Add Chat interface that was missing\r\nexport interface Chat {\r\n  id: string;\r\n  client: {\r\n    id: string;\r\n    name: string;\r\n    email?: string;\r\n  };\r\n  conversations: Conversation[];\r\n}\r\n\r\nexport interface Client {\r\n  id: number;\r\n  nome: string;\r\n  telefone: string;\r\n  email?: string;\r\n  client_name?: string;\r\n  client_size?: string;\r\n  client_type?: string;\r\n  session_id: string;\r\n  created_at?: string;\r\n}\r\n\r\nexport interface N8nChatHistory {\r\n  id: number;\r\n  session_id: string;\r\n  message: any;\r\n  data?: string;\r\n  hora?: string;\r\n}\r\n\r\nexport interface ChatMessage {\r\n  id?: number | string;\r\n  conversation_id?: string;\r\n  phone?: string;\r\n  user_message?: string;\r\n  bot_message?: string;\r\n  message_type?: string;\r\n  created_at?: string;\r\n  active?: boolean;\r\n  data?: string;\r\n  // Add properties that components expect\r\n  content?: string;\r\n  role?: \"user\" | \"assistant\" | \"human\" | \"ai\" | \"unknown\";\r\n  type?: \"text\" | \"image\" | \"file\" | \"human\" | \"ai\";\r\n  timestamp?: string;\r\n  sender?: {\r\n    id: string;\r\n    name: string;\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1832,1835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1832,1835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nexport interface Contact {\r\n  id: string;\r\n  name: string;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  address?: string;\r\n  \r\n  // Cliente info\r\n  clientName?: string | null;\r\n  client_name?: string | null;\r\n  clientSize?: string | null;\r\n  clientType?: string | null;\r\n  cpfCnpj?: string | null;\r\n  asaasCustomerId?: string | null;\r\n  \r\n  // Status e est├ígio\r\n  status?: \"Active\" | \"Inactive\" | string;\r\n  kanbanStage?: string; // Optional - derived from kanban_stage_id\r\n  kanban_stage_id?: string; // Database field name\r\n  \r\n  // Dados financeiros\r\n  sales?: number;\r\n  budget?: number;\r\n  lead_value?: number;\r\n  paymentMethod?: string;\r\n  payment?: string;\r\n  \r\n  // Comunica├º├úo\r\n  notes?: string;\r\n  lastContact?: string;\r\n  lastMessage?: string;\r\n  lastMessageTime?: string;\r\n  unreadCount?: number;\r\n  \r\n  // Session/Chat\r\n  sessionId?: string;\r\n  session_id?: string;\r\n  \r\n  // Tags e categoriza├º├úo\r\n  tags?: string[];\r\n  responsibleUser?: string;\r\n  clientSector?: string;\r\n  clientObjective?: string;\r\n  lossReason?: string;\r\n  \r\n  // Contratos\r\n  contractNumber?: string;\r\n  contractDate?: string;\r\n  uploadedFiles?: string[];\r\n  \r\n  // Lead data\r\n  conversion_probability?: number;\r\n  lead_source?: string;\r\n  last_interaction?: string;\r\n  \r\n  // Company data\r\n  company?: string;\r\n  position?: string;\r\n  \r\n  // Timestamps\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  \r\n  // Est├ígio de consulta\r\n  consultationStage?:\r\n    | \"Nova consulta\"\r\n    | \"Qualificado\"\r\n    | \"Chamada agendada\"\r\n    | \"Preparando proposta\"\r\n    | \"Proposta enviada\"\r\n    | \"Acompanhamento\"\r\n    | \"Negocia├º├úo\"\r\n    | \"Fatura enviada\"\r\n    | \"Fatura paga ÔÇô ganho\"\r\n    | \"Projeto cancelado ÔÇô perdido\";\r\n    \r\n  // Campos personalizados\r\n  customValues?: CustomFieldValue[];\r\n  \r\n  // Outros campos din├ómicos\r\n  payments?: any;\r\n}\r\n\r\nexport interface CustomFieldValue {\r\n  field_id: string;\r\n  field_value: string | string[] | number | boolean | null;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\customFields.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[682,685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[682,685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1138,1141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1138,1141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1158,1161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1158,1161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CustomField {\r\n  id: string;\r\n  field_name: string;\r\n  field_type: \"text\" | \"single_select\" | \"multi_select\";\r\n  field_options?: string[] | null;\r\n  is_required: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  visibility_settings?: {\r\n    visible_in_client_info?: boolean;\r\n    visible_in_tabs?: {\r\n      basic?: boolean;\r\n      commercial?: boolean;\r\n      utm?: boolean;\r\n      docs?: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface ClientCustomValue {\r\n  id: string;\r\n  client_id: string;\r\n  field_id: string;\r\n  field_value: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface CustomFieldWithValue extends CustomField {\r\n  value?: any;\r\n  validationRules?: ValidationRule[];\r\n}\r\n\r\nexport interface ValidationRule {\r\n  id: string;\r\n  field_id: string;\r\n  rule_type:\r\n    | \"required\"\r\n    | \"min_length\"\r\n    | \"max_length\"\r\n    | \"pattern\"\r\n    | \"min_value\"\r\n    | \"max_value\";\r\n  rule_value?: string;\r\n  error_message: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface AuditLogEntry {\r\n  id: string;\r\n  client_id: string;\r\n  field_id: string;\r\n  old_value?: any;\r\n  new_value?: any;\r\n  changed_by?: string;\r\n  change_type: \"create\" | \"update\" | \"delete\";\r\n  created_at: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\event.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\eventForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\filters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[687,690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[687,690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\r\n// TIPOS PADRONIZADOS PARA FILTROS\r\n// =====================================================\r\n\r\nexport interface DateRange {\r\n  from: Date;\r\n  to: Date;\r\n}\r\n\r\nexport interface MetricsFilterState {\r\n  selectedDate?: Date | null;\r\n  selectedDateRange?: DateRange | null;\r\n  selectedPeriod?: string;\r\n}\r\n\r\nexport interface PeriodOption {\r\n  label: string;\r\n  value: string;\r\n  getRange: () => DateRange;\r\n}\r\n\r\nexport interface CalendarProps {\r\n  selected?: Date | DateRange;\r\n  onSelect?: (date: Date | DateRange | undefined) => void;\r\n  mode?: \"single\" | \"range\";\r\n  numberOfMonths?: number;\r\n  initialFocus?: boolean;\r\n  locale?: any;\r\n  disabled?: (date: Date) => boolean;\r\n  className?: string;\r\n}\r\n\r\n// Tipos para status de eventos\r\nexport type ScheduleEventStatus = \"scheduled\" | \"completed\" | \"cancelled\" | \"rescheduled\";\r\nexport type CalendarViewType = \"mes\" | \"semana\" | \"dia\" | \"lista\";\r\n\r\n// Interface padronizada para eventos de agenda\r\nexport interface StandardScheduleEvent {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  date: string;\r\n  status: ScheduleEventStatus;\r\n  clientName: string;\r\n  clientPhone?: string;\r\n  location?: string;\r\n  type?: string;\r\n  notes?: string;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\fixes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[806,809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[806,809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[895,898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[895,898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1676,1679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1676,1679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1695,1698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1695,1698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1806,1809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1806,1809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive type fixes\r\n\r\n// Product types\r\nexport interface ProductFormData {\r\n  name: string;\r\n  price: number;\r\n  has_promotion: boolean;\r\n  benefits?: string[];\r\n  objections?: string[];\r\n  has_combo?: boolean;\r\n  has_upgrade?: boolean;\r\n  description?: string;\r\n  category?: string;\r\n}\r\n\r\n// Funnel data with all required properties\r\nexport interface FunnelDataComplete {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n  created_at?: string;\r\n}\r\n\r\n// UTM metrics with all properties\r\nexport interface UTMMetricsComplete {\r\n  id: string;\r\n  total_clients: number;\r\n  total_chats: number;\r\n  conversion_rate: number;\r\n  negotiated_value: number;\r\n  new_clients_this_month: number;\r\n  response_rate: number;\r\n  total_campaigns: number;\r\n  [key: string]: any;\r\n}\r\n\r\n// API Response with error\r\nexport interface ApiResponseWithError {\r\n  data?: any;\r\n  success: boolean;\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\n// Leads and metrics types\r\nexport interface LeadsAverageByTimeDataComplete {\r\n  date: string;\r\n  day: number;\r\n  morning: number;\r\n  afternoon: number;\r\n  evening: number;\r\n}\r\n\r\nexport interface ClientWithMetrics {\r\n  id: string;\r\n  name: string;\r\n  marketingClients: number;\r\n  lastVisit: string;\r\n}\r\n\r\nexport interface LeadComplete {\r\n  id: string;\r\n  name: string;\r\n  lastContact: string;\r\n  status: string;\r\n  email?: string;\r\n  phone?: string;\r\n}\r\n\r\n// Hook return types with proper structure\r\nexport interface QueryHookReturnComplete<T> {\r\n  data: T;\r\n  isLoading: boolean;\r\n  loading: boolean;\r\n  error?: string | Error;\r\n  refetch?: () => void;\r\n}\r\n\r\nexport interface ProductHookReturn {\r\n  products: any[];\r\n  combos?: any[];\r\n  loading: boolean;\r\n  refreshing?: boolean;\r\n  error?: string | null;\r\n  isLoading: boolean;\r\n  data: any[];\r\n  fetchProducts?: () => Promise<void>;\r\n  refreshProducts?: () => Promise<void>;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\memory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1114,1117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1114,1117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1273,1276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1273,1276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1649,1652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1649,1652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1741,1744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1741,1744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2020,2023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2020,2023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Defini├º├úo de tipos para o sistema de mem├│ria da IA\r\n\r\n/**\r\n * Tipos de mem├│ria suportados pelo sistema\r\n */\r\nexport type MemoryType = \"contextual\" | \"semantic\" | \"episodic\";\r\n\r\n/**\r\n * N├¡veis de mem├│ria para diferentes dura├º├Áes\r\n */\r\nexport type MemoryLevel = \"short_term\" | \"medium_term\" | \"long_term\";\r\n\r\n/**\r\n * Interface para entidades na mem├│ria sem├óntica\r\n */\r\nexport interface SemanticEntity {\r\n  name: string;\r\n  type: string;\r\n  attributes?: Record<string, any>;\r\n  confidence?: number;\r\n}\r\n\r\n/**\r\n * Interface para relacionamentos entre entidades\r\n */\r\nexport interface EntityRelationship {\r\n  source: string;\r\n  target: string;\r\n  type: string;\r\n  relation?: string; // Backward compatibility\r\n  attributes?: Record<string, any>;\r\n  confidence?: number;\r\n}\r\n\r\n/**\r\n * Interface para mem├│ria epis├│dica (sequ├¬ncia de eventos)\r\n */\r\nexport interface EpisodicMemory {\r\n  id: number;\r\n  date: string;\r\n  description: string;\r\n  events?: Array<{\r\n    action: string;\r\n    timestamp: string;\r\n    actors: string[];\r\n    context?: Record<string, any>;\r\n  }>;\r\n  summary?: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Interface principal para a tabela n8n_chat_memory\r\n */\r\nexport interface N8nChatMemory {\r\n  id: number;\r\n  session_id: string;\r\n  message: any;\r\n  data?: string;\r\n  hora?: string;\r\n  created_at?: string;\r\n\r\n  // Novos campos para tipos de mem├│ria\r\n  memory_type: MemoryType; // Required for Memory interface compatibility\r\n  memory_level?: MemoryLevel;\r\n  expiration_date?: string;\r\n  importance?: number; // 1-10\r\n  entities?: SemanticEntity[];\r\n  relationships?: EntityRelationship[];\r\n  context?: Record<string, any>;\r\n  metadata?: {\r\n    tags?: string[];\r\n    categories?: string[];\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n/**\r\n * Interface unificada para sistemas de mem├│ria\r\n */\r\nexport interface Memory {\r\n  id: number;\r\n  message: string;\r\n  memory_type: MemoryType;\r\n  created_at: string;\r\n  importance?: number;\r\n  entities?: Array<{ name: string }>;\r\n  context?: Record<string, any>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\pricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\product.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":413,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":413,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[13657,13659],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[13657,13659],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":414,"column":21,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":414,"endColumn":23,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[13682,13684],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[13682,13684],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\r\n// TIPOS TYPESCRIPT PARA SUPABASE DATABASE\r\n// Gerados automaticamente baseados no schema SQL\r\n// =====================================================\r\n\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json | undefined }\r\n  | Json[];\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      contacts: {\r\n        Row: {\r\n          id: string;\r\n          name: string;\r\n          email: string | null;\r\n          phone: string | null;\r\n          address: string | null;\r\n          client_name: string | null;\r\n          client_size: string | null;\r\n          client_type: string | null;\r\n          cpf_cnpj: string | null;\r\n          asaas_customer_id: string | null;\r\n          status: string;\r\n          notes: string | null;\r\n          last_contact: string | null;\r\n          kanban_stage: string | null;\r\n          last_message: string | null;\r\n          last_message_time: string | null;\r\n          unread_count: number | null;\r\n          session_id: string | null;\r\n          tags: string[] | null;\r\n          responsible_user: string | null;\r\n          sales: number | null;\r\n          client_sector: string | null;\r\n          budget: number | null;\r\n          payment_method: string | null;\r\n          client_objective: string | null;\r\n          loss_reason: string | null;\r\n          contract_number: string | null;\r\n          contract_date: string | null;\r\n          payment: string | null;\r\n          uploaded_files: string[] | null;\r\n          consultation_stage: string | null;\r\n          custom_values: Json | null;\r\n          created_at: string | null;\r\n          updated_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          name: string;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          client_name?: string | null;\r\n          client_size?: string | null;\r\n          client_type?: string | null;\r\n          cpf_cnpj?: string | null;\r\n          asaas_customer_id?: string | null;\r\n          status?: string;\r\n          notes?: string | null;\r\n          last_contact?: string | null;\r\n          kanban_stage?: string | null;\r\n          last_message?: string | null;\r\n          last_message_time?: string | null;\r\n          unread_count?: number | null;\r\n          session_id?: string | null;\r\n          tags?: string[] | null;\r\n          responsible_user?: string | null;\r\n          sales?: number | null;\r\n          client_sector?: string | null;\r\n          budget?: number | null;\r\n          payment_method?: string | null;\r\n          client_objective?: string | null;\r\n          loss_reason?: string | null;\r\n          contract_number?: string | null;\r\n          contract_date?: string | null;\r\n          payment?: string | null;\r\n          uploaded_files?: string[] | null;\r\n          consultation_stage?: string | null;\r\n          custom_values?: Json | null;\r\n          created_at?: string | null;\r\n          updated_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          client_name?: string | null;\r\n          client_size?: string | null;\r\n          client_type?: string | null;\r\n          cpf_cnpj?: string | null;\r\n          asaas_customer_id?: string | null;\r\n          status?: string;\r\n          notes?: string | null;\r\n          last_contact?: string | null;\r\n          kanban_stage?: string | null;\r\n          last_message?: string | null;\r\n          last_message_time?: string | null;\r\n          unread_count?: number | null;\r\n          session_id?: string | null;\r\n          tags?: string[] | null;\r\n          responsible_user?: string | null;\r\n          sales?: number | null;\r\n          client_sector?: string | null;\r\n          budget?: number | null;\r\n          payment_method?: string | null;\r\n          client_objective?: string | null;\r\n          loss_reason?: string | null;\r\n          contract_number?: string | null;\r\n          contract_date?: string | null;\r\n          payment?: string | null;\r\n          uploaded_files?: string[] | null;\r\n          consultation_stage?: string | null;\r\n          custom_values?: Json | null;\r\n          created_at?: string | null;\r\n          updated_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      client_stats: {\r\n        Row: {\r\n          id: string;\r\n          total_clients: number | null;\r\n          total_chats: number | null;\r\n          new_clients_this_month: number | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_clients?: number | null;\r\n          total_chats?: number | null;\r\n          new_clients_this_month?: number | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_clients?: number | null;\r\n          total_chats?: number | null;\r\n          new_clients_this_month?: number | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      conversation_metrics: {\r\n        Row: {\r\n          id: string;\r\n          total_conversations: number | null;\r\n          response_rate: number | null;\r\n          total_respondidas: number | null;\r\n          avg_response_time: number | null;\r\n          conversion_rate: number | null;\r\n          avg_closing_time: number | null;\r\n          avg_response_start_time: number | null;\r\n          secondary_response_rate: number | null;\r\n          total_secondary_responses: number | null;\r\n          negotiated_value: number | null;\r\n          average_negotiated_value: number | null;\r\n          total_negotiating_value: number | null;\r\n          previous_period_value: number | null;\r\n          is_stale: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_conversations?: number | null;\r\n          response_rate?: number | null;\r\n          total_respondidas?: number | null;\r\n          avg_response_time?: number | null;\r\n          conversion_rate?: number | null;\r\n          avg_closing_time?: number | null;\r\n          avg_response_start_time?: number | null;\r\n          secondary_response_rate?: number | null;\r\n          total_secondary_responses?: number | null;\r\n          negotiated_value?: number | null;\r\n          average_negotiated_value?: number | null;\r\n          total_negotiating_value?: number | null;\r\n          previous_period_value?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_conversations?: number | null;\r\n          response_rate?: number | null;\r\n          total_respondidas?: number | null;\r\n          avg_response_time?: number | null;\r\n          conversion_rate?: number | null;\r\n          avg_closing_time?: number | null;\r\n          avg_response_start_time?: number | null;\r\n          secondary_response_rate?: number | null;\r\n          total_secondary_responses?: number | null;\r\n          negotiated_value?: number | null;\r\n          average_negotiated_value?: number | null;\r\n          total_negotiating_value?: number | null;\r\n          previous_period_value?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      funnel_data: {\r\n        Row: {\r\n          id: string;\r\n          name: string | null;\r\n          value: number | null;\r\n          percentage: number | null;\r\n          color: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          name?: string | null;\r\n          value?: number | null;\r\n          percentage?: number | null;\r\n          color?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string | null;\r\n          value?: number | null;\r\n          percentage?: number | null;\r\n          color?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      ai_products: {\r\n        Row: {\r\n          id: string;\r\n          name: string;\r\n          description: string | null;\r\n          icon: string | null;\r\n          image: string | null;\r\n          features: string[] | null;\r\n          category: string | null;\r\n          popular: boolean | null;\r\n          new: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id: string;\r\n          name: string;\r\n          description?: string | null;\r\n          icon?: string | null;\r\n          image?: string | null;\r\n          features?: string[] | null;\r\n          category?: string | null;\r\n          popular?: boolean | null;\r\n          new?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          name?: string;\r\n          description?: string | null;\r\n          icon?: string | null;\r\n          image?: string | null;\r\n          features?: string[] | null;\r\n          category?: string | null;\r\n          popular?: boolean | null;\r\n          new?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      utm_metrics: {\r\n        Row: {\r\n          id: string;\r\n          total_campaigns: number | null;\r\n          total_leads: number | null;\r\n          conversion_rate: number | null;\r\n          is_stale: boolean | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          total_campaigns?: number | null;\r\n          total_leads?: number | null;\r\n          conversion_rate?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          total_campaigns?: number | null;\r\n          total_leads?: number | null;\r\n          conversion_rate?: number | null;\r\n          is_stale?: boolean | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      utm_tracking: {\r\n        Row: {\r\n          id: string;\r\n          lead_id: string | null;\r\n          utm_source: string | null;\r\n          utm_medium: string | null;\r\n          utm_campaign: string | null;\r\n          utm_term: string | null;\r\n          utm_content: string | null;\r\n          utm_conversion: boolean | null;\r\n          utm_conversion_value: number | null;\r\n          utm_conversion_stage: string | null;\r\n          landing_page: string | null;\r\n          device_type: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          lead_id?: string | null;\r\n          utm_source?: string | null;\r\n          utm_medium?: string | null;\r\n          utm_campaign?: string | null;\r\n          utm_term?: string | null;\r\n          utm_content?: string | null;\r\n          utm_conversion?: boolean | null;\r\n          utm_conversion_value?: number | null;\r\n          utm_conversion_stage?: string | null;\r\n          landing_page?: string | null;\r\n          device_type?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          lead_id?: string | null;\r\n          utm_source?: string | null;\r\n          utm_medium?: string | null;\r\n          utm_campaign?: string | null;\r\n          utm_term?: string | null;\r\n          utm_content?: string | null;\r\n          utm_conversion?: boolean | null;\r\n          utm_conversion_value?: number | null;\r\n          utm_conversion_stage?: string | null;\r\n          landing_page?: string | null;\r\n          device_type?: string | null;\r\n          created_at?: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n    };\r\n    Views: {\r\n      dashboard_metrics: {\r\n        Row: {\r\n          total_clients: number | null;\r\n          total_chats: number | null;\r\n          new_clients_this_month: number | null;\r\n          total_conversations: number | null;\r\n          response_rate: number | null;\r\n          conversion_rate: number | null;\r\n          negotiated_value: number | null;\r\n          total_campaigns: number | null;\r\n          total_leads: number | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      conversion_funnel_view: {\r\n        Row: {\r\n          name: string | null;\r\n          value: number | null;\r\n          percentage: number | null;\r\n          color: string | null;\r\n          created_at: string | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n      leads_analysis: {\r\n        Row: {\r\n          month: string | null;\r\n          clients: number | null;\r\n          leads: number | null;\r\n          source_name: string | null;\r\n          source_value: number | null;\r\n        };\r\n        Relationships: [];\r\n      };\r\n    };\r\n    Functions: {\r\n      get_metrics_by_date_range: {\r\n        Args: {\r\n          start_date?: string;\r\n          end_date?: string;\r\n        };\r\n        Returns: {\r\n          total_conversations: number;\r\n          response_rate: number;\r\n          conversion_rate: number;\r\n          negotiated_value: number;\r\n        }[];\r\n      };\r\n      get_funnel_by_date_range: {\r\n        Args: {\r\n          start_date?: string;\r\n          end_date?: string;\r\n        };\r\n        Returns: {\r\n          name: string;\r\n          value: number;\r\n          percentage: number;\r\n          color: string;\r\n        }[];\r\n      };\r\n    };\r\n    Enums: {};\r\n    CompositeTypes: {};\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\react.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\responses.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[101,104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[101,104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Generic API response helpers\r\nexport interface SupabaseResponse<T> {\r\n  data: T | null;\r\n  error: any;\r\n  success: boolean;\r\n}\r\n\r\nexport interface PaginatedResponse<T> {\r\n  data: T[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  page: number;\r\n  totalCount: number;\r\n  totalPages: number;\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n  goToPage: (page: number) => void;\r\n  refetch: () => void;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\supabase\\stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\types\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[984,987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[984,987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1891,1894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1891,1894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Utility types for backwards compatibility\r\n\r\n// Add missing properties to existing interfaces\r\nexport interface PricingPlanWithAI {\r\n  ai_products?: string[];\r\n  billing_period: 'monthly' | 'yearly';\r\n}\r\n\r\n// Schedule types with missing properties\r\nexport interface ScheduleEventExtended {\r\n  id: string;\r\n  title: string;\r\n  date?: string;\r\n  time?: string;\r\n  start_time?: string;\r\n  end_time?: string;\r\n  clientName?: string;\r\n  client_name?: string;\r\n  description?: string;\r\n  status?: string;\r\n}\r\n\r\n// UTM Data with all required fields\r\nexport interface UTMDataComplete {\r\n  id: string;\r\n  utm_source?: string;\r\n  utm_medium?: string;\r\n  utm_campaign?: string;\r\n  utm_content?: string;\r\n  utm_term?: string;\r\n  utm_created_at: string;\r\n  created_at: string;\r\n  device_type?: string;\r\n  fbclid?: string;\r\n  first_seen_at?: string;\r\n  first_utm_campaign?: string;\r\n  first_utm_content?: string;\r\n  first_utm_created_at?: string;\r\n  first_utm_medium?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// Product types with category\r\nexport interface ProductWithCategory {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  price?: number;\r\n  category?: string;\r\n}\r\n\r\n// Contact with all required fields\r\nexport interface ContactComplete {\r\n  id: string;\r\n  name: string;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  client_name?: string | null;\r\n  status?: string;\r\n  sessionId?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Funnel data with all fields\r\nexport interface FunnelDataComplete {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\n// Metrics with all required fields\r\nexport interface MetricsComplete {\r\n  total_clients?: number;\r\n  total_chats?: number;\r\n  conversion_rate?: number;\r\n  negotiated_value?: number;\r\n  new_clients_this_month?: number;\r\n  response_rate?: number;\r\n  total_campaigns?: number;\r\n  [key: string]: any;\r\n}\r\n\r\n// API Response types\r\nexport interface ApiResponse<T> {\r\n  data?: T;\r\n  success: boolean;\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\n// Hook return types with isLoading\r\nexport interface QueryHookReturn<T> {\r\n  data?: T;\r\n  isLoading: boolean;\r\n  loading: boolean;\r\n  error?: string | Error;\r\n  refetch: () => void;\r\n}\r\n\r\n// Chart data types\r\nexport interface LeadsAverageByTimeDataComplete {\r\n  date: string;\r\n  day: number;\r\n  morning: number;\r\n  afternoon: number;\r\n  evening: number;\r\n}\r\n\r\n// Client types for compatibility\r\nexport interface ClientWithMetrics {\r\n  id: string;\r\n  name: string;\r\n  marketingClients?: number;\r\n  lastVisit?: string;\r\n}","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\agendaUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\chatUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2149,2152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2149,2152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2437,2440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2437,2440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2558,2561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2558,2561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2834,2837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2834,2837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3066,3069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3066,3069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3819,3822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3819,3822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatMessage, N8nChatHistory, Conversation } from \"@/types/chat\";\r\n\r\nexport const extractHourFromTimestamp = (timestamp: string): string => {\r\n  try {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleTimeString(\"pt-BR\", {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error parsing timestamp:\", error);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const formatMessageTime = (date: Date): string => {\r\n  const now = new Date();\r\n  const diffInDays = Math.floor(\r\n    (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24),\r\n  );\r\n\r\n  if (diffInDays === 0) {\r\n    return date.toLocaleTimeString(\"pt-BR\", {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    });\r\n  } else if (diffInDays === 1) {\r\n    return \"Ontem\";\r\n  } else if (diffInDays < 7) {\r\n    const days = [\r\n      \"Domingo\",\r\n      \"Segunda\",\r\n      \"Ter├ºa\",\r\n      \"Quarta\",\r\n      \"Quinta\",\r\n      \"Sexta\",\r\n      \"S├íbado\",\r\n    ];\r\n    return days[date.getDay()];\r\n  } else {\r\n    return date.toLocaleDateString(\"pt-BR\");\r\n  }\r\n};\r\n\r\n// Fun├º├úo auxiliar para criar uma mensagem de chat\r\nconst createChatMessage = (role: string, content: string, timestamp: string, type?: string): ChatMessage => {\r\n  return {\r\n    role: role as \"user\" | \"assistant\" | \"human\" | \"ai\" | \"unknown\",\r\n    content,\r\n    timestamp,\r\n    type: (type as \"image\" | \"human\" | \"ai\" | \"text\" | \"file\") || \"text\",\r\n  };\r\n};\r\n\r\n// Fun├º├úo auxiliar para processar mensagem em formato string\r\nconst parseStringMessage = (message: string, timestamp: string): ChatMessage[] => {\r\n  const parsedMessages: ChatMessage[] = [];\r\n  \r\n  try {\r\n    const jsonMessage = JSON.parse(message);\r\n    if (jsonMessage.type && jsonMessage.content) {\r\n      const role = jsonMessage.type === \"human\" ? \"user\" : \"assistant\";\r\n      parsedMessages.push(createChatMessage(role, jsonMessage.content, timestamp, jsonMessage.type));\r\n    }\r\n  } catch (e) {\r\n    parsedMessages.push(createChatMessage(\"unknown\", message, timestamp));\r\n  }\r\n  \r\n  return parsedMessages;\r\n};\r\n\r\n// Fun├º├úo para processar mensagem com tipo e conte├║do\r\nconst processTypeAndContent = (messageObj: any, timestamp: string): ChatMessage[] => {\r\n  const role = messageObj.type === \"human\" ? \"user\" : \"assistant\";\r\n  return [createChatMessage(role, messageObj.content, timestamp, messageObj.type)];\r\n};\r\n\r\n// Fun├º├úo para processar array de mensagens\r\nconst processMessageArray = (messages: any[], timestamp: string): ChatMessage[] => {\r\n  const parsedMessages: ChatMessage[] = [];\r\n  \r\n  messages.forEach((msg: any) => {\r\n    if (msg.role && msg.content) {\r\n      parsedMessages.push(createChatMessage(msg.role, msg.content, timestamp));\r\n    }\r\n  });\r\n  \r\n  return parsedMessages;\r\n};\r\n\r\n// Fun├º├úo para processar mensagem com role e conte├║do\r\nconst processRoleAndContent = (messageObj: any, timestamp: string): ChatMessage[] => {\r\n  return [createChatMessage(messageObj.role, messageObj.content, timestamp)];\r\n};\r\n\r\n// Fun├º├úo auxiliar para processar mensagem em formato objeto\r\nconst parseObjectMessage = (messageObj: any, timestamp: string): ChatMessage[] => {\r\n  if (messageObj.type && messageObj.content) {\r\n    return processTypeAndContent(messageObj, timestamp);\r\n  } \r\n  \r\n  if (messageObj.messages && Array.isArray(messageObj.messages)) {\r\n    return processMessageArray(messageObj.messages, timestamp);\r\n  } \r\n  \r\n  if (messageObj.role && messageObj.content) {\r\n    return processRoleAndContent(messageObj, timestamp);\r\n  }\r\n  \r\n  return [];\r\n};\r\n\r\n// Fun├º├úo para extrair timestamp do hist├│rico de chat\r\nconst extractTimestampFromHistory = (chatHistory: N8nChatHistory): string => {\r\n  return chatHistory.data ? extractHourFromTimestamp(chatHistory.data) : \"\";\r\n};\r\n\r\n// Fun├º├úo para processar mensagem com base em seu tipo\r\nconst processMessageByType = (message: any, timestamp: string): ChatMessage[] => {\r\n  if (typeof message === \"string\") {\r\n    return parseStringMessage(message, timestamp);\r\n  }\r\n  \r\n  if (message && typeof message === \"object\") {\r\n    return parseObjectMessage(message, timestamp);\r\n  }\r\n  \r\n  return [];\r\n};\r\n\r\nexport const parseMessage = (chatHistory: N8nChatHistory): ChatMessage[] => {\r\n  try {\r\n    const timestamp = extractTimestampFromHistory(chatHistory);\r\n    return processMessageByType(chatHistory.message, timestamp);\r\n  } catch (error) {\r\n    console.error(\"Error parsing message:\", error, chatHistory);\r\n    return [];\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\clientDataUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\customFieldValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[206,209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[206,209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[637,640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[637,640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[968,971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[968,971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1127,1130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1127,1130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1350,1353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1350,1353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2359,2362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2359,2362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ValidationRule } from \"@/types/customFields\";\r\n\r\nexport interface ValidationError {\r\n  fieldId: string;\r\n  message: string;\r\n}\r\n\r\nexport function validateCustomField(\r\n  fieldId: string,\r\n  value: any,\r\n  validationRules: ValidationRule[],\r\n): ValidationError | null {\r\n  const fieldRules = validationRules.filter(\r\n    (rule) => rule.field_id === fieldId,\r\n  );\r\n\r\n  for (const rule of fieldRules) {\r\n    const error = validateRule(fieldId, value, rule);\r\n    if (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Fun├º├Áes auxiliares para valida├º├úo de regras espec├¡ficas\r\nfunction validateRequiredRule(value: any, ruleValue: string): boolean {\r\n  return ruleValue === \"true\" && (value === null || value === undefined || value === \"\");\r\n}\r\n\r\nfunction validateMinLengthRule(value: any, ruleValue: string): boolean {\r\n  return typeof value === \"string\" && value.length < parseInt(ruleValue || \"0\");\r\n}\r\n\r\nfunction validateMaxLengthRule(value: any, ruleValue: string): boolean {\r\n  return typeof value === \"string\" && value.length > parseInt(ruleValue || \"0\");\r\n}\r\n\r\nfunction validatePatternRule(value: any, ruleValue: string): boolean {\r\n  if (typeof value === \"string\" && ruleValue) {\r\n    const regex = new RegExp(ruleValue);\r\n    return !regex.test(value);\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateMinValueRule(value: any, ruleValue: string): boolean {\r\n  return typeof value === \"number\" && value < parseFloat(ruleValue || \"0\");\r\n}\r\n\r\nfunction validateMaxValueRule(value: any, ruleValue: string): boolean {\r\n  return typeof value === \"number\" && value > parseFloat(ruleValue || \"0\");\r\n}\r\n\r\n// Fun├º├úo principal de valida├º├úo com complexidade reduzida\r\nfunction validateRule(\r\n  fieldId: string,\r\n  value: any,\r\n  rule: ValidationRule,\r\n): ValidationError | null {\r\n  const validators = {\r\n    required: validateRequiredRule,\r\n    min_length: validateMinLengthRule,\r\n    max_length: validateMaxLengthRule,\r\n    pattern: validatePatternRule,\r\n    min_value: validateMinValueRule,\r\n    max_value: validateMaxValueRule,\r\n  };\r\n\r\n  const validator = validators[rule.rule_type as keyof typeof validators];\r\n  \r\n  if (validator && validator(value, rule.rule_value || \"\")) {\r\n    return { fieldId, message: rule.error_message };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function validateAllCustomFields(\r\n  fieldValues: { [fieldId: string]: any },\r\n  validationRules: ValidationRule[],\r\n): ValidationError[] {\r\n  const errors: ValidationError[] = [];\r\n\r\n  Object.entries(fieldValues).forEach(([fieldId, value]) => {\r\n    const error = validateCustomField(fieldId, value, validationRules);\r\n    if (error) {\r\n      errors.push(error);\r\n    }\r\n  });\r\n\r\n  return errors;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\dateUtils.ts","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":21,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":25,"endColumn":9,"suggestions":[{"messageId":"addBrackets","fix":{"range":[630,820],"text":"{ const contactDay = new Date(\n        contactDate.getFullYear(),\n        contactDate.getMonth(),\n        contactDate.getDate(),\n      );\n      return contactDay.getTime() === today.getTime(); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":29,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":29,"endColumn":39,"suggestions":[{"messageId":"addBrackets","fix":{"range":[845,980],"text":"{ const weekAgo = new Date(today);\n      weekAgo.setDate(today.getDate() - 7);\n      return contactDate >= weekAgo && contactDate <= now; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":34,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":34,"endColumn":40,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1006,1146],"text":"{ const monthAgo = new Date(today);\n      monthAgo.setMonth(today.getMonth() - 1);\n      return contactDate >= monthAgo && contactDate <= now; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":39,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":39,"endColumn":45,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1172,1303],"text":"{ const thirtyDaysAgo = new Date(today);\n      thirtyDaysAgo.setDate(today.getDate() - 30);\n      return contactDate < thirtyDaysAgo; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const isDateInPeriod = (dateStr: string, period: string): boolean => {\n  if (!dateStr || dateStr === \"Desconhecido\") return false;\n\n  // Parse Brazilian date format (dd/mm/yyyy)\n  const dateParts = dateStr.split(\"/\");\n  if (dateParts.length !== 3) return false;\n\n  const contactDate = new Date(\n    parseInt(dateParts[2]), // year\n    parseInt(dateParts[1]) - 1, // month (0-indexed)\n    parseInt(dateParts[0]), // day\n  );\n\n  if (isNaN(contactDate.getTime())) return false;\n\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  switch (period) {\n    case \"today\":\n      const contactDay = new Date(\n        contactDate.getFullYear(),\n        contactDate.getMonth(),\n        contactDate.getDate(),\n      );\n      return contactDay.getTime() === today.getTime();\n\n    case \"week\":\n      const weekAgo = new Date(today);\n      weekAgo.setDate(today.getDate() - 7);\n      return contactDate >= weekAgo && contactDate <= now;\n\n    case \"month\":\n      const monthAgo = new Date(today);\n      monthAgo.setMonth(today.getMonth() - 1);\n      return contactDate >= monthAgo && contactDate <= now;\n\n    case \"older\":\n      const thirtyDaysAgo = new Date(today);\n      thirtyDaysAgo.setDate(today.getDate() - 30);\n      return contactDate < thirtyDaysAgo;\n\n    default:\n      return true;\n  }\n};\n\n// Formata├º├úo de data para a API do n8n\nexport const formatDateForN8NApi = (date: Date, isEndOfDay = false): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  const time = isEndOfDay ? \"23:59:59.999\" : \"00:00:00.000\";\n  const timezone = \"-03:00\"; // Hor├írio de Bras├¡lia\n\n  return `${year}-${month}-${day}T${time}${timezone}`;\n};\n\n// Validar se uma data est├í no formato ISO correto\nexport const isValidISODate = (dateStr: string): boolean => {\n  try {\n    const date = new Date(dateStr);\n    return !isNaN(date.getTime()) && dateStr.includes(\"T\");\n  } catch {\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventFormHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\eventUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\fictitiousMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\navigationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\scheduleUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\utils\\subscriptionUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\DEV\\docker n8n\\valoredash-v1-48\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
